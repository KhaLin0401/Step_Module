
Stepper_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800a4b4  0800a4b4  0000b4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a584  0800a584  0000c014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a584  0800a584  0000c014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a584  0800a584  0000c014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a584  0800a584  0000b584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a588  0800a588  0000b588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800a58c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f00  20000014  0800a5a0  0000c014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f14  0800a5a0  0000cf14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9ed  00000000  00000000  0000c03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2e  00000000  00000000  00027a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  0002b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001401  00000000  00000000  0002d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3ba  00000000  00000000  0002e4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8a6  00000000  00000000  0004888b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cc38  00000000  00000000  00065131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101d69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df8  00000000  00000000  00101dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00108ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a49c 	.word	0x0800a49c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	0800a49c 	.word	0x0800a49c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <MotorRegisters_Load>:
    }
    
    return modbusAddress; // Return as is if not in any range
}
// Load từ modbus registers
void MotorRegisters_Load(MotorRegisterMap_t* motor, uint16_t base_addr) {
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
    motor->Control_Mode = g_holdingRegisters[base_addr + 0x00];
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	4a39      	ldr	r2, [pc, #228]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	701a      	strb	r2, [r3, #0]
    motor->Enable = g_holdingRegisters[base_addr + 0x01];
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	3301      	adds	r3, #1
 8000756:	4a35      	ldr	r2, [pc, #212]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	705a      	strb	r2, [r3, #1]
    motor->Command_Speed = g_holdingRegisters[base_addr + 0x02];
 8000762:	887b      	ldrh	r3, [r7, #2]
 8000764:	3302      	adds	r3, #2
 8000766:	4a31      	ldr	r2, [pc, #196]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	709a      	strb	r2, [r3, #2]
    motor->Actual_Speed = g_holdingRegisters[base_addr + 0x03];
 8000772:	887b      	ldrh	r3, [r7, #2]
 8000774:	3303      	adds	r3, #3
 8000776:	4a2d      	ldr	r2, [pc, #180]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	70da      	strb	r2, [r3, #3]
    motor->Direction = g_holdingRegisters[base_addr + 0x04];
 8000782:	887b      	ldrh	r3, [r7, #2]
 8000784:	3304      	adds	r3, #4
 8000786:	4a29      	ldr	r2, [pc, #164]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	711a      	strb	r2, [r3, #4]
    motor->Max_Speed = g_holdingRegisters[base_addr + 0x05];
 8000792:	887b      	ldrh	r3, [r7, #2]
 8000794:	3305      	adds	r3, #5
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	715a      	strb	r2, [r3, #5]
    motor->Min_Speed = g_holdingRegisters[base_addr + 0x06];
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	3306      	adds	r3, #6
 80007a6:	4a21      	ldr	r2, [pc, #132]	@ (800082c <MotorRegisters_Load+0xf4>)
 80007a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	719a      	strb	r2, [r3, #6]
    motor->Vmax = g_holdingRegisters[base_addr + 0x07];
 80007b2:	887b      	ldrh	r3, [r7, #2]
 80007b4:	3307      	adds	r3, #7
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <MotorRegisters_Load+0xf4>)
 80007b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	71da      	strb	r2, [r3, #7]
    motor->Amax = g_holdingRegisters[base_addr + 0x08];
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	3308      	adds	r3, #8
 80007c6:	4a19      	ldr	r2, [pc, #100]	@ (800082c <MotorRegisters_Load+0xf4>)
 80007c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	721a      	strb	r2, [r3, #8]
    motor->Jmax = g_holdingRegisters[base_addr + 0x09];
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	3309      	adds	r3, #9
 80007d6:	4a15      	ldr	r2, [pc, #84]	@ (800082c <MotorRegisters_Load+0xf4>)
 80007d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	725a      	strb	r2, [r3, #9]
    motor->Max_Acc = g_holdingRegisters[base_addr + 0x0A];
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	330a      	adds	r3, #10
 80007e6:	4a11      	ldr	r2, [pc, #68]	@ (800082c <MotorRegisters_Load+0xf4>)
 80007e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	729a      	strb	r2, [r3, #10]
    motor->Max_Dec = g_holdingRegisters[base_addr + 0x0B];
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	330b      	adds	r3, #11
 80007f6:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <MotorRegisters_Load+0xf4>)
 80007f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	72da      	strb	r2, [r3, #11]
    motor->Status_Word = g_holdingRegisters[base_addr + 0x0C];
 8000802:	887b      	ldrh	r3, [r7, #2]
 8000804:	330c      	adds	r3, #12
 8000806:	4a09      	ldr	r2, [pc, #36]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	731a      	strb	r2, [r3, #12]
    motor->Error_Code = g_holdingRegisters[base_addr + 0x0D];
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	330d      	adds	r3, #13
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <MotorRegisters_Load+0xf4>)
 8000818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	735a      	strb	r2, [r3, #13]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000088 	.word	0x20000088

08000830 <MotorRegisters_Save>:
    sys->Config_Baudrate = g_holdingRegisters[base_addr + 5];
    sys->Config_Parity = g_holdingRegisters[base_addr + 6];
}

// Save lại vào modbus registers
void MotorRegisters_Save(MotorRegisterMap_t* motor, uint16_t base_addr){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
    g_holdingRegisters[base_addr + 0x00] = motor->Control_Mode;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	4611      	mov	r1, r2
 8000844:	4a37      	ldr	r2, [pc, #220]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000846:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x01] = motor->Enable;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	785a      	ldrb	r2, [r3, #1]
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	3301      	adds	r3, #1
 8000852:	4611      	mov	r1, r2
 8000854:	4a33      	ldr	r2, [pc, #204]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x02] = motor->Command_Speed;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	789a      	ldrb	r2, [r3, #2]
 800085e:	887b      	ldrh	r3, [r7, #2]
 8000860:	3302      	adds	r3, #2
 8000862:	4611      	mov	r1, r2
 8000864:	4a2f      	ldr	r2, [pc, #188]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x03] = motor->Actual_Speed;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	78da      	ldrb	r2, [r3, #3]
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	3303      	adds	r3, #3
 8000872:	4611      	mov	r1, r2
 8000874:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x04] = motor->Direction;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	791a      	ldrb	r2, [r3, #4]
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	3304      	adds	r3, #4
 8000882:	4611      	mov	r1, r2
 8000884:	4a27      	ldr	r2, [pc, #156]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000886:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x05] = motor->Max_Speed;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	795a      	ldrb	r2, [r3, #5]
 800088e:	887b      	ldrh	r3, [r7, #2]
 8000890:	3305      	adds	r3, #5
 8000892:	4611      	mov	r1, r2
 8000894:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000896:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x06] = motor->Min_Speed;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	799a      	ldrb	r2, [r3, #6]
 800089e:	887b      	ldrh	r3, [r7, #2]
 80008a0:	3306      	adds	r3, #6
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <MotorRegisters_Save+0xf4>)
 80008a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x07] = motor->Vmax;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	79da      	ldrb	r2, [r3, #7]
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	3307      	adds	r3, #7
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <MotorRegisters_Save+0xf4>)
 80008b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x08] = motor->Amax;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7a1a      	ldrb	r2, [r3, #8]
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	3308      	adds	r3, #8
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <MotorRegisters_Save+0xf4>)
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x09] = motor->Jmax;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7a5a      	ldrb	r2, [r3, #9]
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	3309      	adds	r3, #9
 80008d2:	4611      	mov	r1, r2
 80008d4:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MotorRegisters_Save+0xf4>)
 80008d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x0A] = motor->Max_Acc;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7a9a      	ldrb	r2, [r3, #10]
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	330a      	adds	r3, #10
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <MotorRegisters_Save+0xf4>)
 80008e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x0B] = motor->Max_Dec;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7ada      	ldrb	r2, [r3, #11]
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	330b      	adds	r3, #11
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <MotorRegisters_Save+0xf4>)
 80008f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x0C] = motor->Status_Word;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7b1a      	ldrb	r2, [r3, #12]
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	330c      	adds	r3, #12
 8000902:	4611      	mov	r1, r2
 8000904:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000906:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    g_holdingRegisters[base_addr + 0x0D] = motor->Error_Code;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7b5a      	ldrb	r2, [r3, #13]
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	330d      	adds	r3, #13
 8000912:	4611      	mov	r1, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	@ (8000924 <MotorRegisters_Save+0xf4>)
 8000916:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000088 	.word	0x20000088

08000928 <Motor_ProcessControl>:
    g_holdingRegisters[base_addr + 5] = sys->Config_Baudrate;
    g_holdingRegisters[base_addr + 6] = sys->Config_Parity;
}

// Xử lý logic điều khiển motor
void Motor_ProcessControl(MotorRegisterMap_t* motor){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    if(motor->Enable == 1){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d114      	bne.n	8000962 <Motor_ProcessControl+0x3a>
        HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093e:	4820      	ldr	r0, [pc, #128]	@ (80009c0 <Motor_ProcessControl+0x98>)
 8000940:	f002 fd9e 	bl	8003480 <HAL_GPIO_WritePin>
        switch(motor->Control_Mode){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d002      	beq.n	8000952 <Motor_ProcessControl+0x2a>
 800094c:	2b02      	cmp	r3, #2
 800094e:	d004      	beq.n	800095a <Motor_ProcessControl+0x32>
            case CONTROL_MODE_RAMP:
                Motor_HandleRamp(motor);
                break;

            default:
                break;
 8000950:	e031      	b.n	80009b6 <Motor_ProcessControl+0x8e>
                Motor_HandleOnOff(motor);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f8bc 	bl	8000ad0 <Motor_HandleOnOff>
                break;
 8000958:	e02d      	b.n	80009b6 <Motor_ProcessControl+0x8e>
                Motor_HandleRamp(motor);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f8c4 	bl	8000ae8 <Motor_HandleRamp>
                break;
 8000960:	e029      	b.n	80009b6 <Motor_ProcessControl+0x8e>
        }   
    }
    else if(motor->Enable == 0){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d125      	bne.n	80009b6 <Motor_ProcessControl+0x8e>
        HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000970:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <Motor_ProcessControl+0x98>)
 8000972:	f002 fd85 	bl	8003480 <HAL_GPIO_WritePin>
        motor->Status_Word = 0x0000;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	731a      	strb	r2, [r3, #12]
        g_holdingRegisters[REG_M1_STATUS_WORD] = 0x0000;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <Motor_ProcessControl+0x9c>)
 800097e:	2200      	movs	r2, #0
 8000980:	831a      	strh	r2, [r3, #24]
        motor->Direction = IDLE;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	711a      	strb	r2, [r3, #4]
        motor->Actual_Speed = 0; // Reset actual speed when disabled
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	70da      	strb	r2, [r3, #3]
        
        if(motor == &motor1) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <Motor_ProcessControl+0xa0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d107      	bne.n	80009a6 <Motor_ProcessControl+0x7e>
            Motor1_OutputPWM(motor, 0);           // Stop PWM with 0% duty
 8000996:	2100      	movs	r1, #0
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 fa79 	bl	8000e90 <Motor1_OutputPWM>
            Motor1_Set_Direction(IDLE);           // Set direction to IDLE
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f814 	bl	80009cc <Motor1_Set_Direction>
        } else {
            Motor2_OutputPWM(motor, 0);           // Stop PWM with 0% duty  
            Motor2_Set_Direction(IDLE);           // Set direction to IDLE
        }
    }
}
 80009a4:	e007      	b.n	80009b6 <Motor_ProcessControl+0x8e>
            Motor2_OutputPWM(motor, 0);           // Stop PWM with 0% duty  
 80009a6:	2100      	movs	r1, #0
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 fa95 	bl	8000ed8 <Motor2_OutputPWM>
            Motor2_Set_Direction(IDLE);           // Set direction to IDLE
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f850 	bl	8000a54 <Motor2_Set_Direction>
}
 80009b4:	e7ff      	b.n	80009b6 <Motor_ProcessControl+0x8e>
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010800 	.word	0x40010800
 80009c4:	20000088 	.word	0x20000088
 80009c8:	20000030 	.word	0x20000030

080009cc <Motor1_Set_Direction>:
    motor->Actual_Speed = 0; // Reset actual speed when disabled
}



void Motor1_Set_Direction(uint8_t direction){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
    if(direction == IDLE){
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d118      	bne.n	8000a0e <Motor1_Set_Direction+0x42>
        motor1.Direction = IDLE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <Motor1_Set_Direction+0x78>)
 80009de:	2200      	movs	r2, #0
 80009e0:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2110      	movs	r1, #16
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <Motor1_Set_Direction+0x7c>)
 80009e8:	f002 fd4a 	bl	8003480 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2102      	movs	r1, #2
 80009f0:	4816      	ldr	r0, [pc, #88]	@ (8000a4c <Motor1_Set_Direction+0x80>)
 80009f2:	f002 fd45 	bl	8003480 <HAL_GPIO_WritePin>
        motor1.Actual_Speed = 0; // Reset actual speed when idle
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <Motor1_Set_Direction+0x78>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	70da      	strb	r2, [r3, #3]
        
        // ✅ CRITICAL FIX: STOP ALL PWM CHANNELS WHEN IDLE
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80009fc:	2100      	movs	r1, #0
 80009fe:	4814      	ldr	r0, [pc, #80]	@ (8000a50 <Motor1_Set_Direction+0x84>)
 8000a00:	f005 f9d2 	bl	8005da8 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000a04:	2104      	movs	r1, #4
 8000a06:	4812      	ldr	r0, [pc, #72]	@ (8000a50 <Motor1_Set_Direction+0x84>)
 8000a08:	f005 f9ce 	bl	8005da8 <HAL_TIM_PWM_Stop>
        motor1.Direction = REVERSE;
        HAL_GPIO_WritePin(GPIOA, DIR_1_Pin, GPIO_PIN_RESET);
        // HAL_GPIO_WritePin(GPIOB, DIR_2_Pin, GPIO_PIN_SET);
        // motor1.Actual_Speed = motor1.Command_Speed; // Set actual speed to command speed
    }
}
 8000a0c:	e016      	b.n	8000a3c <Motor1_Set_Direction+0x70>
    }else if(direction == FORWARD){
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d108      	bne.n	8000a26 <Motor1_Set_Direction+0x5a>
        motor1.Direction = FORWARD;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <Motor1_Set_Direction+0x78>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(GPIOA, DIR_1_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	480a      	ldr	r0, [pc, #40]	@ (8000a48 <Motor1_Set_Direction+0x7c>)
 8000a20:	f002 fd2e 	bl	8003480 <HAL_GPIO_WritePin>
}
 8000a24:	e00a      	b.n	8000a3c <Motor1_Set_Direction+0x70>
    }else if(direction == REVERSE){
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d107      	bne.n	8000a3c <Motor1_Set_Direction+0x70>
        motor1.Direction = REVERSE;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <Motor1_Set_Direction+0x78>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(GPIOA, DIR_1_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2110      	movs	r1, #16
 8000a36:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <Motor1_Set_Direction+0x7c>)
 8000a38:	f002 fd22 	bl	8003480 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000030 	.word	0x20000030
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	20000524 	.word	0x20000524

08000a54 <Motor2_Set_Direction>:
void Motor2_Set_Direction(uint8_t direction){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
    if(direction == IDLE){
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d113      	bne.n	8000a8c <Motor2_Set_Direction+0x38>
        motor2.Direction = IDLE;
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <Motor2_Set_Direction+0x70>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(GPIOA, DIR_2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4816      	ldr	r0, [pc, #88]	@ (8000ac8 <Motor2_Set_Direction+0x74>)
 8000a70:	f002 fd06 	bl	8003480 <HAL_GPIO_WritePin>
        motor2.Actual_Speed = 0; // Reset actual speed when idle
 8000a74:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <Motor2_Set_Direction+0x70>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	70da      	strb	r2, [r3, #3]
        
        // ✅ CRITICAL FIX: STOP ALL PWM CHANNELS WHEN IDLE
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4813      	ldr	r0, [pc, #76]	@ (8000acc <Motor2_Set_Direction+0x78>)
 8000a7e:	f005 f993 	bl	8005da8 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000a82:	2108      	movs	r1, #8
 8000a84:	4811      	ldr	r0, [pc, #68]	@ (8000acc <Motor2_Set_Direction+0x78>)
 8000a86:	f005 f98f 	bl	8005da8 <HAL_TIM_PWM_Stop>
    }else if(direction == REVERSE){
        motor2.Direction = REVERSE;
        HAL_GPIO_WritePin(GPIOA, DIR_2_Pin, GPIO_PIN_RESET);
        // motor2.Actual_Speed = motor2.Command_Speed; // Set actual speed to command speed
    }
}
 8000a8a:	e016      	b.n	8000aba <Motor2_Set_Direction+0x66>
    }else if(direction == FORWARD){
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d108      	bne.n	8000aa4 <Motor2_Set_Direction+0x50>
        motor2.Direction = FORWARD;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <Motor2_Set_Direction+0x70>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(GPIOA, DIR_2_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	480a      	ldr	r0, [pc, #40]	@ (8000ac8 <Motor2_Set_Direction+0x74>)
 8000a9e:	f002 fcef 	bl	8003480 <HAL_GPIO_WritePin>
}
 8000aa2:	e00a      	b.n	8000aba <Motor2_Set_Direction+0x66>
    }else if(direction == REVERSE){
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d107      	bne.n	8000aba <Motor2_Set_Direction+0x66>
        motor2.Direction = REVERSE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <Motor2_Set_Direction+0x70>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(GPIOA, DIR_2_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <Motor2_Set_Direction+0x74>)
 8000ab6:	f002 fce3 	bl	8003480 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000040 	.word	0x20000040
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	20000494 	.word	0x20000494

08000ad0 <Motor_HandleOnOff>:
}



// Xử lý ON/OFF mode (mode 1)
uint8_t Motor_HandleOnOff(MotorRegisterMap_t* motor) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    //         Motor2_OutputPWM(motor, 0);
    //         Motor2_Set_Direction(IDLE);
    //     }
    // }
    // return duty;
    return;
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
	...

08000ae8 <Motor_HandleRamp>:
        return simulated_speed2;
    }
}

// Xử lý PID mode (mode 3)
uint8_t Motor_HandleRamp(MotorRegisterMap_t* motor) {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    uint8_t motor_id = (motor == &motor1) ? 1 : 2;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a55      	ldr	r2, [pc, #340]	@ (8000c48 <Motor_HandleRamp+0x160>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <Motor_HandleRamp+0x14>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e000      	b.n	8000afe <Motor_HandleRamp+0x16>
 8000afc:	2302      	movs	r3, #2
 8000afe:	75fb      	strb	r3, [r7, #23]
    MotionState_t* motion_state = (motor_id == 1) ? &m1_motion_state : &m2_motion_state;
 8000b00:	7dfb      	ldrb	r3, [r7, #23]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d101      	bne.n	8000b0a <Motor_HandleRamp+0x22>
 8000b06:	4b51      	ldr	r3, [pc, #324]	@ (8000c4c <Motor_HandleRamp+0x164>)
 8000b08:	e000      	b.n	8000b0c <Motor_HandleRamp+0x24>
 8000b0a:	4b51      	ldr	r3, [pc, #324]	@ (8000c50 <Motor_HandleRamp+0x168>)
 8000b0c:	613b      	str	r3, [r7, #16]

    // Check enable & mode
    if (motor->Enable == 0 || motor->Control_Mode != CONTROL_MODE_RAMP || motor->Direction == IDLE) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <Motor_HandleRamp+0x3e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d103      	bne.n	8000b26 <Motor_HandleRamp+0x3e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	791b      	ldrb	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d135      	bne.n	8000b92 <Motor_HandleRamp+0xaa>
        // Reset PID state
        motion_state->v_target = 200.0f;
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4a4a      	ldr	r2, [pc, #296]	@ (8000c54 <Motor_HandleRamp+0x16c>)
 8000b2a:	601a      	str	r2, [r3, #0]
        motion_state->a = 0.0f;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
        motion_state->j = 0.0f;
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
        motion_state->pos = 0.0f;
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
        motion_state->Distance = 0.0f;
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
        motion_state->dt = 0.0f;
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	f04f 0200 	mov.w	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
        motion_state->v_actual = 0.0f;
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
        
        // Reset actual speed when disabled
        motor->Actual_Speed = 0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	70da      	strb	r2, [r3, #3]
        
        // Disable motor output
        if (motor_id == 1) {
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d10b      	bne.n	8000b80 <Motor_HandleRamp+0x98>
            Motor1_OutputPWM(motor, 0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f990 	bl	8000e90 <Motor1_OutputPWM>
            Motor1_Set_Direction(DIRECTION_IDLE);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff ff2b 	bl	80009cc <Motor1_Set_Direction>
            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000b76:	2100      	movs	r1, #0
 8000b78:	4837      	ldr	r0, [pc, #220]	@ (8000c58 <Motor_HandleRamp+0x170>)
 8000b7a:	f005 f915 	bl	8005da8 <HAL_TIM_PWM_Stop>
 8000b7e:	e006      	b.n	8000b8e <Motor_HandleRamp+0xa6>
        } else {
            Motor2_OutputPWM(motor, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f9a8 	bl	8000ed8 <Motor2_OutputPWM>
            Motor2_Set_Direction(DIRECTION_IDLE);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff63 	bl	8000a54 <Motor2_Set_Direction>
        }
        return 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e172      	b.n	8000e78 <Motor_HandleRamp+0x390>
    }
    else if (motor->Control_Mode == CONTROL_MODE_RAMP && motor->Enable == 1 && motor->Direction != IDLE) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	f040 8167 	bne.w	8000e6a <Motor_HandleRamp+0x382>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	f040 8162 	bne.w	8000e6a <Motor_HandleRamp+0x382>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 815d 	beq.w	8000e6a <Motor_HandleRamp+0x382>
        motion_state->v_target = DEFAULT_VMIN + (motor->Vmax - DEFAULT_VMIN) * (motor->Command_Speed / 100.0f);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	79db      	ldrb	r3, [r3, #7]
 8000bb4:	3bc8      	subs	r3, #200	@ 0xc8
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb84 	bl	80002c4 <__aeabi_i2f>
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb7e 	bl	80002c4 <__aeabi_i2f>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4924      	ldr	r1, [pc, #144]	@ (8000c5c <Motor_HandleRamp+0x174>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc81 	bl	80004d4 <__aeabi_fdiv>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f7ff fbc8 	bl	800036c <__aeabi_fmul>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	491d      	ldr	r1, [pc, #116]	@ (8000c54 <Motor_HandleRamp+0x16c>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fabb 	bl	800015c <__addsf3>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]
        float dv = motion_state->v_target - motion_state->v_actual;
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	f7ff faad 	bl	8000158 <__aeabi_fsub>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	60fb      	str	r3, [r7, #12]

        // Cập nhật jerk -> gia tốc
        if (dv > 0) {
 8000c02:	f04f 0100 	mov.w	r1, #0
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fd6c 	bl	80006e4 <__aeabi_fcmpgt>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d008      	beq.n	8000c24 <Motor_HandleRamp+0x13c>
            motion_state->j = motor->Jmax;   // tăng tốc
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7a5b      	ldrb	r3, [r3, #9]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fb50 	bl	80002bc <__aeabi_ui2f>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	e021      	b.n	8000c68 <Motor_HandleRamp+0x180>
        } else if (dv < 0) {
 8000c24:	f04f 0100 	mov.w	r1, #0
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fd3d 	bl	80006a8 <__aeabi_fcmplt>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d015      	beq.n	8000c60 <Motor_HandleRamp+0x178>
            motion_state->j = -motor->Jmax;  // giảm tốc
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7a5b      	ldrb	r3, [r3, #9]
 8000c38:	425b      	negs	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fb42 	bl	80002c4 <__aeabi_i2f>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	e00f      	b.n	8000c68 <Motor_HandleRamp+0x180>
 8000c48:	20000030 	.word	0x20000030
 8000c4c:	20000050 	.word	0x20000050
 8000c50:	2000006c 	.word	0x2000006c
 8000c54:	43480000 	.word	0x43480000
 8000c58:	20000524 	.word	0x20000524
 8000c5c:	42c80000 	.word	0x42c80000
        } else {
            motion_state->j = 0;      // giữ nguyên
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
        }

        motion_state->a += motion_state->j * motion_state->dt;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	685c      	ldr	r4, [r3, #4]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	4619      	mov	r1, r3
 8000c76:	4610      	mov	r0, r2
 8000c78:	f7ff fb78 	bl	800036c <__aeabi_fmul>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff fa6b 	bl	800015c <__addsf3>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	605a      	str	r2, [r3, #4]

        // Giới hạn gia tốc
        if (motion_state->a > motor->Amax) motion_state->a = motor->Amax;
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	685c      	ldr	r4, [r3, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fb14 	bl	80002c4 <__aeabi_i2f>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff fd1f 	bl	80006e4 <__aeabi_fcmpgt>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d007      	beq.n	8000cbc <Motor_HandleRamp+0x1d4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7a1b      	ldrb	r3, [r3, #8]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fb03 	bl	80002bc <__aeabi_ui2f>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	605a      	str	r2, [r3, #4]
        if (motion_state->a < -motor->Amax) motion_state->a = -motor->Amax;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	685c      	ldr	r4, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7a1b      	ldrb	r3, [r3, #8]
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fafc 	bl	80002c4 <__aeabi_i2f>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f7ff fce9 	bl	80006a8 <__aeabi_fcmplt>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d008      	beq.n	8000cee <Motor_HandleRamp+0x206>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7a1b      	ldrb	r3, [r3, #8]
 8000ce0:	425b      	negs	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff faee 	bl	80002c4 <__aeabi_i2f>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]

        // Cập nhật vận tốc theo gia tốc
        motion_state->v_actual += motion_state->a * motion_state->dt;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	699c      	ldr	r4, [r3, #24]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	f7ff fb35 	bl	800036c <__aeabi_fmul>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fa28 	bl	800015c <__addsf3>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	619a      	str	r2, [r3, #24]

        // Giới hạn trong [0, Vmax]
        if (motion_state->v_actual > motor->Vmax) motion_state->v_actual = motor->Vmax;
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	699c      	ldr	r4, [r3, #24]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	79db      	ldrb	r3, [r3, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fad1 	bl	80002c4 <__aeabi_i2f>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4619      	mov	r1, r3
 8000d26:	4620      	mov	r0, r4
 8000d28:	f7ff fcdc 	bl	80006e4 <__aeabi_fcmpgt>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <Motor_HandleRamp+0x25a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	79db      	ldrb	r3, [r3, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fac0 	bl	80002bc <__aeabi_ui2f>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	619a      	str	r2, [r3, #24]
        if (motion_state->v_actual < 0) motion_state->v_actual = 0;
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f04f 0100 	mov.w	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fcac 	bl	80006a8 <__aeabi_fcmplt>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <Motor_HandleRamp+0x276>
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]

        // Cập nhật vị trí theo vận tốc
        motion_state->pos += motion_state->v_actual * motion_state->dt;
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	68dc      	ldr	r4, [r3, #12]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	f7ff fafd 	bl	800036c <__aeabi_fmul>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4620      	mov	r0, r4
 8000d78:	f7ff f9f0 	bl	800015c <__addsf3>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	60da      	str	r2, [r3, #12]
        if (motion_state->v_actual <= DEFAULT_VMIN) return 0.0f;
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	493d      	ldr	r1, [pc, #244]	@ (8000e80 <Motor_HandleRamp+0x398>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc96 	bl	80006bc <__aeabi_fcmple>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <Motor_HandleRamp+0x2b2>
 8000d96:	2300      	movs	r3, #0
 8000d98:	e06e      	b.n	8000e78 <Motor_HandleRamp+0x390>
        if (motion_state->v_actual >= motor->Vmax) return 100.0f;
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	699c      	ldr	r4, [r3, #24]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	79db      	ldrb	r3, [r3, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa8e 	bl	80002c4 <__aeabi_i2f>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4619      	mov	r1, r3
 8000dac:	4620      	mov	r0, r4
 8000dae:	f7ff fc8f 	bl	80006d0 <__aeabi_fcmpge>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <Motor_HandleRamp+0x2d4>
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	e05d      	b.n	8000e78 <Motor_HandleRamp+0x390>
        motor->Actual_Speed = (uint8_t)((motion_state->v_actual - DEFAULT_VMIN) / (motor->Vmax - DEFAULT_VMIN)) * 100.0f;
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	492f      	ldr	r1, [pc, #188]	@ (8000e80 <Motor_HandleRamp+0x398>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff f9c8 	bl	8000158 <__aeabi_fsub>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461c      	mov	r4, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	79db      	ldrb	r3, [r3, #7]
 8000dd0:	3bc8      	subs	r3, #200	@ 0xc8
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fa76 	bl	80002c4 <__aeabi_i2f>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff fb79 	bl	80004d4 <__aeabi_fdiv>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fc87 	bl	80006f8 <__aeabi_f2uiz>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fa68 	bl	80002c4 <__aeabi_i2f>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4923      	ldr	r1, [pc, #140]	@ (8000e84 <Motor_HandleRamp+0x39c>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fab7 	bl	800036c <__aeabi_fmul>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fc79 	bl	80006f8 <__aeabi_f2uiz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	70da      	strb	r2, [r3, #3]
        // Tính ARR cho timer STEP
        if (motion_state->v_actual > 0) {
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f04f 0100 	mov.w	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc64 	bl	80006e4 <__aeabi_fcmpgt>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d023      	beq.n	8000e6a <Motor_HandleRamp+0x382>
            uint32_t arr = (uint32_t)((SystemCoreClock / ((7 + 1) * motion_state->v_actual)) - 1);
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <Motor_HandleRamp+0x3a0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fa48 	bl	80002bc <__aeabi_ui2f>
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fa98 	bl	800036c <__aeabi_fmul>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff fb47 	bl	80004d4 <__aeabi_fdiv>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff f983 	bl	8000158 <__aeabi_fsub>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fc4f 	bl	80006f8 <__aeabi_f2uiz>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60bb      	str	r3, [r7, #8]
            if (arr > 0) TIM3->ARR = arr;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <Motor_HandleRamp+0x382>
 8000e64:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <Motor_HandleRamp+0x3a4>)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
    }
    return motion_state->v_actual;
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc42 	bl	80006f8 <__aeabi_f2uiz>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b2db      	uxtb	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	43480000 	.word	0x43480000
 8000e84:	42c80000 	.word	0x42c80000
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	40000400 	.word	0x40000400

08000e90 <Motor1_OutputPWM>:

//     return motion_state->v_actual;
// }

// Gửi tín hiệu PWM dựa vào Actual_Speed
void Motor1_OutputPWM(MotorRegisterMap_t* motor, uint8_t duty_percent){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
    // Chuyển % thành giá trị phù hợp với Timer (0 - TIM_ARR)
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <Motor1_OutputPWM+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea2:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = 50 * arr / 100;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2232      	movs	r2, #50	@ 0x32
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <Motor1_OutputPWM+0x44>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	60bb      	str	r3, [r7, #8]
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <Motor1_OutputPWM+0x40>)
 8000eba:	f004 fed3 	bl	8005c64 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ccr);
 8000ebe:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <Motor1_OutputPWM+0x40>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	635a      	str	r2, [r3, #52]	@ 0x34
    // }else if(motor->Direction == REVERSE){
    //     HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
    //     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
    //     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ccr);
    // }
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000524 	.word	0x20000524
 8000ed4:	51eb851f 	.word	0x51eb851f

08000ed8 <Motor2_OutputPWM>:

void Motor2_OutputPWM(MotorRegisterMap_t* motor, uint8_t duty_percent){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
    // Chuyển % thành giá trị phù hợp với Timer (0 - TIM_ARR)
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <Motor2_OutputPWM+0x70>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eea:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = duty_percent * arr / 100;
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	4a15      	ldr	r2, [pc, #84]	@ (8000f4c <Motor2_OutputPWM+0x74>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	60bb      	str	r3, [r7, #8]
    
    if(motor->Direction == FORWARD){
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	791b      	ldrb	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10c      	bne.n	8000f20 <Motor2_OutputPWM+0x48>
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f06:	2108      	movs	r1, #8
 8000f08:	480f      	ldr	r0, [pc, #60]	@ (8000f48 <Motor2_OutputPWM+0x70>)
 8000f0a:	f004 ff4d 	bl	8005da8 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <Motor2_OutputPWM+0x70>)
 8000f12:	f004 fea7 	bl	8005c64 <HAL_TIM_PWM_Start>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <Motor2_OutputPWM+0x70>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ccr);
    }

    
}
 8000f1e:	e00f      	b.n	8000f40 <Motor2_OutputPWM+0x68>
    }else if(motor->Direction == REVERSE){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	791b      	ldrb	r3, [r3, #4]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d10b      	bne.n	8000f40 <Motor2_OutputPWM+0x68>
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <Motor2_OutputPWM+0x70>)
 8000f2c:	f004 ff3c 	bl	8005da8 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f30:	2108      	movs	r1, #8
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <Motor2_OutputPWM+0x70>)
 8000f34:	f004 fe96 	bl	8005c64 <HAL_TIM_PWM_Start>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ccr);
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <Motor2_OutputPWM+0x70>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000494 	.word	0x20000494
 8000f4c:	51eb851f 	.word	0x51eb851f

08000f50 <initializeModbusRegisters>:
uint32_t g_totalReceived = 0;
uint32_t g_corruptionCount = 0;
uint8_t g_receivedIndex = 0;


void initializeModbusRegisters(void) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
    // Initialize all registers to default values
    

    g_holdingRegisters[REG_DEVICE_ID] = DEFAULT_DEVICE_ID;  
 8000f56:	4b6c      	ldr	r3, [pc, #432]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    g_holdingRegisters[REG_CONFIG_BAUDRATE] = DEFAULT_CONFIG_BAUDRATE;
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f60:	2205      	movs	r2, #5
 8000f62:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    g_holdingRegisters[REG_CONFIG_PARITY] = DEFAULT_CONFIG_PARITY;
 8000f66:	4b68      	ldr	r3, [pc, #416]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    g_holdingRegisters[REG_CONFIG_STOP_BIT] = DEFAULT_CONFIG_STOP_BIT;
 8000f6e:	4b66      	ldr	r3, [pc, #408]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    g_holdingRegisters[REG_MODULE_TYPE] = DEFAULT_MODULE_TYPE;
 8000f76:	4b64      	ldr	r3, [pc, #400]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
    g_holdingRegisters[REG_FIRMWARE_VERSION] = DEFAULT_FIRMWARE_VERSION;
 8000f7e:	4b62      	ldr	r3, [pc, #392]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
    g_holdingRegisters[REG_HARDWARE_VERSION] = DEFAULT_HARDWARE_VERSION;
 8000f86:	4b60      	ldr	r3, [pc, #384]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
    g_holdingRegisters[REG_SYSTEM_STATUS] = DEFAULT_SYSTEM_STATUS;
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
    g_holdingRegisters[REG_SYSTEM_ERROR] = DEFAULT_SYSTEM_ERROR;
 8000f96:	4b5c      	ldr	r3, [pc, #368]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    g_holdingRegisters[REG_RESET_ERROR_COMMAND] = DEFAULT_RESET_ERROR_COMMAND;
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
    
    // Motor 1 Registers (0x0000-0x000C)
    g_holdingRegisters[REG_M1_CONTROL_MODE] = DEFAULT_CONTROL_MODE;
 8000fa6:	4b58      	ldr	r3, [pc, #352]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	801a      	strh	r2, [r3, #0]
    g_holdingRegisters[REG_M1_ENABLE] = DEFAULT_ENABLE;
 8000fac:	4b56      	ldr	r3, [pc, #344]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	805a      	strh	r2, [r3, #2]
    g_holdingRegisters[REG_M1_COMMAND_SPEED] = DEFAULT_COMMAND_SPEED;
 8000fb2:	4b55      	ldr	r3, [pc, #340]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	809a      	strh	r2, [r3, #4]
    g_holdingRegisters[REG_M1_ACTUAL_SPEED] = DEFAULT_ACTUAL_SPEED;
 8000fb8:	4b53      	ldr	r3, [pc, #332]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	80da      	strh	r2, [r3, #6]
    g_holdingRegisters[REG_M1_DIRECTION] = DEFAULT_DIRECTION;
 8000fbe:	4b52      	ldr	r3, [pc, #328]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	811a      	strh	r2, [r3, #8]
    g_holdingRegisters[REG_M1_VMAX] = DEFAULT_VMAX;
 8000fc4:	4b50      	ldr	r3, [pc, #320]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	81da      	strh	r2, [r3, #14]
    g_holdingRegisters[REG_M1_AMAX] = DEFAULT_AMAX;
 8000fca:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	821a      	strh	r2, [r3, #16]
    g_holdingRegisters[REG_M1_JMAX] = DEFAULT_JMAX;
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	825a      	strh	r2, [r3, #18]
    g_holdingRegisters[REG_M1_STATUS_WORD] = DEFAULT_STATUS_WORD;
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	831a      	strh	r2, [r3, #24]
    g_holdingRegisters[REG_M1_ERROR_CODE] = DEFAULT_ERROR_CODE;
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	835a      	strh	r2, [r3, #26]
    g_holdingRegisters[REG_M1_MAX_SPEED] = DEFAULT_MAX_SPEED;
 8000fe2:	4b49      	ldr	r3, [pc, #292]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fe4:	2264      	movs	r2, #100	@ 0x64
 8000fe6:	815a      	strh	r2, [r3, #10]
    g_holdingRegisters[REG_M1_MIN_SPEED] = DEFAULT_MIN_SPEED;
 8000fe8:	4b47      	ldr	r3, [pc, #284]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	819a      	strh	r2, [r3, #12]
    g_holdingRegisters[REG_M1_MAX_ACCELERATION] = DEFAULT_MAX_ACCELERATION;
 8000fee:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	829a      	strh	r2, [r3, #20]
    g_holdingRegisters[REG_M1_MAX_DECELERATION] = DEFAULT_MAX_DECELERATION;
 8000ff4:	4b44      	ldr	r3, [pc, #272]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	82da      	strh	r2, [r3, #22]
    
    // Motor 2 Registers (0x0010-0x001C)
    g_holdingRegisters[REG_M2_CONTROL_MODE] = DEFAULT_CONTROL_MODE;
 8000ffa:	4b43      	ldr	r3, [pc, #268]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	841a      	strh	r2, [r3, #32]
    g_holdingRegisters[REG_M2_ENABLE] = DEFAULT_ENABLE;
 8001000:	4b41      	ldr	r3, [pc, #260]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001002:	2200      	movs	r2, #0
 8001004:	845a      	strh	r2, [r3, #34]	@ 0x22
    g_holdingRegisters[REG_M2_COMMAND_SPEED] = DEFAULT_COMMAND_SPEED;
 8001006:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001008:	2200      	movs	r2, #0
 800100a:	849a      	strh	r2, [r3, #36]	@ 0x24
    g_holdingRegisters[REG_M2_ACTUAL_SPEED] = DEFAULT_ACTUAL_SPEED;
 800100c:	4b3e      	ldr	r3, [pc, #248]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 800100e:	2200      	movs	r2, #0
 8001010:	84da      	strh	r2, [r3, #38]	@ 0x26
    g_holdingRegisters[REG_M2_DIRECTION] = DEFAULT_DIRECTION;
 8001012:	4b3d      	ldr	r3, [pc, #244]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001014:	2200      	movs	r2, #0
 8001016:	851a      	strh	r2, [r3, #40]	@ 0x28
    g_holdingRegisters[REG_M2_VMAX] = DEFAULT_VMAX;
 8001018:	4b3b      	ldr	r3, [pc, #236]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 800101a:	2202      	movs	r2, #2
 800101c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    g_holdingRegisters[REG_M2_AMAX] = DEFAULT_AMAX;
 800101e:	4b3a      	ldr	r3, [pc, #232]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001020:	2205      	movs	r2, #5
 8001022:	861a      	strh	r2, [r3, #48]	@ 0x30
    g_holdingRegisters[REG_M2_JMAX] = DEFAULT_JMAX;
 8001024:	4b38      	ldr	r3, [pc, #224]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001026:	2202      	movs	r2, #2
 8001028:	865a      	strh	r2, [r3, #50]	@ 0x32
    g_holdingRegisters[REG_M2_STATUS_WORD] = DEFAULT_STATUS_WORD;
 800102a:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 800102c:	2200      	movs	r2, #0
 800102e:	871a      	strh	r2, [r3, #56]	@ 0x38
    g_holdingRegisters[REG_M2_ERROR_CODE] = DEFAULT_ERROR_CODE;
 8001030:	4b35      	ldr	r3, [pc, #212]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001032:	2200      	movs	r2, #0
 8001034:	875a      	strh	r2, [r3, #58]	@ 0x3a
    g_holdingRegisters[REG_M2_MAX_SPEED] = DEFAULT_MAX_SPEED;
 8001036:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001038:	2264      	movs	r2, #100	@ 0x64
 800103a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    g_holdingRegisters[REG_M2_MIN_SPEED] = DEFAULT_MIN_SPEED;
 800103c:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 800103e:	2200      	movs	r2, #0
 8001040:	859a      	strh	r2, [r3, #44]	@ 0x2c
    g_holdingRegisters[REG_M2_MAX_ACCELERATION] = DEFAULT_MAX_ACCELERATION;
 8001042:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001044:	2205      	movs	r2, #5
 8001046:	869a      	strh	r2, [r3, #52]	@ 0x34
    g_holdingRegisters[REG_M2_MAX_DECELERATION] = DEFAULT_MAX_DECELERATION;
 8001048:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 800104a:	2204      	movs	r2, #4
 800104c:	86da      	strh	r2, [r3, #54]	@ 0x36
    
    // Input Registers (0x0020-0x0024)
    g_holdingRegisters[REG_DI_STATUS_WORD] = 0;
 800104e:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001050:	2200      	movs	r2, #0
 8001052:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    g_holdingRegisters[REG_DI1_ASSIGNMENT] = 0;
 8001056:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001058:	2200      	movs	r2, #0
 800105a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    g_holdingRegisters[REG_DI2_ASSIGNMENT] = 0;
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001060:	2200      	movs	r2, #0
 8001062:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    g_holdingRegisters[REG_DI3_ASSIGNMENT] = 0;
 8001066:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001068:	2200      	movs	r2, #0
 800106a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    g_holdingRegisters[REG_DI4_ASSIGNMENT] = 0;
 800106e:	4b26      	ldr	r3, [pc, #152]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001070:	2200      	movs	r2, #0
 8001072:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    g_holdingRegisters[REG_CURRENT] = DEFAULT_CURRENT;
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    // Output Registers (0x0040-0x0044)  
    g_holdingRegisters[REG_DO_STATUS_WORD] = 0;
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001080:	2200      	movs	r2, #0
 8001082:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    g_holdingRegisters[REG_DO1_CONTROL] = 0;
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001088:	2200      	movs	r2, #0
 800108a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    g_holdingRegisters[REG_DO1_ASSIGNMENT] = 0;
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001090:	2200      	movs	r2, #0
 8001092:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    g_holdingRegisters[REG_DO2_CONTROL] = 0;
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 8001098:	2200      	movs	r2, #0
 800109a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    g_holdingRegisters[REG_DO2_ASSIGNMENT] = 0;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <initializeModbusRegisters+0x1b8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

    // Initialize other arrays
    for (int i = 0; i < INPUT_REG_COUNT; i++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e007      	b.n	80010bc <initializeModbusRegisters+0x16c>
        g_inputRegisters[i] = 0;
 80010ac:	4a17      	ldr	r2, [pc, #92]	@ (800110c <initializeModbusRegisters+0x1bc>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2100      	movs	r1, #0
 80010b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < INPUT_REG_COUNT; i++) {
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b04      	cmp	r3, #4
 80010c0:	ddf4      	ble.n	80010ac <initializeModbusRegisters+0x15c>
    }
    
    for (int i = 0; i < COIL_COUNT; i++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	e007      	b.n	80010d8 <initializeModbusRegisters+0x188>
        g_coils[i] = 0;
 80010c8:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <initializeModbusRegisters+0x1c0>)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < COIL_COUNT; i++) {
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2b07      	cmp	r3, #7
 80010dc:	ddf4      	ble.n	80010c8 <initializeModbusRegisters+0x178>
    }
    
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	e007      	b.n	80010f4 <initializeModbusRegisters+0x1a4>
        g_discreteInputs[i] = 0;
 80010e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <initializeModbusRegisters+0x1c4>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3301      	adds	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	ddf4      	ble.n	80010e4 <initializeModbusRegisters+0x194>
    }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000088 	.word	0x20000088
 800110c:	200002e0 	.word	0x200002e0
 8001110:	200002ec 	.word	0x200002ec
 8001114:	200002f4 	.word	0x200002f4

08001118 <calcCRC>:
    if (HAL_UART_Init(&huart2) != HAL_OK) {
        Error_Handler();
    }
}

uint16_t calcCRC(uint8_t *buf, int len) {
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8001122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001126:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	e026      	b.n	800117c <calcCRC+0x64>
        crc ^= (uint16_t)buf[pos];
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	8afb      	ldrh	r3, [r7, #22]
 800113a:	4053      	eors	r3, r2
 800113c:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 800113e:	2308      	movs	r3, #8
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e015      	b.n	8001170 <calcCRC+0x58>
            if ((crc & 0x0001) != 0) {
 8001144:	8afb      	ldrh	r3, [r7, #22]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00a      	beq.n	8001164 <calcCRC+0x4c>
                crc >>= 1;
 800114e:	8afb      	ldrh	r3, [r7, #22]
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8001154:	8afb      	ldrh	r3, [r7, #22]
 8001156:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800115a:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800115e:	43db      	mvns	r3, r3
 8001160:	82fb      	strh	r3, [r7, #22]
 8001162:	e002      	b.n	800116a <calcCRC+0x52>
            } else {
                crc >>= 1;
 8001164:	8afb      	ldrh	r3, [r7, #22]
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1e6      	bne.n	8001144 <calcCRC+0x2c>
    for (int pos = 0; pos < len; pos++) {
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbd4      	blt.n	800112e <calcCRC+0x16>
            }
        }
    }
    return crc;
 8001184:	8afb      	ldrh	r3, [r7, #22]
}
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <HAL_UART_RxCpltCallback+0xc4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d154      	bne.n	800124c <HAL_UART_RxCpltCallback+0xbc>
        g_lastUARTActivity = HAL_GetTick();
 80011a2:	f001 fb07 	bl	80027b4 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 80011aa:	6013      	str	r3, [r2, #0]
        
        if (rxIndex < RX_BUFFER_SIZE - 1) {
 80011ac:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2bff      	cmp	r3, #255	@ 0xff
 80011b2:	d03b      	beq.n	800122c <HAL_UART_RxCpltCallback+0x9c>
            rxBuffer[rxIndex++] = huart->Instance->DR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6859      	ldr	r1, [r3, #4]
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	b2d0      	uxtb	r0, r2
 80011c2:	4a26      	ldr	r2, [pc, #152]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011c4:	7010      	strb	r0, [r2, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	b2c9      	uxtb	r1, r1
 80011ca:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011cc:	5499      	strb	r1, [r3, r2]
            frameReceived = 1;
 80011ce:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <HAL_UART_RxCpltCallback+0xd4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
            
            if (rxIndex >= 6) {
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d92d      	bls.n	8001238 <HAL_UART_RxCpltCallback+0xa8>
                uint8_t expectedLength = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
                if (rxBuffer[1] == 3 || rxBuffer[1] == 6) {
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d003      	beq.n	80011f0 <HAL_UART_RxCpltCallback+0x60>
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d102      	bne.n	80011f6 <HAL_UART_RxCpltCallback+0x66>
                    expectedLength = 8;
 80011f0:	2308      	movs	r3, #8
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e012      	b.n	800121c <HAL_UART_RxCpltCallback+0x8c>
                } else if (rxBuffer[1] == 4) {
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d102      	bne.n	8001204 <HAL_UART_RxCpltCallback+0x74>
                    expectedLength = 8;
 80011fe:	2308      	movs	r3, #8
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e00b      	b.n	800121c <HAL_UART_RxCpltCallback+0x8c>
                } else if (rxBuffer[1] == 16) {
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	2b10      	cmp	r3, #16
 800120a:	d107      	bne.n	800121c <HAL_UART_RxCpltCallback+0x8c>
                    if (rxIndex >= 7) {
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b06      	cmp	r3, #6
 8001212:	d903      	bls.n	800121c <HAL_UART_RxCpltCallback+0x8c>
                        expectedLength = 9 + rxBuffer[6];
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001216:	799b      	ldrb	r3, [r3, #6]
 8001218:	3309      	adds	r3, #9
 800121a:	73fb      	strb	r3, [r7, #15]
                    }
                }
                
                if (rxIndex >= expectedLength) {
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	429a      	cmp	r2, r3
 8001224:	d808      	bhi.n	8001238 <HAL_UART_RxCpltCallback+0xa8>
                    processModbusFrame();
 8001226:	f000 f86d 	bl	8001304 <processModbusFrame>
 800122a:	e005      	b.n	8001238 <HAL_UART_RxCpltCallback+0xa8>
                }
            }
        } else {
            rxIndex = 0;
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
            frameReceived = 0;
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_UART_RxCpltCallback+0xd4>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_UART_RxCpltCallback+0xcc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_UART_RxCpltCallback+0xd0>)
 8001240:	4413      	add	r3, r2
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	4808      	ldr	r0, [pc, #32]	@ (8001268 <HAL_UART_RxCpltCallback+0xd8>)
 8001248:	f005 fd36 	bl	8006cb8 <HAL_UART_Receive_IT>
    }
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40004400 	.word	0x40004400
 8001258:	20000400 	.word	0x20000400
 800125c:	200003fc 	.word	0x200003fc
 8001260:	200002fc 	.word	0x200002fc
 8001264:	200003fd 	.word	0x200003fd
 8001268:	2000056c 	.word	0x2000056c

0800126c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <HAL_UART_ErrorCallback+0x4c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d117      	bne.n	80012ae <HAL_UART_ErrorCallback+0x42>
        HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800127e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001282:	480e      	ldr	r0, [pc, #56]	@ (80012bc <HAL_UART_ErrorCallback+0x50>)
 8001284:	f002 f914 	bl	80034b0 <HAL_GPIO_TogglePin>
        rxIndex = 0;
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_UART_ErrorCallback+0x54>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
        frameReceived = 0;
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_UART_ErrorCallback+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
        HAL_UART_Abort(&huart2);
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <HAL_UART_ErrorCallback+0x5c>)
 8001296:	f005 fd34 	bl	8006d02 <HAL_UART_Abort>
        HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_UART_ErrorCallback+0x54>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_UART_ErrorCallback+0x60>)
 80012a2:	4413      	add	r3, r2
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <HAL_UART_ErrorCallback+0x5c>)
 80012aa:	f005 fd05 	bl	8006cb8 <HAL_UART_Receive_IT>
    }
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40011000 	.word	0x40011000
 80012c0:	200003fc 	.word	0x200003fc
 80012c4:	200003fd 	.word	0x200003fd
 80012c8:	2000056c 	.word	0x2000056c
 80012cc:	200002fc 	.word	0x200002fc

080012d0 <resetUARTCommunication>:

void resetUARTCommunication(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart2);
 80012d4:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <resetUARTCommunication+0x24>)
 80012d6:	f005 fd14 	bl	8006d02 <HAL_UART_Abort>
    rxIndex = 0;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <resetUARTCommunication+0x28>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    frameReceived = 0;
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <resetUARTCommunication+0x2c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, &rxBuffer[0], 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	4905      	ldr	r1, [pc, #20]	@ (8001300 <resetUARTCommunication+0x30>)
 80012ea:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <resetUARTCommunication+0x24>)
 80012ec:	f005 fce4 	bl	8006cb8 <HAL_UART_Receive_IT>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000056c 	.word	0x2000056c
 80012f8:	200003fc 	.word	0x200003fc
 80012fc:	200003fd 	.word	0x200003fd
 8001300:	200002fc 	.word	0x200002fc

08001304 <processModbusFrame>:

void processModbusFrame(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b0ca      	sub	sp, #296	@ 0x128
 8001308:	af00      	add	r7, sp, #0
    if (rxIndex < 6) return;
 800130a:	4ba4      	ldr	r3, [pc, #656]	@ (800159c <processModbusFrame+0x298>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b05      	cmp	r3, #5
 8001310:	f240 82b0 	bls.w	8001874 <processModbusFrame+0x570>
    if (rxBuffer[0] != MODBUS_SLAVE_ADDRESS) return;
 8001314:	4ba2      	ldr	r3, [pc, #648]	@ (80015a0 <processModbusFrame+0x29c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b05      	cmp	r3, #5
 800131a:	f040 82ad 	bne.w	8001878 <processModbusFrame+0x574>

    uint16_t crc = calcCRC(rxBuffer, rxIndex - 2);
 800131e:	4b9f      	ldr	r3, [pc, #636]	@ (800159c <processModbusFrame+0x298>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3b02      	subs	r3, #2
 8001324:	4619      	mov	r1, r3
 8001326:	489e      	ldr	r0, [pc, #632]	@ (80015a0 <processModbusFrame+0x29c>)
 8001328:	f7ff fef6 	bl	8001118 <calcCRC>
 800132c:	4603      	mov	r3, r0
 800132e:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    if (rxBuffer[rxIndex - 2] != (crc & 0xFF) || rxBuffer[rxIndex - 1] != (crc >> 8)) {
 8001332:	4b9a      	ldr	r3, [pc, #616]	@ (800159c <processModbusFrame+0x298>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3b02      	subs	r3, #2
 8001338:	4a99      	ldr	r2, [pc, #612]	@ (80015a0 <processModbusFrame+0x29c>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	461a      	mov	r2, r3
 800133e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001342:	b2db      	uxtb	r3, r3
 8001344:	429a      	cmp	r2, r3
 8001346:	d10b      	bne.n	8001360 <processModbusFrame+0x5c>
 8001348:	4b94      	ldr	r3, [pc, #592]	@ (800159c <processModbusFrame+0x298>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	4a94      	ldr	r2, [pc, #592]	@ (80015a0 <processModbusFrame+0x29c>)
 8001350:	5cd3      	ldrb	r3, [r2, r3]
 8001352:	461a      	mov	r2, r3
 8001354:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	b29b      	uxth	r3, r3
 800135c:	429a      	cmp	r2, r3
 800135e:	d005      	beq.n	800136c <processModbusFrame+0x68>
        HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001360:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001364:	488f      	ldr	r0, [pc, #572]	@ (80015a4 <processModbusFrame+0x2a0>)
 8001366:	f002 f8a3 	bl	80034b0 <HAL_GPIO_TogglePin>
        return;
 800136a:	e286      	b.n	800187a <processModbusFrame+0x576>
    }

    uint8_t funcCode = rxBuffer[1];
 800136c:	4b8c      	ldr	r3, [pc, #560]	@ (80015a0 <processModbusFrame+0x29c>)
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
    uint8_t txBuffer[256];
    uint8_t txIndex = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    txBuffer[0] = MODBUS_SLAVE_ADDRESS;
 800137a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800137e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001382:	2205      	movs	r2, #5
 8001384:	701a      	strb	r2, [r3, #0]
    txBuffer[1] = funcCode;
 8001386:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800138a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800138e:	f897 2115 	ldrb.w	r2, [r7, #277]	@ 0x115
 8001392:	705a      	strb	r2, [r3, #1]

    if (funcCode == 3) {
 8001394:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001398:	2b03      	cmp	r3, #3
 800139a:	d17d      	bne.n	8001498 <processModbusFrame+0x194>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 800139c:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <processModbusFrame+0x29c>)
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <processModbusFrame+0x29c>)
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 80013b4:	4b7a      	ldr	r3, [pc, #488]	@ (80015a0 <processModbusFrame+0x29c>)
 80013b6:	791b      	ldrb	r3, [r3, #4]
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b78      	ldr	r3, [pc, #480]	@ (80015a0 <processModbusFrame+0x29c>)
 80013c0:	795b      	ldrb	r3, [r3, #5]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
        if (addr + qty <= HOLDING_REG_COUNT) {
 80013cc:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 80013d0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 80013d4:	4413      	add	r3, r2
 80013d6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80013da:	dc46      	bgt.n	800146a <processModbusFrame+0x166>
            txBuffer[2] = qty * 2;
 80013dc:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013ee:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            for (int i = 0; i < qty; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013fc:	e02e      	b.n	800145c <processModbusFrame+0x158>
                txBuffer[txIndex++] = g_holdingRegisters[addr + i] >> 8;
 80013fe:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8001402:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001406:	4413      	add	r3, r2
 8001408:	4a67      	ldr	r2, [pc, #412]	@ (80015a8 <processModbusFrame+0x2a4>)
 800140a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b299      	uxth	r1, r3
 8001412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 800141c:	461a      	mov	r2, r3
 800141e:	b2c9      	uxtb	r1, r1
 8001420:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001424:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001428:	5499      	strb	r1, [r3, r2]
                txBuffer[txIndex++] = g_holdingRegisters[addr + i] & 0xFF;
 800142a:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 800142e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001432:	4413      	add	r3, r2
 8001434:	4a5c      	ldr	r2, [pc, #368]	@ (80015a8 <processModbusFrame+0x2a4>)
 8001436:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800143a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001444:	461a      	mov	r2, r3
 8001446:	b2c9      	uxtb	r1, r1
 8001448:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800144c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001450:	5499      	strb	r1, [r3, r2]
            for (int i = 0; i < qty; i++) {
 8001452:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001456:	3301      	adds	r3, #1
 8001458:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800145c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001460:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001464:	429a      	cmp	r2, r3
 8001466:	dbca      	blt.n	80013fe <processModbusFrame+0xfa>
 8001468:	e1bc      	b.n	80017e4 <processModbusFrame+0x4e0>
            }
        } else {
            txBuffer[1] |= 0x80;
 800146a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800146e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001478:	b2da      	uxtb	r2, r3
 800147a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800147e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001482:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 8001484:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001488:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800148c:	2202      	movs	r2, #2
 800148e:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001490:	2303      	movs	r3, #3
 8001492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8001496:	e1a5      	b.n	80017e4 <processModbusFrame+0x4e0>
        }
    } else if (funcCode == 4) {
 8001498:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800149c:	2b04      	cmp	r3, #4
 800149e:	f040 8087 	bne.w	80015b0 <processModbusFrame+0x2ac>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 80014a2:	4b3f      	ldr	r3, [pc, #252]	@ (80015a0 <processModbusFrame+0x29c>)
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <processModbusFrame+0x29c>)
 80014ae:	78db      	ldrb	r3, [r3, #3]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 80014ba:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <processModbusFrame+0x29c>)
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <processModbusFrame+0x29c>)
 80014c6:	795b      	ldrb	r3, [r3, #5]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        if (addr + qty <= INPUT_REG_COUNT) {
 80014d2:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 80014d6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80014da:	4413      	add	r3, r2
 80014dc:	2b05      	cmp	r3, #5
 80014de:	dc46      	bgt.n	800156e <processModbusFrame+0x26a>
            txBuffer[2] = qty * 2;
 80014e0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014f2:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            for (int i = 0; i < qty; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001500:	e02e      	b.n	8001560 <processModbusFrame+0x25c>
                txBuffer[txIndex++] = g_inputRegisters[addr + i] >> 8;
 8001502:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 8001506:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800150a:	4413      	add	r3, r2
 800150c:	4a27      	ldr	r2, [pc, #156]	@ (80015ac <processModbusFrame+0x2a8>)
 800150e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b299      	uxth	r1, r3
 8001516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001520:	461a      	mov	r2, r3
 8001522:	b2c9      	uxtb	r1, r1
 8001524:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001528:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800152c:	5499      	strb	r1, [r3, r2]
                txBuffer[txIndex++] = g_inputRegisters[addr + i] & 0xFF;
 800152e:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 8001532:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001536:	4413      	add	r3, r2
 8001538:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <processModbusFrame+0x2a8>)
 800153a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800153e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001548:	461a      	mov	r2, r3
 800154a:	b2c9      	uxtb	r1, r1
 800154c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001550:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001554:	5499      	strb	r1, [r3, r2]
            for (int i = 0; i < qty; i++) {
 8001556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800155a:	3301      	adds	r3, #1
 800155c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001560:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001564:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001568:	429a      	cmp	r2, r3
 800156a:	dbca      	blt.n	8001502 <processModbusFrame+0x1fe>
 800156c:	e13a      	b.n	80017e4 <processModbusFrame+0x4e0>
            }
        } else {
            txBuffer[1] |= 0x80;
 800156e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001572:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800157c:	b2da      	uxtb	r2, r3
 800157e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001582:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001586:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 8001588:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800158c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001590:	2202      	movs	r2, #2
 8001592:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001594:	2303      	movs	r3, #3
 8001596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800159a:	e123      	b.n	80017e4 <processModbusFrame+0x4e0>
 800159c:	200003fc 	.word	0x200003fc
 80015a0:	200002fc 	.word	0x200002fc
 80015a4:	40011000 	.word	0x40011000
 80015a8:	20000088 	.word	0x20000088
 80015ac:	200002e0 	.word	0x200002e0
        }
    } else if (funcCode == 6) {
 80015b0:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d16e      	bne.n	8001696 <processModbusFrame+0x392>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 80015b8:	4bb2      	ldr	r3, [pc, #712]	@ (8001884 <processModbusFrame+0x580>)
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	b21b      	sxth	r3, r3
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4bb0      	ldr	r3, [pc, #704]	@ (8001884 <processModbusFrame+0x580>)
 80015c4:	78db      	ldrb	r3, [r3, #3]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
        uint16_t value = (rxBuffer[4] << 8) | rxBuffer[5];
 80015d0:	4bac      	ldr	r3, [pc, #688]	@ (8001884 <processModbusFrame+0x580>)
 80015d2:	791b      	ldrb	r3, [r3, #4]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4baa      	ldr	r3, [pc, #680]	@ (8001884 <processModbusFrame+0x580>)
 80015dc:	795b      	ldrb	r3, [r3, #5]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        if (addr < HOLDING_REG_COUNT) {
 80015e8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80015ec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015f0:	d23a      	bcs.n	8001668 <processModbusFrame+0x364>
            g_holdingRegisters[addr] = value;
 80015f2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80015f6:	49a4      	ldr	r1, [pc, #656]	@ (8001888 <processModbusFrame+0x584>)
 80015f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80015fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            
            // Handle special register writes
            if (addr == REG_RESET_ERROR_COMMAND && value == 1) {
 8001600:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8001604:	f240 1209 	movw	r2, #265	@ 0x109
 8001608:	4293      	cmp	r3, r2
 800160a:	d10d      	bne.n	8001628 <processModbusFrame+0x324>
 800160c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8001610:	2b01      	cmp	r3, #1
 8001612:	d109      	bne.n	8001628 <processModbusFrame+0x324>
                g_holdingRegisters[REG_M1_ERROR_CODE] = 0;
 8001614:	4b9c      	ldr	r3, [pc, #624]	@ (8001888 <processModbusFrame+0x584>)
 8001616:	2200      	movs	r2, #0
 8001618:	835a      	strh	r2, [r3, #26]
                g_holdingRegisters[REG_M2_ERROR_CODE] = 0;
 800161a:	4b9b      	ldr	r3, [pc, #620]	@ (8001888 <processModbusFrame+0x584>)
 800161c:	2200      	movs	r2, #0
 800161e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                g_holdingRegisters[REG_SYSTEM_ERROR] = 0;
 8001620:	4b99      	ldr	r3, [pc, #612]	@ (8001888 <processModbusFrame+0x584>)
 8001622:	2200      	movs	r2, #0
 8001624:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
            }
            
            txBuffer[2] = rxBuffer[2];
 8001628:	4b96      	ldr	r3, [pc, #600]	@ (8001884 <processModbusFrame+0x580>)
 800162a:	789a      	ldrb	r2, [r3, #2]
 800162c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001630:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001634:	709a      	strb	r2, [r3, #2]
            txBuffer[3] = rxBuffer[3];
 8001636:	4b93      	ldr	r3, [pc, #588]	@ (8001884 <processModbusFrame+0x580>)
 8001638:	78da      	ldrb	r2, [r3, #3]
 800163a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800163e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001642:	70da      	strb	r2, [r3, #3]
            txBuffer[4] = rxBuffer[4];
 8001644:	4b8f      	ldr	r3, [pc, #572]	@ (8001884 <processModbusFrame+0x580>)
 8001646:	791a      	ldrb	r2, [r3, #4]
 8001648:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800164c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001650:	711a      	strb	r2, [r3, #4]
            txBuffer[5] = rxBuffer[5];
 8001652:	4b8c      	ldr	r3, [pc, #560]	@ (8001884 <processModbusFrame+0x580>)
 8001654:	795a      	ldrb	r2, [r3, #5]
 8001656:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800165a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800165e:	715a      	strb	r2, [r3, #5]
            txIndex = 6;
 8001660:	2306      	movs	r3, #6
 8001662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8001666:	e0bd      	b.n	80017e4 <processModbusFrame+0x4e0>
        } else {
            txBuffer[1] |= 0x80;
 8001668:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800166c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001676:	b2da      	uxtb	r2, r3
 8001678:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800167c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001680:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 8001682:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001686:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800168a:	2202      	movs	r2, #2
 800168c:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 800168e:	2303      	movs	r3, #3
 8001690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8001694:	e0a6      	b.n	80017e4 <processModbusFrame+0x4e0>
        }
    } else if (funcCode == 16) {
 8001696:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800169a:	2b10      	cmp	r3, #16
 800169c:	f040 808c 	bne.w	80017b8 <processModbusFrame+0x4b4>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 80016a0:	4b78      	ldr	r3, [pc, #480]	@ (8001884 <processModbusFrame+0x580>)
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b76      	ldr	r3, [pc, #472]	@ (8001884 <processModbusFrame+0x580>)
 80016ac:	78db      	ldrb	r3, [r3, #3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 80016b8:	4b72      	ldr	r3, [pc, #456]	@ (8001884 <processModbusFrame+0x580>)
 80016ba:	791b      	ldrb	r3, [r3, #4]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	4b70      	ldr	r3, [pc, #448]	@ (8001884 <processModbusFrame+0x580>)
 80016c4:	795b      	ldrb	r3, [r3, #5]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        uint8_t byteCount = rxBuffer[6];
 80016d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001884 <processModbusFrame+0x580>)
 80016d2:	799b      	ldrb	r3, [r3, #6]
 80016d4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        if (addr + qty <= HOLDING_REG_COUNT && byteCount == qty * 2) {
 80016d8:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 80016dc:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80016e0:	4413      	add	r3, r2
 80016e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016e6:	dc50      	bgt.n	800178a <processModbusFrame+0x486>
 80016e8:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80016ec:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d149      	bne.n	800178a <processModbusFrame+0x486>
            for (int i = 0; i < qty; i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80016fc:	e01f      	b.n	800173e <processModbusFrame+0x43a>
                g_holdingRegisters[addr + i] = (rxBuffer[7 + i*2] << 8) | rxBuffer[8 + i*2];
 80016fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	3307      	adds	r3, #7
 8001706:	4a5f      	ldr	r2, [pc, #380]	@ (8001884 <processModbusFrame+0x580>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	b21b      	sxth	r3, r3
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b21a      	sxth	r2, r3
 8001710:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001714:	3304      	adds	r3, #4
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	495a      	ldr	r1, [pc, #360]	@ (8001884 <processModbusFrame+0x580>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b219      	sxth	r1, r3
 8001722:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8001726:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800172a:	4413      	add	r3, r2
 800172c:	b289      	uxth	r1, r1
 800172e:	4a56      	ldr	r2, [pc, #344]	@ (8001888 <processModbusFrame+0x584>)
 8001730:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int i = 0; i < qty; i++) {
 8001734:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001738:	3301      	adds	r3, #1
 800173a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800173e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8001742:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001746:	429a      	cmp	r2, r3
 8001748:	dbd9      	blt.n	80016fe <processModbusFrame+0x3fa>
            }
            txBuffer[2] = rxBuffer[2];
 800174a:	4b4e      	ldr	r3, [pc, #312]	@ (8001884 <processModbusFrame+0x580>)
 800174c:	789a      	ldrb	r2, [r3, #2]
 800174e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001752:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001756:	709a      	strb	r2, [r3, #2]
            txBuffer[3] = rxBuffer[3];
 8001758:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <processModbusFrame+0x580>)
 800175a:	78da      	ldrb	r2, [r3, #3]
 800175c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001760:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001764:	70da      	strb	r2, [r3, #3]
            txBuffer[4] = rxBuffer[4];
 8001766:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <processModbusFrame+0x580>)
 8001768:	791a      	ldrb	r2, [r3, #4]
 800176a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800176e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001772:	711a      	strb	r2, [r3, #4]
            txBuffer[5] = rxBuffer[5];
 8001774:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <processModbusFrame+0x580>)
 8001776:	795a      	ldrb	r2, [r3, #5]
 8001778:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800177c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001780:	715a      	strb	r2, [r3, #5]
            txIndex = 6;
 8001782:	2306      	movs	r3, #6
 8001784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8001788:	e02c      	b.n	80017e4 <processModbusFrame+0x4e0>
        } else {
            txBuffer[1] |= 0x80;
 800178a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800178e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001798:	b2da      	uxtb	r2, r3
 800179a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800179e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017a2:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 80017a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017a8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017ac:	2202      	movs	r2, #2
 80017ae:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80017b6:	e015      	b.n	80017e4 <processModbusFrame+0x4e0>
        }
    } else {
        txBuffer[1] |= 0x80;
 80017b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017d0:	705a      	strb	r2, [r3, #1]
        txBuffer[2] = 0x01;
 80017d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017da:	2201      	movs	r2, #1
 80017dc:	709a      	strb	r2, [r3, #2]
        txIndex = 3;
 80017de:	2303      	movs	r3, #3
 80017e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    }

    crc = calcCRC(txBuffer, txIndex);
 80017e4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80017e8:	463b      	mov	r3, r7
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fc93 	bl	8001118 <calcCRC>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    txBuffer[txIndex++] = crc & 0xFF;
 80017f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001802:	461a      	mov	r2, r3
 8001804:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001808:	b2d9      	uxtb	r1, r3
 800180a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800180e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001812:	5499      	strb	r1, [r3, r2]
    txBuffer[txIndex++] = crc >> 8;
 8001814:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b299      	uxth	r1, r3
 800181c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001826:	461a      	mov	r2, r3
 8001828:	b2c9      	uxtb	r1, r1
 800182a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800182e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001832:	5499      	strb	r1, [r3, r2]
    
    if (HAL_UART_Transmit(&huart2, txBuffer, txIndex, 100) != HAL_OK) {
 8001834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001838:	b29a      	uxth	r2, r3
 800183a:	4639      	mov	r1, r7
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	4813      	ldr	r0, [pc, #76]	@ (800188c <processModbusFrame+0x588>)
 8001840:	f005 f9af 	bl	8006ba2 <HAL_UART_Transmit>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <processModbusFrame+0x558>
        HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800184a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800184e:	4810      	ldr	r0, [pc, #64]	@ (8001890 <processModbusFrame+0x58c>)
 8001850:	f001 fe2e 	bl	80034b0 <HAL_GPIO_TogglePin>
        HAL_UART_Abort(&huart2);
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <processModbusFrame+0x588>)
 8001856:	f005 fa54 	bl	8006d02 <HAL_UART_Abort>
 800185a:	e004      	b.n	8001866 <processModbusFrame+0x562>
    } else {
        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800185c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <processModbusFrame+0x58c>)
 8001862:	f001 fe25 	bl	80034b0 <HAL_GPIO_TogglePin>
    }
    
    rxIndex = 0;
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <processModbusFrame+0x590>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
    frameReceived = 0;
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <processModbusFrame+0x594>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e002      	b.n	800187a <processModbusFrame+0x576>
    if (rxIndex < 6) return;
 8001874:	bf00      	nop
 8001876:	e000      	b.n	800187a <processModbusFrame+0x576>
    if (rxBuffer[0] != MODBUS_SLAVE_ADDRESS) return;
 8001878:	bf00      	nop
}
 800187a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002fc 	.word	0x200002fc
 8001888:	20000088 	.word	0x20000088
 800188c:	2000056c 	.word	0x2000056c
 8001890:	40011000 	.word	0x40011000
 8001894:	200003fc 	.word	0x200003fc
 8001898:	200003fd 	.word	0x200003fd

0800189c <updateBaudrate>:

void updateBaudrate(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
    if(current_baudrate == g_holdingRegisters[REG_CONFIG_BAUDRATE])
 80018a0:	4b38      	ldr	r3, [pc, #224]	@ (8001984 <updateBaudrate+0xe8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b38      	ldr	r3, [pc, #224]	@ (8001988 <updateBaudrate+0xec>)
 80018a8:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d067      	beq.n	8001980 <updateBaudrate+0xe4>
        return;
    else {
        switch(g_holdingRegisters[REG_CONFIG_BAUDRATE]) {
 80018b0:	4b35      	ldr	r3, [pc, #212]	@ (8001988 <updateBaudrate+0xec>)
 80018b2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80018b6:	3b01      	subs	r3, #1
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d853      	bhi.n	8001964 <updateBaudrate+0xc8>
 80018bc:	a201      	add	r2, pc, #4	@ (adr r2, 80018c4 <updateBaudrate+0x28>)
 80018be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c2:	bf00      	nop
 80018c4:	080018d9 	.word	0x080018d9
 80018c8:	080018f5 	.word	0x080018f5
 80018cc:	08001911 	.word	0x08001911
 80018d0:	0800192d 	.word	0x0800192d
 80018d4:	08001949 	.word	0x08001949
            case 1:
                current_baudrate = 1;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <updateBaudrate+0xe8>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 9600;
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <updateBaudrate+0xf0>)
 80018e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018e4:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 80018e6:	4829      	ldr	r0, [pc, #164]	@ (800198c <updateBaudrate+0xf0>)
 80018e8:	f005 f929 	bl	8006b3e <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 80018ec:	4827      	ldr	r0, [pc, #156]	@ (800198c <updateBaudrate+0xf0>)
 80018ee:	f005 f8d6 	bl	8006a9e <HAL_UART_Init>
                break;
 80018f2:	e046      	b.n	8001982 <updateBaudrate+0xe6>
            case 2:
                current_baudrate = 2;
 80018f4:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <updateBaudrate+0xe8>)
 80018f6:	2202      	movs	r2, #2
 80018f8:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 19200;
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <updateBaudrate+0xf0>)
 80018fc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001900:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 8001902:	4822      	ldr	r0, [pc, #136]	@ (800198c <updateBaudrate+0xf0>)
 8001904:	f005 f91b 	bl	8006b3e <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 8001908:	4820      	ldr	r0, [pc, #128]	@ (800198c <updateBaudrate+0xf0>)
 800190a:	f005 f8c8 	bl	8006a9e <HAL_UART_Init>
                break;
 800190e:	e038      	b.n	8001982 <updateBaudrate+0xe6>
            case 3:
                current_baudrate = 3;
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <updateBaudrate+0xe8>)
 8001912:	2203      	movs	r2, #3
 8001914:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 38400;
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <updateBaudrate+0xf0>)
 8001918:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800191c:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 800191e:	481b      	ldr	r0, [pc, #108]	@ (800198c <updateBaudrate+0xf0>)
 8001920:	f005 f90d 	bl	8006b3e <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 8001924:	4819      	ldr	r0, [pc, #100]	@ (800198c <updateBaudrate+0xf0>)
 8001926:	f005 f8ba 	bl	8006a9e <HAL_UART_Init>
                break;
 800192a:	e02a      	b.n	8001982 <updateBaudrate+0xe6>
            case 4:
                current_baudrate = 4;
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <updateBaudrate+0xe8>)
 800192e:	2204      	movs	r2, #4
 8001930:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 57600;
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <updateBaudrate+0xf0>)
 8001934:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001938:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 800193a:	4814      	ldr	r0, [pc, #80]	@ (800198c <updateBaudrate+0xf0>)
 800193c:	f005 f8ff 	bl	8006b3e <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 8001940:	4812      	ldr	r0, [pc, #72]	@ (800198c <updateBaudrate+0xf0>)
 8001942:	f005 f8ac 	bl	8006a9e <HAL_UART_Init>
                break;
 8001946:	e01c      	b.n	8001982 <updateBaudrate+0xe6>
            case 5:
                current_baudrate = 5;
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <updateBaudrate+0xe8>)
 800194a:	2205      	movs	r2, #5
 800194c:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 115200;
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <updateBaudrate+0xf0>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 8001956:	480d      	ldr	r0, [pc, #52]	@ (800198c <updateBaudrate+0xf0>)
 8001958:	f005 f8f1 	bl	8006b3e <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <updateBaudrate+0xf0>)
 800195e:	f005 f89e 	bl	8006a9e <HAL_UART_Init>
                break;
 8001962:	e00e      	b.n	8001982 <updateBaudrate+0xe6>
            default:
                current_baudrate = 5;
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <updateBaudrate+0xe8>)
 8001966:	2205      	movs	r2, #5
 8001968:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 115200;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <updateBaudrate+0xf0>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 8001972:	4806      	ldr	r0, [pc, #24]	@ (800198c <updateBaudrate+0xf0>)
 8001974:	f005 f8e3 	bl	8006b3e <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 8001978:	4804      	ldr	r0, [pc, #16]	@ (800198c <updateBaudrate+0xf0>)
 800197a:	f005 f890 	bl	8006a9e <HAL_UART_Init>
                break;
 800197e:	e000      	b.n	8001982 <updateBaudrate+0xe6>
        return;
 8001980:	bf00      	nop
        }
    }
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	20000088 	.word	0x20000088
 800198c:	2000056c 	.word	0x2000056c

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f000 feb5 	bl	8002704 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f89f 	bl	8001adc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 fb09 	bl	8001fb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019a2:	f000 f935 	bl	8001c10 <MX_I2C1_Init>
  MX_TIM2_Init();
 80019a6:	f000 fa0d 	bl	8001dc4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80019aa:	f000 fad9 	bl	8001f60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80019ae:	f000 f95d 	bl	8001c6c <MX_TIM1_Init>
  MX_TIM3_Init();
 80019b2:	f000 fa53 	bl	8001e5c <MX_TIM3_Init>
  MX_ADC1_Init();
 80019b6:	f000 f8ed 	bl	8001b94 <MX_ADC1_Init>
  // Start PWM timers for motor control
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Motor 1 PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  // Initialize global variables
  g_totalReceived = 0;
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <main+0xfc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
  g_corruptionCount = 0;
 80019c0:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <main+0x100>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
  g_receivedIndex = 0;
 80019c6:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <main+0x104>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
  
  // Initialize Modbus registers
  // for (int i = 0; i < HOLDING_REG_COUNT; i++) {
  //   g_holdingRegisters[i] = 0;
  // }
  initializeModbusRegisters();
 80019cc:	f7ff fac0 	bl	8000f50 <initializeModbusRegisters>
  // Set some default values for important registers
      // Initialize other arrays
      for (int i = 0; i < INPUT_REG_COUNT; i++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e007      	b.n	80019e6 <main+0x56>
        g_inputRegisters[i] = 0;
 80019d6:	4a30      	ldr	r2, [pc, #192]	@ (8001a98 <main+0x108>)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2100      	movs	r1, #0
 80019dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (int i = 0; i < INPUT_REG_COUNT; i++) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	ddf4      	ble.n	80019d6 <main+0x46>
    }
    
    for (int i = 0; i < COIL_COUNT; i++) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	e007      	b.n	8001a02 <main+0x72>
        g_coils[i] = 0;
 80019f2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a9c <main+0x10c>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < COIL_COUNT; i++) {
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	ddf4      	ble.n	80019f2 <main+0x62>
    }
    
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	e007      	b.n	8001a1e <main+0x8e>
        g_discreteInputs[i] = 0;
 8001a0e:	4a24      	ldr	r2, [pc, #144]	@ (8001aa0 <main+0x110>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	ddf4      	ble.n	8001a0e <main+0x7e>
    }

  // Initialize UART buffer
  memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8001a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a28:	2100      	movs	r1, #0
 8001a2a:	481e      	ldr	r0, [pc, #120]	@ (8001aa4 <main+0x114>)
 8001a2c:	f008 fcfc 	bl	800a428 <memset>
  rxIndex = 0;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <main+0x118>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
  frameReceived = 0;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <main+0x11c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  g_lastUARTActivity = HAL_GetTick();
 8001a3c:	f000 feba 	bl	80027b4 <HAL_GetTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <main+0x120>)
 8001a44:	6013      	str	r3, [r2, #0]
  
  // Start UART reception
  HAL_UART_Receive_IT(&huart2, &rxBuffer[0], 1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	4916      	ldr	r1, [pc, #88]	@ (8001aa4 <main+0x114>)
 8001a4a:	481a      	ldr	r0, [pc, #104]	@ (8001ab4 <main+0x124>)
 8001a4c:	f005 f934 	bl	8006cb8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a50:	f005 ffd8 	bl	8007a04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8001a54:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <main+0x128>)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4818      	ldr	r0, [pc, #96]	@ (8001abc <main+0x12c>)
 8001a5a:	f006 f81b 	bl	8007a94 <osThreadNew>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <main+0x130>)
 8001a62:	6013      	str	r3, [r2, #0]

  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartUartTask, NULL, &UartTask_attributes);
 8001a64:	4a17      	ldr	r2, [pc, #92]	@ (8001ac4 <main+0x134>)
 8001a66:	2100      	movs	r1, #0
 8001a68:	4817      	ldr	r0, [pc, #92]	@ (8001ac8 <main+0x138>)
 8001a6a:	f006 f813 	bl	8007a94 <osThreadNew>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a16      	ldr	r2, [pc, #88]	@ (8001acc <main+0x13c>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8001a74:	4a16      	ldr	r2, [pc, #88]	@ (8001ad0 <main+0x140>)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <main+0x144>)
 8001a7a:	f006 f80b 	bl	8007a94 <osThreadNew>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a15      	ldr	r2, [pc, #84]	@ (8001ad8 <main+0x148>)
 8001a82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a84:	f005 ffe0 	bl	8007a48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <main+0xf8>
 8001a8c:	20000404 	.word	0x20000404
 8001a90:	20000408 	.word	0x20000408
 8001a94:	2000040c 	.word	0x2000040c
 8001a98:	200002e0 	.word	0x200002e0
 8001a9c:	200002ec 	.word	0x200002ec
 8001aa0:	200002f4 	.word	0x200002f4
 8001aa4:	200002fc 	.word	0x200002fc
 8001aa8:	200003fc 	.word	0x200003fc
 8001aac:	200003fd 	.word	0x200003fd
 8001ab0:	20000400 	.word	0x20000400
 8001ab4:	2000056c 	.word	0x2000056c
 8001ab8:	0800a4ec 	.word	0x0800a4ec
 8001abc:	080020f1 	.word	0x080020f1
 8001ac0:	200005b4 	.word	0x200005b4
 8001ac4:	0800a510 	.word	0x0800a510
 8001ac8:	080020fd 	.word	0x080020fd
 8001acc:	200005b8 	.word	0x200005b8
 8001ad0:	0800a534 	.word	0x0800a534
 8001ad4:	08002151 	.word	0x08002151
 8001ad8:	200005bc 	.word	0x200005bc

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	@ 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae6:	2228      	movs	r2, #40	@ 0x28
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f008 fc9c 	bl	800a428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b28:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fb28 	bl	8005188 <HAL_RCC_OscConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b3e:	f000 fb35 	bl	80021ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	230f      	movs	r3, #15
 8001b44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001b54:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fd93 	bl	800568c <HAL_RCC_ClockConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b6c:	f000 fb1e 	bl	80021ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b70:	2302      	movs	r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 ff14 	bl	80059a8 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b86:	f000 fb11 	bl	80021ac <Error_Handler>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3750      	adds	r7, #80	@ 0x50
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001ba6:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <MX_ADC1_Init+0x78>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001baa:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bbe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001bc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001bca:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bd0:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bd2:	f000 fdf9 	bl	80027c8 <HAL_ADC_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001bdc:	f000 fae6 	bl	80021ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_ADC1_Init+0x74>)
 8001bf2:	f000 fec1 	bl	8002978 <HAL_ADC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001bfc:	f000 fad6 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000410 	.word	0x20000410
 8001c0c:	40012400 	.word	0x40012400

08001c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c14:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c16:	4a13      	ldr	r2, [pc, #76]	@ (8001c64 <MX_I2C1_Init+0x54>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c1c:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <MX_I2C1_Init+0x58>)
 8001c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <MX_I2C1_Init+0x50>)
 8001c4e:	f001 fc49 	bl	80034e4 <HAL_I2C_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c58:	f000 faa8 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000440 	.word	0x20000440
 8001c64:	40005400 	.word	0x40005400
 8001c68:	000186a0 	.word	0x000186a0

08001c6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b096      	sub	sp, #88	@ 0x58
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f008 fbbf 	bl	800a428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001caa:	4b44      	ldr	r3, [pc, #272]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cac:	4a44      	ldr	r2, [pc, #272]	@ (8001dc0 <MX_TIM1_Init+0x154>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cb0:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cca:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cd6:	4839      	ldr	r0, [pc, #228]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cd8:	f003 ff1c 	bl	8005b14 <HAL_TIM_Base_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ce2:	f000 fa63 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4832      	ldr	r0, [pc, #200]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001cf4:	f004 fa6e 	bl	80061d4 <HAL_TIM_ConfigClockSource>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cfe:	f000 fa55 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d02:	482e      	ldr	r0, [pc, #184]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001d04:	f003 ff55 	bl	8005bb2 <HAL_TIM_PWM_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d0e:	f000 fa4d 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4826      	ldr	r0, [pc, #152]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001d22:	f004 fdfb 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d2c:	f000 fa3e 	bl	80021ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d30:	2360      	movs	r3, #96	@ 0x60
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	2200      	movs	r2, #0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4819      	ldr	r0, [pc, #100]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001d56:	f004 f97b 	bl	8006050 <HAL_TIM_PWM_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d60:	f000 fa24 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d68:	2208      	movs	r2, #8
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001d6e:	f004 f96f 	bl	8006050 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001d78:	f000 fa18 	bl	80021ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001da0:	f004 fe1a 	bl	80069d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001daa:	f000 f9ff 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dae:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <MX_TIM1_Init+0x150>)
 8001db0:	f000 fb38 	bl	8002424 <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3758      	adds	r7, #88	@ 0x58
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000494 	.word	0x20000494
 8001dc0:	40012c00 	.word	0x40012c00

08001dc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001de2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001df6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e08:	4813      	ldr	r0, [pc, #76]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001e0a:	f003 fe83 	bl	8005b14 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e14:	f000 f9ca 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4619      	mov	r1, r3
 8001e24:	480c      	ldr	r0, [pc, #48]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001e26:	f004 f9d5 	bl	80061d4 <HAL_TIM_ConfigClockSource>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e30:	f000 f9bc 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	@ (8001e58 <MX_TIM2_Init+0x94>)
 8001e42:	f004 fd6b 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e4c:	f000 f9ae 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200004dc 	.word	0x200004dc

08001e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	@ 0x38
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001e8e:	4a33      	ldr	r2, [pc, #204]	@ (8001f5c <MX_TIM3_Init+0x100>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eb2:	4829      	ldr	r0, [pc, #164]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001eb4:	f003 fe2e 	bl	8005b14 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ebe:	f000 f975 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4822      	ldr	r0, [pc, #136]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001ed0:	f004 f980 	bl	80061d4 <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eda:	f000 f967 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ede:	481e      	ldr	r0, [pc, #120]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001ee0:	f003 fe67 	bl	8005bb2 <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001eea:	f000 f95f 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	4619      	mov	r1, r3
 8001efc:	4816      	ldr	r0, [pc, #88]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001efe:	f004 fd0d 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f08:	f000 f950 	bl	80021ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	@ 0x60
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001f24:	f004 f894 	bl	8006050 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f2e:	f000 f93d 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2204      	movs	r2, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001f3a:	f004 f889 	bl	8006050 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001f44:	f000 f932 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f48:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <MX_TIM3_Init+0xfc>)
 8001f4a:	f000 fa6b 	bl	8002424 <HAL_TIM_MspPostInit>

}
 8001f4e:	bf00      	nop
 8001f50:	3738      	adds	r7, #56	@ 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000524 	.word	0x20000524
 8001f5c:	40000400 	.word	0x40000400

08001f60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_USART2_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART2_UART_Init+0x4c>)
 8001f98:	f004 fd81 	bl	8006a9e <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f000 f903 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000056c 	.word	0x2000056c
 8001fb0:	40004400 	.word	0x40004400

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 0310 	add.w	r3, r7, #16
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc8:	4b45      	ldr	r3, [pc, #276]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a44      	ldr	r2, [pc, #272]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001fce:	f043 0310 	orr.w	r3, r3, #16
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b42      	ldr	r3, [pc, #264]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001fe6:	f043 0320 	orr.w	r3, r3, #32
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b3c      	ldr	r3, [pc, #240]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a38      	ldr	r2, [pc, #224]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b33      	ldr	r3, [pc, #204]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a32      	ldr	r2, [pc, #200]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <MX_GPIO_Init+0x12c>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800202e:	482d      	ldr	r0, [pc, #180]	@ (80020e4 <MX_GPIO_Init+0x130>)
 8002030:	f001 fa26 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|DIR_1_Pin|EN_1_Pin, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f240 2112 	movw	r1, #530	@ 0x212
 800203a:	482b      	ldr	r0, [pc, #172]	@ (80020e8 <MX_GPIO_Init+0x134>)
 800203c:	f001 fa20 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_2_Pin|EN_2_Pin|OUT2_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f241 011a 	movw	r1, #4122	@ 0x101a
 8002046:	4829      	ldr	r0, [pc, #164]	@ (80020ec <MX_GPIO_Init+0x138>)
 8002048:	f001 fa1a 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin;
 800204c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2302      	movs	r3, #2
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4619      	mov	r1, r3
 8002064:	481f      	ldr	r0, [pc, #124]	@ (80020e4 <MX_GPIO_Init+0x130>)
 8002066:	f000 ffcb 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DIR_1_Pin EN_1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DIR_1_Pin|EN_1_Pin;
 800206a:	f240 2312 	movw	r3, #530	@ 0x212
 800206e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2302      	movs	r3, #2
 800207a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4619      	mov	r1, r3
 8002082:	4819      	ldr	r0, [pc, #100]	@ (80020e8 <MX_GPIO_Init+0x134>)
 8002084:	f000 ffbc 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 8002088:	2320      	movs	r3, #32
 800208a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	4619      	mov	r1, r3
 800209a:	4813      	ldr	r0, [pc, #76]	@ (80020e8 <MX_GPIO_Init+0x134>)
 800209c:	f000 ffb0 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin EN_2_Pin OUT2_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|EN_2_Pin|OUT2_Pin|OUT1_Pin;
 80020a0:	f241 031a 	movw	r3, #4122	@ 0x101a
 80020a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2302      	movs	r3, #2
 80020b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	4619      	mov	r1, r3
 80020b8:	480c      	ldr	r0, [pc, #48]	@ (80020ec <MX_GPIO_Init+0x138>)
 80020ba:	f000 ffa1 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN2_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN2_Pin|IN3_Pin;
 80020be:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 80020c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4806      	ldr	r0, [pc, #24]	@ (80020ec <MX_GPIO_Init+0x138>)
 80020d4:	f000 ff94 	bl	8003000 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	40010c00 	.word	0x40010c00

080020f0 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <StartIOTask+0x8>

080020fc <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
  /* Infinite loop */
  for(;;)
  {
    // Update Modbus counter
    g_modbusCounter++;
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <StartUartTask+0x48>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a0e      	ldr	r2, [pc, #56]	@ (8002144 <StartUartTask+0x48>)
 800210c:	6013      	str	r3, [r2, #0]
    
    // Check for UART timeout (10 seconds)
    if (HAL_GetTick() - g_lastUARTActivity > 10000) {
 800210e:	f000 fb51 	bl	80027b4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <StartUartTask+0x4c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800211e:	4293      	cmp	r3, r2
 8002120:	d906      	bls.n	8002130 <StartUartTask+0x34>
      resetUARTCommunication();
 8002122:	f7ff f8d5 	bl	80012d0 <resetUARTCommunication>
      g_lastUARTActivity = HAL_GetTick();
 8002126:	f000 fb45 	bl	80027b4 <HAL_GetTick>
 800212a:	4603      	mov	r3, r0
 800212c:	4a06      	ldr	r2, [pc, #24]	@ (8002148 <StartUartTask+0x4c>)
 800212e:	6013      	str	r3, [r2, #0]
    }
    
    // Process Modbus frame if received
    if (frameReceived) {
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <StartUartTask+0x50>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <StartUartTask+0x40>
      processModbusFrame();
 8002138:	f7ff f8e4 	bl	8001304 <processModbusFrame>
    }
    
    osDelay(100); // 100ms delay
 800213c:	2064      	movs	r0, #100	@ 0x64
 800213e:	f005 fd3b 	bl	8007bb8 <osDelay>
    g_modbusCounter++;
 8002142:	e7df      	b.n	8002104 <StartUartTask+0x8>
 8002144:	200002f8 	.word	0x200002f8
 8002148:	20000400 	.word	0x20000400
 800214c:	200003fd 	.word	0x200003fd

08002150 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  const uint16_t M1_BASE_ADDR = 0x0000;
 8002158:	2300      	movs	r3, #0
 800215a:	81fb      	strh	r3, [r7, #14]
  const uint16_t M2_BASE_ADDR = 0x0010;
 800215c:	2310      	movs	r3, #16
 800215e:	81bb      	strh	r3, [r7, #12]

  // Vòng lặp RTOS
  for (;;)
  {
      // 1. Load dữ liệu từ Modbus registers
      MotorRegisters_Load(&motor1, M1_BASE_ADDR);
 8002160:	89fb      	ldrh	r3, [r7, #14]
 8002162:	4619      	mov	r1, r3
 8002164:	480f      	ldr	r0, [pc, #60]	@ (80021a4 <StartMotorTask+0x54>)
 8002166:	f7fe fae7 	bl	8000738 <MotorRegisters_Load>
      MotorRegisters_Load(&motor2, M2_BASE_ADDR);
 800216a:	89bb      	ldrh	r3, [r7, #12]
 800216c:	4619      	mov	r1, r3
 800216e:	480e      	ldr	r0, [pc, #56]	@ (80021a8 <StartMotorTask+0x58>)
 8002170:	f7fe fae2 	bl	8000738 <MotorRegisters_Load>
      updateBaudrate();
 8002174:	f7ff fb92 	bl	800189c <updateBaudrate>
      // 2. Xử lý logic điều khiển motor 1
      Motor_ProcessControl(&motor1);
 8002178:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <StartMotorTask+0x54>)
 800217a:	f7fe fbd5 	bl	8000928 <Motor_ProcessControl>

      // 3. Xử lý logic điều khiển motor 2
      Motor_ProcessControl(&motor2);
 800217e:	480a      	ldr	r0, [pc, #40]	@ (80021a8 <StartMotorTask+0x58>)
 8002180:	f7fe fbd2 	bl	8000928 <Motor_ProcessControl>

      // 4. Save lại dữ liệu ngược ra Modbus registers
      MotorRegisters_Save(&motor1, M1_BASE_ADDR);
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	4619      	mov	r1, r3
 8002188:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <StartMotorTask+0x54>)
 800218a:	f7fe fb51 	bl	8000830 <MotorRegisters_Save>
      MotorRegisters_Save(&motor2, M2_BASE_ADDR);
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	4619      	mov	r1, r3
 8002192:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <StartMotorTask+0x58>)
 8002194:	f7fe fb4c 	bl	8000830 <MotorRegisters_Save>

      // 5. Delay theo chu kỳ task (ví dụ 10ms)
      osDelay(10);
 8002198:	200a      	movs	r0, #10
 800219a:	f005 fd0d 	bl	8007bb8 <osDelay>
      MotorRegisters_Load(&motor1, M1_BASE_ADDR);
 800219e:	bf00      	nop
 80021a0:	e7de      	b.n	8002160 <StartMotorTask+0x10>
 80021a2:	bf00      	nop
 80021a4:	20000030 	.word	0x20000030
 80021a8:	20000040 	.word	0x20000040

080021ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b0:	b672      	cpsid	i
}
 80021b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <Error_Handler+0x8>

080021b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <HAL_MspInit+0x78>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002230 <HAL_MspInit+0x78>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_MspInit+0x78>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <HAL_MspInit+0x78>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a15      	ldr	r2, [pc, #84]	@ (8002230 <HAL_MspInit+0x78>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <HAL_MspInit+0x78>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	210f      	movs	r1, #15
 80021f2:	f06f 0001 	mvn.w	r0, #1
 80021f6:	f000 fdf4 	bl	8002de2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2105      	movs	r1, #5
 80021fe:	2005      	movs	r0, #5
 8002200:	f000 fdef 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002204:	2005      	movs	r0, #5
 8002206:	f000 fe08 	bl	8002e1a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_MspInit+0x7c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <HAL_MspInit+0x7c>)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40010000 	.word	0x40010000

08002238 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a14      	ldr	r2, [pc, #80]	@ (80022a4 <HAL_ADC_MspInit+0x6c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d121      	bne.n	800229c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <HAL_ADC_MspInit+0x70>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a12      	ldr	r2, [pc, #72]	@ (80022a8 <HAL_ADC_MspInit+0x70>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_ADC_MspInit+0x70>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <HAL_ADC_MspInit+0x70>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a0c      	ldr	r2, [pc, #48]	@ (80022a8 <HAL_ADC_MspInit+0x70>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <HAL_ADC_MspInit+0x70>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002288:	2301      	movs	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228c:	2303      	movs	r3, #3
 800228e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	4619      	mov	r1, r3
 8002296:	4805      	ldr	r0, [pc, #20]	@ (80022ac <HAL_ADC_MspInit+0x74>)
 8002298:	f000 feb2 	bl	8003000 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40012400 	.word	0x40012400
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010800 	.word	0x40010800

080022b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_I2C_MspInit+0x90>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d133      	bne.n	8002338 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_I2C_MspInit+0x94>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_I2C_MspInit+0x94>)
 80022d6:	f043 0308 	orr.w	r3, r3, #8
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_I2C_MspInit+0x94>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e8:	23c0      	movs	r3, #192	@ 0xc0
 80022ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ec:	2312      	movs	r3, #18
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	4619      	mov	r1, r3
 80022fa:	4813      	ldr	r0, [pc, #76]	@ (8002348 <HAL_I2C_MspInit+0x98>)
 80022fc:	f000 fe80 	bl	8003000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002300:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_I2C_MspInit+0x94>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a0f      	ldr	r2, [pc, #60]	@ (8002344 <HAL_I2C_MspInit+0x94>)
 8002306:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800230a:	61d3      	str	r3, [r2, #28]
 800230c:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <HAL_I2C_MspInit+0x94>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2105      	movs	r1, #5
 800231c:	201f      	movs	r0, #31
 800231e:	f000 fd60 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002322:	201f      	movs	r0, #31
 8002324:	f000 fd79 	bl	8002e1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2105      	movs	r1, #5
 800232c:	2020      	movs	r0, #32
 800232e:	f000 fd58 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002332:	2020      	movs	r0, #32
 8002334:	f000 fd71 	bl	8002e1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40005400 	.word	0x40005400
 8002344:	40021000 	.word	0x40021000
 8002348:	40010c00 	.word	0x40010c00

0800234c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <HAL_TIM_Base_MspInit+0xcc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d124      	bne.n	80023a8 <HAL_TIM_Base_MspInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235e:	4b2f      	ldr	r3, [pc, #188]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4a2e      	ldr	r2, [pc, #184]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 8002364:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002368:	6193      	str	r3, [r2, #24]
 800236a:	4b2c      	ldr	r3, [pc, #176]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2105      	movs	r1, #5
 800237a:	2018      	movs	r0, #24
 800237c:	f000 fd31 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002380:	2018      	movs	r0, #24
 8002382:	f000 fd4a 	bl	8002e1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2105      	movs	r1, #5
 800238a:	2019      	movs	r0, #25
 800238c:	f000 fd29 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002390:	2019      	movs	r0, #25
 8002392:	f000 fd42 	bl	8002e1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2105      	movs	r1, #5
 800239a:	201b      	movs	r0, #27
 800239c:	f000 fd21 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023a0:	201b      	movs	r0, #27
 80023a2:	f000 fd3a 	bl	8002e1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023a6:	e032      	b.n	800240e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b0:	d114      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b2:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a19      	ldr	r2, [pc, #100]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	61d3      	str	r3, [r2, #28]
 80023be:	4b17      	ldr	r3, [pc, #92]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2105      	movs	r1, #5
 80023ce:	201c      	movs	r0, #28
 80023d0:	f000 fd07 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023d4:	201c      	movs	r0, #28
 80023d6:	f000 fd20 	bl	8002e1a <HAL_NVIC_EnableIRQ>
}
 80023da:	e018      	b.n	800240e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002420 <HAL_TIM_Base_MspInit+0xd4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d113      	bne.n	800240e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a0c      	ldr	r2, [pc, #48]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_TIM_Base_MspInit+0xd0>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2105      	movs	r1, #5
 8002402:	201d      	movs	r0, #29
 8002404:	f000 fced 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002408:	201d      	movs	r0, #29
 800240a:	f000 fd06 	bl	8002e1a <HAL_NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40021000 	.word	0x40021000
 8002420:	40000400 	.word	0x40000400

08002424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <HAL_TIM_MspPostInit+0x98>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d119      	bne.n	8002478 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <HAL_TIM_MspPostInit+0x9c>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <HAL_TIM_MspPostInit+0x9c>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <HAL_TIM_MspPostInit+0x9c>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800245c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2302      	movs	r3, #2
 8002468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	4619      	mov	r1, r3
 8002470:	4814      	ldr	r0, [pc, #80]	@ (80024c4 <HAL_TIM_MspPostInit+0xa0>)
 8002472:	f000 fdc5 	bl	8003000 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002476:	e01c      	b.n	80024b2 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a12      	ldr	r2, [pc, #72]	@ (80024c8 <HAL_TIM_MspPostInit+0xa4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d117      	bne.n	80024b2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_TIM_MspPostInit+0x9c>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a0e      	ldr	r2, [pc, #56]	@ (80024c0 <HAL_TIM_MspPostInit+0x9c>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6193      	str	r3, [r2, #24]
 800248e:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <HAL_TIM_MspPostInit+0x9c>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249a:	23c0      	movs	r3, #192	@ 0xc0
 800249c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	@ (80024c4 <HAL_TIM_MspPostInit+0xa0>)
 80024ae:	f000 fda7 	bl	8003000 <HAL_GPIO_Init>
}
 80024b2:	bf00      	nop
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40010800 	.word	0x40010800
 80024c8:	40000400 	.word	0x40000400

080024cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <HAL_UART_MspInit+0x98>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d137      	bne.n	800255c <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <HAL_UART_MspInit+0x9c>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <HAL_UART_MspInit+0x9c>)
 80024f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f6:	61d3      	str	r3, [r2, #28]
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_UART_MspInit+0x9c>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_UART_MspInit+0x9c>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <HAL_UART_MspInit+0x9c>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_UART_MspInit+0x9c>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251c:	2304      	movs	r3, #4
 800251e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4619      	mov	r1, r3
 800252e:	480f      	ldr	r0, [pc, #60]	@ (800256c <HAL_UART_MspInit+0xa0>)
 8002530:	f000 fd66 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002534:	2308      	movs	r3, #8
 8002536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	4809      	ldr	r0, [pc, #36]	@ (800256c <HAL_UART_MspInit+0xa0>)
 8002548:	f000 fd5a 	bl	8003000 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	2105      	movs	r1, #5
 8002550:	2026      	movs	r0, #38	@ 0x26
 8002552:	f000 fc46 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002556:	2026      	movs	r0, #38	@ 0x26
 8002558:	f000 fc5f 	bl	8002e1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40004400 	.word	0x40004400
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800

08002570 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <HAL_UART_MspDeInit+0x34>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10c      	bne.n	800259c <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_UART_MspDeInit+0x38>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a08      	ldr	r2, [pc, #32]	@ (80025a8 <HAL_UART_MspDeInit+0x38>)
 8002588:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800258c:	61d3      	str	r3, [r2, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800258e:	210c      	movs	r1, #12
 8002590:	4806      	ldr	r0, [pc, #24]	@ (80025ac <HAL_UART_MspDeInit+0x3c>)
 8002592:	f000 feb9 	bl	8003308 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002596:	2026      	movs	r0, #38	@ 0x26
 8002598:	f000 fc4d 	bl	8002e36 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010800 	.word	0x40010800

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <NMI_Handler+0x4>

080025b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <MemManage_Handler+0x4>

080025c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f000 f8d2 	bl	8002790 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80025ec:	f006 ff02 	bl	80093f4 <xTaskGetSchedulerState>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80025f6:	f007 fca7 	bl	8009f48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}

080025fe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
	...

0800260c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <TIM1_BRK_IRQHandler+0x10>)
 8002612:	f003 fc2d 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000494 	.word	0x20000494

08002620 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <TIM1_UP_IRQHandler+0x10>)
 8002626:	f003 fc23 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000494 	.word	0x20000494

08002634 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <TIM1_CC_IRQHandler+0x10>)
 800263a:	f003 fc19 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000494 	.word	0x20000494

08002648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <TIM2_IRQHandler+0x10>)
 800264e:	f003 fc0f 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200004dc 	.word	0x200004dc

0800265c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <TIM3_IRQHandler+0x10>)
 8002662:	f003 fc05 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000524 	.word	0x20000524

08002670 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <I2C1_EV_IRQHandler+0x10>)
 8002676:	f001 f88d 	bl	8003794 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000440 	.word	0x20000440

08002684 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <I2C1_ER_IRQHandler+0x10>)
 800268a:	f001 f9f4 	bl	8003a76 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000440 	.word	0x20000440

08002698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <USART2_IRQHandler+0x10>)
 800269e:	f004 fc1b 	bl	8006ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000056c 	.word	0x2000056c

080026ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026b8:	f7ff fff8 	bl	80026ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026bc:	480b      	ldr	r0, [pc, #44]	@ (80026ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026be:	490c      	ldr	r1, [pc, #48]	@ (80026f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026c0:	4a0c      	ldr	r2, [pc, #48]	@ (80026f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026d4:	4c09      	ldr	r4, [pc, #36]	@ (80026fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026e2:	f007 fea9 	bl	800a438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026e6:	f7ff f953 	bl	8001990 <main>
  bx lr
 80026ea:	4770      	bx	lr
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80026f4:	0800a58c 	.word	0x0800a58c
  ldr r2, =_sbss
 80026f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80026fc:	20001f14 	.word	0x20001f14

08002700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC1_2_IRQHandler>
	...

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_Init+0x28>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_Init+0x28>)
 800270e:	f043 0310 	orr.w	r3, r3, #16
 8002712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002714:	2003      	movs	r0, #3
 8002716:	f000 fb59 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271a:	200f      	movs	r0, #15
 800271c:	f000 f808 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002720:	f7ff fd4a 	bl	80021b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002738:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_InitTick+0x54>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_InitTick+0x58>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fb7f 	bl	8002e52 <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00e      	b.n	800277c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0f      	cmp	r3, #15
 8002762:	d80a      	bhi.n	800277a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002764:	2200      	movs	r2, #0
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f000 fb39 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002770:	4a06      	ldr	r2, [pc, #24]	@ (800278c <HAL_InitTick+0x5c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000004 	.word	0x20000004
 8002788:	2000000c 	.word	0x2000000c
 800278c:	20000008 	.word	0x20000008

08002790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_IncTick+0x1c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_IncTick+0x20>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a03      	ldr	r2, [pc, #12]	@ (80027b0 <HAL_IncTick+0x20>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	2000000c 	.word	0x2000000c
 80027b0:	200005c0 	.word	0x200005c0

080027b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b02      	ldr	r3, [pc, #8]	@ (80027c4 <HAL_GetTick+0x10>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	200005c0 	.word	0x200005c0

080027c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0be      	b.n	8002968 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fd16 	bl	8002238 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f9ab 	bl	8002b68 <ADC_ConversionStop_Disable>
 8002812:	4603      	mov	r3, r0
 8002814:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 8099 	bne.w	8002956 <HAL_ADC_Init+0x18e>
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8095 	bne.w	8002956 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002834:	f023 0302 	bic.w	r3, r3, #2
 8002838:	f043 0202 	orr.w	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002848:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7b1b      	ldrb	r3, [r3, #12]
 800284e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002850:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4313      	orrs	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002860:	d003      	beq.n	800286a <HAL_ADC_Init+0xa2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d102      	bne.n	8002870 <HAL_ADC_Init+0xa8>
 800286a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800286e:	e000      	b.n	8002872 <HAL_ADC_Init+0xaa>
 8002870:	2300      	movs	r3, #0
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7d1b      	ldrb	r3, [r3, #20]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d119      	bne.n	80028b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7b1b      	ldrb	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	3b01      	subs	r3, #1
 800288e:	035a      	lsls	r2, r3, #13
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	e00b      	b.n	80028b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_ADC_Init+0x1a8>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	430b      	orrs	r3, r1
 80028da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e4:	d003      	beq.n	80028ee <HAL_ADC_Init+0x126>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d104      	bne.n	80028f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	051b      	lsls	r3, r3, #20
 80028f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	430a      	orrs	r2, r1
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <HAL_ADC_Init+0x1ac>)
 8002914:	4013      	ands	r3, r2
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	429a      	cmp	r2, r3
 800291a:	d10b      	bne.n	8002934 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002932:	e018      	b.n	8002966 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002938:	f023 0312 	bic.w	r3, r3, #18
 800293c:	f043 0210 	orr.w	r2, r3, #16
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002954:	e007      	b.n	8002966 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	f043 0210 	orr.w	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	ffe1f7fd 	.word	0xffe1f7fd
 8002974:	ff1f0efe 	.word	0xff1f0efe

08002978 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x20>
 8002994:	2302      	movs	r3, #2
 8002996:	e0dc      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1da>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b06      	cmp	r3, #6
 80029a6:	d81c      	bhi.n	80029e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	3b05      	subs	r3, #5
 80029ba:	221f      	movs	r2, #31
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4019      	ands	r1, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	3b05      	subs	r3, #5
 80029d4:	fa00 f203 	lsl.w	r2, r0, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	635a      	str	r2, [r3, #52]	@ 0x34
 80029e0:	e03c      	b.n	8002a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d81c      	bhi.n	8002a24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	3b23      	subs	r3, #35	@ 0x23
 80029fc:	221f      	movs	r2, #31
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	4019      	ands	r1, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b23      	subs	r3, #35	@ 0x23
 8002a16:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a22:	e01b      	b.n	8002a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	3b41      	subs	r3, #65	@ 0x41
 8002a36:	221f      	movs	r2, #31
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4019      	ands	r1, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b41      	subs	r3, #65	@ 0x41
 8002a50:	fa00 f203 	lsl.w	r2, r0, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	d91c      	bls.n	8002a9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68d9      	ldr	r1, [r3, #12]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	3b1e      	subs	r3, #30
 8002a76:	2207      	movs	r2, #7
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4019      	ands	r1, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6898      	ldr	r0, [r3, #8]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b1e      	subs	r3, #30
 8002a90:	fa00 f203 	lsl.w	r2, r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	e019      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6919      	ldr	r1, [r3, #16]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	2207      	movs	r2, #7
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	4019      	ands	r1, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6898      	ldr	r0, [r3, #8]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d003      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ade:	2b11      	cmp	r3, #17
 8002ae0:	d132      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b5c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d125      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d126      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d11a      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b12:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a13      	ldr	r2, [pc, #76]	@ (8002b64 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0c9a      	lsrs	r2, r3, #18
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b28:	e002      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f9      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x1b2>
 8002b36:	e007      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	40012400 	.word	0x40012400
 8002b60:	20000004 	.word	0x20000004
 8002b64:	431bde83 	.word	0x431bde83

08002b68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d12e      	bne.n	8002be0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b92:	f7ff fe0f 	bl	80027b4 <HAL_GetTick>
 8002b96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b98:	e01b      	b.n	8002bd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b9a:	f7ff fe0b 	bl	80027b4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d914      	bls.n	8002bd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10d      	bne.n	8002bd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bba:	f043 0210 	orr.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e007      	b.n	8002be2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d0dc      	beq.n	8002b9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4906      	ldr	r1, [pc, #24]	@ (8002c84 <__NVIC_EnableIRQ+0x34>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db12      	blt.n	8002cc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	490a      	ldr	r1, [pc, #40]	@ (8002ccc <__NVIC_DisableIRQ+0x44>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	3320      	adds	r3, #32
 8002cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cb4:	f3bf 8f4f 	dsb	sy
}
 8002cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cba:	f3bf 8f6f 	isb	sy
}
 8002cbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000e100 	.word	0xe000e100

08002cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	6039      	str	r1, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	db0a      	blt.n	8002cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	490c      	ldr	r1, [pc, #48]	@ (8002d1c <__NVIC_SetPriority+0x4c>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	0112      	lsls	r2, r2, #4
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf8:	e00a      	b.n	8002d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4908      	ldr	r1, [pc, #32]	@ (8002d20 <__NVIC_SetPriority+0x50>)
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	3b04      	subs	r3, #4
 8002d08:	0112      	lsls	r2, r2, #4
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	761a      	strb	r2, [r3, #24]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e100 	.word	0xe000e100
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	@ 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f1c3 0307 	rsb	r3, r3, #7
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	bf28      	it	cs
 8002d42:	2304      	movcs	r3, #4
 8002d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d902      	bls.n	8002d54 <NVIC_EncodePriority+0x30>
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3b03      	subs	r3, #3
 8002d52:	e000      	b.n	8002d56 <NVIC_EncodePriority+0x32>
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	401a      	ands	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43d9      	mvns	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	4313      	orrs	r3, r2
         );
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	@ 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff90 	bl	8002cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff09 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff1e 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff90 	bl	8002d24 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5f 	bl	8002cd0 <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff11 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff1f 	bl	8002c88 <__NVIC_DisableIRQ>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff94 	bl	8002d88 <SysTick_Config>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d008      	beq.n	8002e94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2204      	movs	r2, #4
 8002e86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e020      	b.n	8002ed6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 020e 	bic.w	r2, r2, #14
 8002ea2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d005      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e051      	b.n	8002fa8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 020e 	bic.w	r2, r2, #14
 8002f12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a22      	ldr	r2, [pc, #136]	@ (8002fb4 <HAL_DMA_Abort_IT+0xd4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d029      	beq.n	8002f82 <HAL_DMA_Abort_IT+0xa2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a21      	ldr	r2, [pc, #132]	@ (8002fb8 <HAL_DMA_Abort_IT+0xd8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <HAL_DMA_Abort_IT+0x9e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fbc <HAL_DMA_Abort_IT+0xdc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x98>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <HAL_DMA_Abort_IT+0xe0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d012      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x92>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc4 <HAL_DMA_Abort_IT+0xe4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00a      	beq.n	8002f6c <HAL_DMA_Abort_IT+0x8c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <HAL_DMA_Abort_IT+0xe8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d102      	bne.n	8002f66 <HAL_DMA_Abort_IT+0x86>
 8002f60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f64:	e00e      	b.n	8002f84 <HAL_DMA_Abort_IT+0xa4>
 8002f66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f6a:	e00b      	b.n	8002f84 <HAL_DMA_Abort_IT+0xa4>
 8002f6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f70:	e008      	b.n	8002f84 <HAL_DMA_Abort_IT+0xa4>
 8002f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f76:	e005      	b.n	8002f84 <HAL_DMA_Abort_IT+0xa4>
 8002f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f7c:	e002      	b.n	8002f84 <HAL_DMA_Abort_IT+0xa4>
 8002f7e:	2310      	movs	r3, #16
 8002f80:	e000      	b.n	8002f84 <HAL_DMA_Abort_IT+0xa4>
 8002f82:	2301      	movs	r3, #1
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <HAL_DMA_Abort_IT+0xec>)
 8002f86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
    } 
  }
  return status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40020008 	.word	0x40020008
 8002fb8:	4002001c 	.word	0x4002001c
 8002fbc:	40020030 	.word	0x40020030
 8002fc0:	40020044 	.word	0x40020044
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	4002006c 	.word	0x4002006c
 8002fcc:	40020000 	.word	0x40020000

08002fd0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fde:	b2db      	uxtb	r3, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b08b      	sub	sp, #44	@ 0x2c
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300a:	2300      	movs	r3, #0
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003012:	e169      	b.n	80032e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003014:	2201      	movs	r2, #1
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	429a      	cmp	r2, r3
 800302e:	f040 8158 	bne.w	80032e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a9a      	ldr	r2, [pc, #616]	@ (80032a0 <HAL_GPIO_Init+0x2a0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d05e      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 800303c:	4a98      	ldr	r2, [pc, #608]	@ (80032a0 <HAL_GPIO_Init+0x2a0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d875      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 8003042:	4a98      	ldr	r2, [pc, #608]	@ (80032a4 <HAL_GPIO_Init+0x2a4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d058      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 8003048:	4a96      	ldr	r2, [pc, #600]	@ (80032a4 <HAL_GPIO_Init+0x2a4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d86f      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 800304e:	4a96      	ldr	r2, [pc, #600]	@ (80032a8 <HAL_GPIO_Init+0x2a8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d052      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 8003054:	4a94      	ldr	r2, [pc, #592]	@ (80032a8 <HAL_GPIO_Init+0x2a8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d869      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 800305a:	4a94      	ldr	r2, [pc, #592]	@ (80032ac <HAL_GPIO_Init+0x2ac>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04c      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 8003060:	4a92      	ldr	r2, [pc, #584]	@ (80032ac <HAL_GPIO_Init+0x2ac>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d863      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 8003066:	4a92      	ldr	r2, [pc, #584]	@ (80032b0 <HAL_GPIO_Init+0x2b0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d046      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 800306c:	4a90      	ldr	r2, [pc, #576]	@ (80032b0 <HAL_GPIO_Init+0x2b0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d85d      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 8003072:	2b12      	cmp	r3, #18
 8003074:	d82a      	bhi.n	80030cc <HAL_GPIO_Init+0xcc>
 8003076:	2b12      	cmp	r3, #18
 8003078:	d859      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <HAL_GPIO_Init+0x80>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030fb 	.word	0x080030fb
 8003084:	080030d5 	.word	0x080030d5
 8003088:	080030e7 	.word	0x080030e7
 800308c:	08003129 	.word	0x08003129
 8003090:	0800312f 	.word	0x0800312f
 8003094:	0800312f 	.word	0x0800312f
 8003098:	0800312f 	.word	0x0800312f
 800309c:	0800312f 	.word	0x0800312f
 80030a0:	0800312f 	.word	0x0800312f
 80030a4:	0800312f 	.word	0x0800312f
 80030a8:	0800312f 	.word	0x0800312f
 80030ac:	0800312f 	.word	0x0800312f
 80030b0:	0800312f 	.word	0x0800312f
 80030b4:	0800312f 	.word	0x0800312f
 80030b8:	0800312f 	.word	0x0800312f
 80030bc:	0800312f 	.word	0x0800312f
 80030c0:	0800312f 	.word	0x0800312f
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030f1 	.word	0x080030f1
 80030cc:	4a79      	ldr	r2, [pc, #484]	@ (80032b4 <HAL_GPIO_Init+0x2b4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030d2:	e02c      	b.n	800312e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	623b      	str	r3, [r7, #32]
          break;
 80030da:	e029      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	3304      	adds	r3, #4
 80030e2:	623b      	str	r3, [r7, #32]
          break;
 80030e4:	e024      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	3308      	adds	r3, #8
 80030ec:	623b      	str	r3, [r7, #32]
          break;
 80030ee:	e01f      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	330c      	adds	r3, #12
 80030f6:	623b      	str	r3, [r7, #32]
          break;
 80030f8:	e01a      	b.n	8003130 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003102:	2304      	movs	r3, #4
 8003104:	623b      	str	r3, [r7, #32]
          break;
 8003106:	e013      	b.n	8003130 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003110:	2308      	movs	r3, #8
 8003112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	611a      	str	r2, [r3, #16]
          break;
 800311a:	e009      	b.n	8003130 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800311c:	2308      	movs	r3, #8
 800311e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	615a      	str	r2, [r3, #20]
          break;
 8003126:	e003      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
          break;
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x130>
          break;
 800312e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2bff      	cmp	r3, #255	@ 0xff
 8003134:	d801      	bhi.n	800313a <HAL_GPIO_Init+0x13a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	e001      	b.n	800313e <HAL_GPIO_Init+0x13e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2bff      	cmp	r3, #255	@ 0xff
 8003144:	d802      	bhi.n	800314c <HAL_GPIO_Init+0x14c>
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	e002      	b.n	8003152 <HAL_GPIO_Init+0x152>
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	3b08      	subs	r3, #8
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	210f      	movs	r1, #15
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	401a      	ands	r2, r3
 8003164:	6a39      	ldr	r1, [r7, #32]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80b1 	beq.w	80032e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003180:	4b4d      	ldr	r3, [pc, #308]	@ (80032b8 <HAL_GPIO_Init+0x2b8>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a4c      	ldr	r2, [pc, #304]	@ (80032b8 <HAL_GPIO_Init+0x2b8>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	4b4a      	ldr	r3, [pc, #296]	@ (80032b8 <HAL_GPIO_Init+0x2b8>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003198:	4a48      	ldr	r2, [pc, #288]	@ (80032bc <HAL_GPIO_Init+0x2bc>)
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a40      	ldr	r2, [pc, #256]	@ (80032c0 <HAL_GPIO_Init+0x2c0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_GPIO_Init+0x1ec>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3f      	ldr	r2, [pc, #252]	@ (80032c4 <HAL_GPIO_Init+0x2c4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00d      	beq.n	80031e8 <HAL_GPIO_Init+0x1e8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3e      	ldr	r2, [pc, #248]	@ (80032c8 <HAL_GPIO_Init+0x2c8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <HAL_GPIO_Init+0x1e4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3d      	ldr	r2, [pc, #244]	@ (80032cc <HAL_GPIO_Init+0x2cc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_GPIO_Init+0x1e0>
 80031dc:	2303      	movs	r3, #3
 80031de:	e006      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e0:	2304      	movs	r3, #4
 80031e2:	e004      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031ec:	2300      	movs	r3, #0
 80031ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f0:	f002 0203 	and.w	r2, r2, #3
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	4093      	lsls	r3, r2
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031fe:	492f      	ldr	r1, [pc, #188]	@ (80032bc <HAL_GPIO_Init+0x2bc>)
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003218:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	492c      	ldr	r1, [pc, #176]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003226:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	43db      	mvns	r3, r3
 800322e:	4928      	ldr	r1, [pc, #160]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003230:	4013      	ands	r3, r2
 8003232:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003240:	4b23      	ldr	r3, [pc, #140]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	4922      	ldr	r1, [pc, #136]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	60cb      	str	r3, [r1, #12]
 800324c:	e006      	b.n	800325c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	43db      	mvns	r3, r3
 8003256:	491e      	ldr	r1, [pc, #120]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003258:	4013      	ands	r3, r2
 800325a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4918      	ldr	r1, [pc, #96]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
 8003274:	e006      	b.n	8003284 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003276:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	43db      	mvns	r3, r3
 800327e:	4914      	ldr	r1, [pc, #80]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003280:	4013      	ands	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d021      	beq.n	80032d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003290:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	490e      	ldr	r1, [pc, #56]	@ (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
 800329c:	e021      	b.n	80032e2 <HAL_GPIO_Init+0x2e2>
 800329e:	bf00      	nop
 80032a0:	10320000 	.word	0x10320000
 80032a4:	10310000 	.word	0x10310000
 80032a8:	10220000 	.word	0x10220000
 80032ac:	10210000 	.word	0x10210000
 80032b0:	10120000 	.word	0x10120000
 80032b4:	10110000 	.word	0x10110000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40010800 	.word	0x40010800
 80032c4:	40010c00 	.word	0x40010c00
 80032c8:	40011000 	.word	0x40011000
 80032cc:	40011400 	.word	0x40011400
 80032d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_GPIO_Init+0x304>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	43db      	mvns	r3, r3
 80032dc:	4909      	ldr	r1, [pc, #36]	@ (8003304 <HAL_GPIO_Init+0x304>)
 80032de:	4013      	ands	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	3301      	adds	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f47f ae8e 	bne.w	8003014 <HAL_GPIO_Init+0x14>
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	372c      	adds	r7, #44	@ 0x2c
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	@ 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003316:	e09a      	b.n	800344e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003318:	2201      	movs	r2, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 808d 	beq.w	8003448 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800332e:	4a4e      	ldr	r2, [pc, #312]	@ (8003468 <HAL_GPIO_DeInit+0x160>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a46      	ldr	r2, [pc, #280]	@ (800346c <HAL_GPIO_DeInit+0x164>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_GPIO_DeInit+0x78>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a45      	ldr	r2, [pc, #276]	@ (8003470 <HAL_GPIO_DeInit+0x168>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00d      	beq.n	800337c <HAL_GPIO_DeInit+0x74>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a44      	ldr	r2, [pc, #272]	@ (8003474 <HAL_GPIO_DeInit+0x16c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <HAL_GPIO_DeInit+0x70>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a43      	ldr	r2, [pc, #268]	@ (8003478 <HAL_GPIO_DeInit+0x170>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_GPIO_DeInit+0x6c>
 8003370:	2303      	movs	r3, #3
 8003372:	e006      	b.n	8003382 <HAL_GPIO_DeInit+0x7a>
 8003374:	2304      	movs	r3, #4
 8003376:	e004      	b.n	8003382 <HAL_GPIO_DeInit+0x7a>
 8003378:	2302      	movs	r3, #2
 800337a:	e002      	b.n	8003382 <HAL_GPIO_DeInit+0x7a>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_GPIO_DeInit+0x7a>
 8003380:	2300      	movs	r3, #0
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	f002 0203 	and.w	r2, r2, #3
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	4093      	lsls	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	429a      	cmp	r2, r3
 8003390:	d132      	bne.n	80033f8 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003392:	4b3a      	ldr	r3, [pc, #232]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	43db      	mvns	r3, r3
 800339a:	4938      	ldr	r1, [pc, #224]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 800339c:	4013      	ands	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80033a0:	4b36      	ldr	r3, [pc, #216]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	4934      	ldr	r1, [pc, #208]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80033ae:	4b33      	ldr	r3, [pc, #204]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	4931      	ldr	r1, [pc, #196]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80033bc:	4b2f      	ldr	r3, [pc, #188]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	492d      	ldr	r1, [pc, #180]	@ (800347c <HAL_GPIO_DeInit+0x174>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	220f      	movs	r2, #15
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80033da:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <HAL_GPIO_DeInit+0x160>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	43da      	mvns	r2, r3
 80033ea:	481f      	ldr	r0, [pc, #124]	@ (8003468 <HAL_GPIO_DeInit+0x160>)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	400a      	ands	r2, r1
 80033f2:	3302      	adds	r3, #2
 80033f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2bff      	cmp	r3, #255	@ 0xff
 80033fc:	d801      	bhi.n	8003402 <HAL_GPIO_DeInit+0xfa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	e001      	b.n	8003406 <HAL_GPIO_DeInit+0xfe>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2bff      	cmp	r3, #255	@ 0xff
 800340c:	d802      	bhi.n	8003414 <HAL_GPIO_DeInit+0x10c>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	e002      	b.n	800341a <HAL_GPIO_DeInit+0x112>
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	3b08      	subs	r3, #8
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	210f      	movs	r1, #15
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	2104      	movs	r1, #4
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	431a      	orrs	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	3301      	adds	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f af5e 	bne.w	8003318 <HAL_GPIO_DeInit+0x10>
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40010000 	.word	0x40010000
 800346c:	40010800 	.word	0x40010800
 8003470:	40010c00 	.word	0x40010c00
 8003474:	40011000 	.word	0x40011000
 8003478:	40011400 	.word	0x40011400
 800347c:	40010400 	.word	0x40010400

08003480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
 800348c:	4613      	mov	r3, r2
 800348e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003490:	787b      	ldrb	r3, [r7, #1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800349c:	e003      	b.n	80034a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	611a      	str	r2, [r3, #16]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43d9      	mvns	r1, r3
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	400b      	ands	r3, r1
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	611a      	str	r2, [r3, #16]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e12b      	b.n	800374e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe fed0 	bl	80022b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	@ 0x24
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003548:	f002 f9e8 	bl	800591c <HAL_RCC_GetPCLK1Freq>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a81      	ldr	r2, [pc, #516]	@ (8003758 <HAL_I2C_Init+0x274>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d807      	bhi.n	8003568 <HAL_I2C_Init+0x84>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a80      	ldr	r2, [pc, #512]	@ (800375c <HAL_I2C_Init+0x278>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e006      	b.n	8003576 <HAL_I2C_Init+0x92>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a7d      	ldr	r2, [pc, #500]	@ (8003760 <HAL_I2C_Init+0x27c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	bf94      	ite	ls
 8003570:	2301      	movls	r3, #1
 8003572:	2300      	movhi	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0e7      	b.n	800374e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a78      	ldr	r2, [pc, #480]	@ (8003764 <HAL_I2C_Init+0x280>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003758 <HAL_I2C_Init+0x274>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d802      	bhi.n	80035b8 <HAL_I2C_Init+0xd4>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3301      	adds	r3, #1
 80035b6:	e009      	b.n	80035cc <HAL_I2C_Init+0xe8>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	4a69      	ldr	r2, [pc, #420]	@ (8003768 <HAL_I2C_Init+0x284>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	495c      	ldr	r1, [pc, #368]	@ (8003758 <HAL_I2C_Init+0x274>)
 80035e8:	428b      	cmp	r3, r1
 80035ea:	d819      	bhi.n	8003620 <HAL_I2C_Init+0x13c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e59      	subs	r1, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003600:	400b      	ands	r3, r1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_I2C_Init+0x138>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e59      	subs	r1, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fbb1 f3f3 	udiv	r3, r1, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	e051      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 800361c:	2304      	movs	r3, #4
 800361e:	e04f      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d111      	bne.n	800364c <HAL_I2C_Init+0x168>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	e012      	b.n	8003672 <HAL_I2C_Init+0x18e>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1e58      	subs	r0, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	0099      	lsls	r1, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Init+0x196>
 8003676:	2301      	movs	r3, #1
 8003678:	e022      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10e      	bne.n	80036a0 <HAL_I2C_Init+0x1bc>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1e58      	subs	r0, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	440b      	add	r3, r1
 8003690:	fbb0 f3f3 	udiv	r3, r0, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800369e:	e00f      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1e58      	subs	r0, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	0099      	lsls	r1, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	6809      	ldr	r1, [r1, #0]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6911      	ldr	r1, [r2, #16]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68d2      	ldr	r2, [r2, #12]
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	430b      	orrs	r3, r1
 8003702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	000186a0 	.word	0x000186a0
 800375c:	001e847f 	.word	0x001e847f
 8003760:	003d08ff 	.word	0x003d08ff
 8003764:	431bde83 	.word	0x431bde83
 8003768:	10624dd3 	.word	0x10624dd3

0800376c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b80      	cmp	r3, #128	@ 0x80
 8003780:	d103      	bne.n	800378a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
  }
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d003      	beq.n	80037cc <HAL_I2C_EV_IRQHandler+0x38>
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	f040 80c1 	bne.w	800394e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10d      	bne.n	8003802 <HAL_I2C_EV_IRQHandler+0x6e>
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80037ec:	d003      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0x62>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80037f4:	d101      	bne.n	80037fa <HAL_I2C_EV_IRQHandler+0x66>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_I2C_EV_IRQHandler+0x68>
 80037fa:	2300      	movs	r3, #0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	f000 8132 	beq.w	8003a66 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00c      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0x92>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f001 fc9b 	bl	8005154 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fd99 	bl	8004356 <I2C_Master_SB>
 8003824:	e092      	b.n	800394c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0xb2>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	0a5b      	lsrs	r3, r3, #9
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fe0e 	bl	8004460 <I2C_Master_ADD10>
 8003844:	e082      	b.n	800394c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_I2C_EV_IRQHandler+0xd2>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	0a5b      	lsrs	r3, r3, #9
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fe27 	bl	80044b2 <I2C_Master_ADDR>
 8003864:	e072      	b.n	800394c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d03b      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003880:	f000 80f3 	beq.w	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	09db      	lsrs	r3, r3, #7
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00f      	beq.n	80038b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	0a9b      	lsrs	r3, r3, #10
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f9f1 	bl	8003c90 <I2C_MasterTransmit_TXE>
 80038ae:	e04d      	b.n	800394c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80d6 	beq.w	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	0a5b      	lsrs	r3, r3, #9
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80cf 	beq.w	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038cc:	7bbb      	ldrb	r3, [r7, #14]
 80038ce:	2b21      	cmp	r3, #33	@ 0x21
 80038d0:	d103      	bne.n	80038da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fa78 	bl	8003dc8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d8:	e0c7      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	f040 80c4 	bne.w	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fae6 	bl	8003eb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038e8:	e0bf      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	f000 80b7 	beq.w	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	099b      	lsrs	r3, r3, #6
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <HAL_I2C_EV_IRQHandler+0x194>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_I2C_EV_IRQHandler+0x194>
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fb5f 	bl	8003fe4 <I2C_MasterReceive_RXNE>
 8003926:	e011      	b.n	800394c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 809a 	beq.w	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	0a5b      	lsrs	r3, r3, #9
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8093 	beq.w	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fc15 	bl	8004174 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800394a:	e08e      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
 800394c:	e08d      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	e007      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	0a5b      	lsrs	r3, r3, #9
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00c      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003998:	69b9      	ldr	r1, [r7, #24]
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 ffe0 	bl	8004960 <I2C_Slave_ADDR>
 80039a0:	e066      	b.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	0a5b      	lsrs	r3, r3, #9
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 f81a 	bl	80049f4 <I2C_Slave_STOPF>
 80039c0:	e056      	b.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	2b21      	cmp	r3, #33	@ 0x21
 80039c6:	d002      	beq.n	80039ce <HAL_I2C_EV_IRQHandler+0x23a>
 80039c8:	7bbb      	ldrb	r3, [r7, #14]
 80039ca:	2b29      	cmp	r3, #41	@ 0x29
 80039cc:	d125      	bne.n	8003a1a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	09db      	lsrs	r3, r3, #7
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00f      	beq.n	80039fa <HAL_I2C_EV_IRQHandler+0x266>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	0a9b      	lsrs	r3, r3, #10
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_I2C_EV_IRQHandler+0x266>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	089b      	lsrs	r3, r3, #2
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fef8 	bl	80047e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f8:	e039      	b.n	8003a6e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d033      	beq.n	8003a6e <HAL_I2C_EV_IRQHandler+0x2da>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	0a5b      	lsrs	r3, r3, #9
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02d      	beq.n	8003a6e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 ff25 	bl	8004862 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a18:	e029      	b.n	8003a6e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00f      	beq.n	8003a46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0a9b      	lsrs	r3, r3, #10
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 ff2f 	bl	80048a2 <I2C_SlaveReceive_RXNE>
 8003a44:	e014      	b.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00e      	beq.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	0a5b      	lsrs	r3, r3, #9
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 ff5d 	bl	800491e <I2C_SlaveReceive_BTF>
 8003a64:	e004      	b.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a66:	bf00      	nop
 8003a68:	e002      	b.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08a      	sub	sp, #40	@ 0x28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a98:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_I2C_ER_IRQHandler+0x5e>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d010      	beq.n	8003ad4 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ac2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ad2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	0a5b      	lsrs	r3, r3, #9
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <HAL_I2C_ER_IRQHandler+0x88>
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003afc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	0a9b      	lsrs	r3, r3, #10
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d03f      	beq.n	8003b8a <HAL_I2C_ER_IRQHandler+0x114>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d039      	beq.n	8003b8a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003b16:	7efb      	ldrb	r3, [r7, #27]
 8003b18:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b28:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003b30:	7ebb      	ldrb	r3, [r7, #26]
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d112      	bne.n	8003b5c <HAL_I2C_ER_IRQHandler+0xe6>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10f      	bne.n	8003b5c <HAL_I2C_ER_IRQHandler+0xe6>
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	2b21      	cmp	r3, #33	@ 0x21
 8003b40:	d008      	beq.n	8003b54 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b29      	cmp	r3, #41	@ 0x29
 8003b46:	d005      	beq.n	8003b54 <HAL_I2C_ER_IRQHandler+0xde>
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	2b28      	cmp	r3, #40	@ 0x28
 8003b4c:	d106      	bne.n	8003b5c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b21      	cmp	r3, #33	@ 0x21
 8003b52:	d103      	bne.n	8003b5c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f001 f87d 	bl	8004c54 <I2C_Slave_AF>
 8003b5a:	e016      	b.n	8003b8a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b64:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	f043 0304 	orr.w	r3, r3, #4
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b6e:	7efb      	ldrb	r3, [r7, #27]
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d002      	beq.n	8003b7a <HAL_I2C_ER_IRQHandler+0x104>
 8003b74:	7efb      	ldrb	r3, [r7, #27]
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d107      	bne.n	8003b8a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b88:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	0adb      	lsrs	r3, r3, #11
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <HAL_I2C_ER_IRQHandler+0x13e>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	f043 0308 	orr.w	r3, r3, #8
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003bb2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f001 f8b8 	bl	8004d3c <I2C_ITError>
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3728      	adds	r7, #40	@ 0x28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d150      	bne.n	8003d58 <I2C_MasterTransmit_TXE+0xc8>
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b21      	cmp	r3, #33	@ 0x21
 8003cba:	d14d      	bne.n	8003d58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d01d      	beq.n	8003cfe <I2C_MasterTransmit_TXE+0x6e>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d01a      	beq.n	8003cfe <I2C_MasterTransmit_TXE+0x6e>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cce:	d016      	beq.n	8003cfe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cde:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2211      	movs	r2, #17
 8003ce4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff6c 	bl	8003bd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cfc:	e060      	b.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	d107      	bne.n	8003d48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ff81 	bl	8003c48 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d46:	e03b      	b.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff3f 	bl	8003bd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d56:	e033      	b.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b21      	cmp	r3, #33	@ 0x21
 8003d5c:	d005      	beq.n	8003d6a <I2C_MasterTransmit_TXE+0xda>
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	2b40      	cmp	r3, #64	@ 0x40
 8003d62:	d12d      	bne.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b22      	cmp	r3, #34	@ 0x22
 8003d68:	d12a      	bne.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d84:	e01c      	b.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d103      	bne.n	8003d9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f88e 	bl	8003eb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d98:	e012      	b.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dbe:	e7ff      	b.n	8003dc0 <I2C_MasterTransmit_TXE+0x130>
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b21      	cmp	r3, #33	@ 0x21
 8003de0:	d164      	bne.n	8003eac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d012      	beq.n	8003e12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e10:	e04c      	b.n	8003eac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d01d      	beq.n	8003e54 <I2C_MasterTransmit_BTF+0x8c>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d01a      	beq.n	8003e54 <I2C_MasterTransmit_BTF+0x8c>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e24:	d016      	beq.n	8003e54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2211      	movs	r2, #17
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fec1 	bl	8003bd4 <HAL_I2C_MasterTxCpltCallback>
}
 8003e52:	e02b      	b.n	8003eac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d107      	bne.n	8003e9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fed6 	bl	8003c48 <HAL_I2C_MemTxCpltCallback>
}
 8003e9c:	e006      	b.n	8003eac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fe94 	bl	8003bd4 <HAL_I2C_MasterTxCpltCallback>
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d11d      	bne.n	8003f08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10b      	bne.n	8003eec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003eea:	e077      	b.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	121b      	asrs	r3, r3, #8
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f06:	e069      	b.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d10b      	bne.n	8003f28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f26:	e059      	b.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d152      	bne.n	8003fd6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b22      	cmp	r3, #34	@ 0x22
 8003f34:	d10d      	bne.n	8003f52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f50:	e044      	b.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b21      	cmp	r3, #33	@ 0x21
 8003f60:	d112      	bne.n	8003f88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f86:	e029      	b.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d124      	bne.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b21      	cmp	r3, #33	@ 0x21
 8003f96:	d121      	bne.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fa6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fe3a 	bl	8003c48 <HAL_I2C_MemTxCpltCallback>
}
 8003fd4:	e002      	b.n	8003fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fbc8 	bl	800376c <I2C_Flush_DR>
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b22      	cmp	r3, #34	@ 0x22
 8003ff6:	f040 80b9 	bne.w	800416c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d921      	bls.n	8004052 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b03      	cmp	r3, #3
 800403c:	f040 8096 	bne.w	800416c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004050:	e08c      	b.n	800416c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	2b02      	cmp	r3, #2
 8004058:	d07f      	beq.n	800415a <I2C_MasterReceive_RXNE+0x176>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d002      	beq.n	8004066 <I2C_MasterReceive_RXNE+0x82>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d179      	bne.n	800415a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f001 f842 	bl	80050f0 <I2C_WaitOnSTOPRequestThroughIT>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d14c      	bne.n	800410c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004080:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004090:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b40      	cmp	r3, #64	@ 0x40
 80040ca:	d10a      	bne.n	80040e2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fdbd 	bl	8003c5a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040e0:	e044      	b.n	800416c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d002      	beq.n	80040f6 <I2C_MasterReceive_RXNE+0x112>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d103      	bne.n	80040fe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80040fc:	e002      	b.n	8004104 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2212      	movs	r2, #18
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fd6e 	bl	8003be6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800410a:	e02f      	b.n	800416c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800411a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fd8a 	bl	8003c6c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004158:	e008      	b.n	800416c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004168:	605a      	str	r2, [r3, #4]
}
 800416a:	e7ff      	b.n	800416c <I2C_MasterReceive_RXNE+0x188>
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b04      	cmp	r3, #4
 800418a:	d11b      	bne.n	80041c4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041c2:	e0c4      	b.n	800434e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d129      	bne.n	8004222 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d00a      	beq.n	80041fa <I2C_MasterReceive_BTF+0x86>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d007      	beq.n	80041fa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004220:	e095      	b.n	800434e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d17d      	bne.n	8004328 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d002      	beq.n	8004238 <I2C_MasterReceive_BTF+0xc4>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b10      	cmp	r3, #16
 8004236:	d108      	bne.n	800424a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e016      	b.n	8004278 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d002      	beq.n	8004256 <I2C_MasterReceive_BTF+0xe2>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d108      	bne.n	8004268 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e007      	b.n	8004278 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004276:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80042d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d10a      	bne.n	80042fe <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fcaf 	bl	8003c5a <HAL_I2C_MemRxCpltCallback>
}
 80042fc:	e027      	b.n	800434e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d002      	beq.n	8004312 <I2C_MasterReceive_BTF+0x19e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b20      	cmp	r3, #32
 8004310:	d103      	bne.n	800431a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	@ 0x30
 8004318:	e002      	b.n	8004320 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2212      	movs	r2, #18
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff fc60 	bl	8003be6 <HAL_I2C_MasterRxCpltCallback>
}
 8004326:	e012      	b.n	800434e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b40      	cmp	r3, #64	@ 0x40
 8004368:	d117      	bne.n	800439a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004382:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004384:	e067      	b.n	8004456 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]
}
 8004398:	e05d      	b.n	8004456 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a2:	d133      	bne.n	800440c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b21      	cmp	r3, #33	@ 0x21
 80043ae:	d109      	bne.n	80043c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043c0:	611a      	str	r2, [r3, #16]
 80043c2:	e008      	b.n	80043d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <I2C_Master_SB+0x92>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d032      	beq.n	8004456 <I2C_Master_SB+0x100>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d02d      	beq.n	8004456 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004408:	605a      	str	r2, [r3, #4]
}
 800440a:	e024      	b.n	8004456 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10e      	bne.n	8004432 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004418:	b29b      	uxth	r3, r3
 800441a:	11db      	asrs	r3, r3, #7
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0306 	and.w	r3, r3, #6
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f063 030f 	orn	r3, r3, #15
 8004428:	b2da      	uxtb	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	611a      	str	r2, [r3, #16]
}
 8004430:	e011      	b.n	8004456 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10d      	bne.n	8004456 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443e:	b29b      	uxth	r3, r3
 8004440:	11db      	asrs	r3, r3, #7
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0306 	and.w	r3, r3, #6
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f063 030e 	orn	r3, r3, #14
 800444e:	b2da      	uxtb	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	611a      	str	r2, [r3, #16]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	b2da      	uxtb	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <I2C_Master_ADD10+0x26>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <I2C_Master_ADD10+0x48>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a6:	605a      	str	r2, [r3, #4]
  }
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr

080044b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b091      	sub	sp, #68	@ 0x44
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b22      	cmp	r3, #34	@ 0x22
 80044da:	f040 8174 	bne.w	80047c6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10f      	bne.n	8004506 <I2C_Master_ADDR+0x54>
 80044e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80044ea:	2b40      	cmp	r3, #64	@ 0x40
 80044ec:	d10b      	bne.n	8004506 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	633b      	str	r3, [r7, #48]	@ 0x30
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	e16b      	b.n	80047de <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11d      	bne.n	800454a <I2C_Master_ADDR+0x98>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004516:	d118      	bne.n	800454a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004518:	2300      	movs	r3, #0
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800453c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	651a      	str	r2, [r3, #80]	@ 0x50
 8004548:	e149      	b.n	80047de <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d113      	bne.n	800457c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004554:	2300      	movs	r3, #0
 8004556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e120      	b.n	80047be <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	f040 808a 	bne.w	800469c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800458e:	d137      	bne.n	8004600 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ae:	d113      	bne.n	80045d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c0:	2300      	movs	r3, #0
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	e0f2      	b.n	80047be <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d8:	2300      	movs	r3, #0
 80045da:	623b      	str	r3, [r7, #32]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	623b      	str	r3, [r7, #32]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e0de      	b.n	80047be <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	2b08      	cmp	r3, #8
 8004604:	d02e      	beq.n	8004664 <I2C_Master_ADDR+0x1b2>
 8004606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004608:	2b20      	cmp	r3, #32
 800460a:	d02b      	beq.n	8004664 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	2b12      	cmp	r3, #18
 8004610:	d102      	bne.n	8004618 <I2C_Master_ADDR+0x166>
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	2b01      	cmp	r3, #1
 8004616:	d125      	bne.n	8004664 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	2b04      	cmp	r3, #4
 800461c:	d00e      	beq.n	800463c <I2C_Master_ADDR+0x18a>
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	2b02      	cmp	r3, #2
 8004622:	d00b      	beq.n	800463c <I2C_Master_ADDR+0x18a>
 8004624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004626:	2b10      	cmp	r3, #16
 8004628:	d008      	beq.n	800463c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e007      	b.n	800464c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800464a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	e0ac      	b.n	80047be <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004672:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e090      	b.n	80047be <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d158      	bne.n	8004758 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d021      	beq.n	80046f0 <I2C_Master_ADDR+0x23e>
 80046ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d01e      	beq.n	80046f0 <I2C_Master_ADDR+0x23e>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d01b      	beq.n	80046f0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e012      	b.n	8004716 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d14b      	bne.n	80047be <I2C_Master_ADDR+0x30c>
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800472c:	d00b      	beq.n	8004746 <I2C_Master_ADDR+0x294>
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	2b01      	cmp	r3, #1
 8004732:	d008      	beq.n	8004746 <I2C_Master_ADDR+0x294>
 8004734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004736:	2b08      	cmp	r3, #8
 8004738:	d005      	beq.n	8004746 <I2C_Master_ADDR+0x294>
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	2b10      	cmp	r3, #16
 800473e:	d002      	beq.n	8004746 <I2C_Master_ADDR+0x294>
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	2b20      	cmp	r3, #32
 8004744:	d13b      	bne.n	80047be <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e032      	b.n	80047be <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004766:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004776:	d117      	bne.n	80047a8 <I2C_Master_ADDR+0x2f6>
 8004778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800477e:	d00b      	beq.n	8004798 <I2C_Master_ADDR+0x2e6>
 8004780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004782:	2b01      	cmp	r3, #1
 8004784:	d008      	beq.n	8004798 <I2C_Master_ADDR+0x2e6>
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	2b08      	cmp	r3, #8
 800478a:	d005      	beq.n	8004798 <I2C_Master_ADDR+0x2e6>
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	2b10      	cmp	r3, #16
 8004790:	d002      	beq.n	8004798 <I2C_Master_ADDR+0x2e6>
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	2b20      	cmp	r3, #32
 8004796:	d107      	bne.n	80047a8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047c4:	e00b      	b.n	80047de <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	68bb      	ldr	r3, [r7, #8]
}
 80047dc:	e7ff      	b.n	80047de <I2C_Master_ADDR+0x32c>
 80047de:	bf00      	nop
 80047e0:	3744      	adds	r7, #68	@ 0x44
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02b      	beq.n	800485a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	781a      	ldrb	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d114      	bne.n	800485a <I2C_SlaveTransmit_TXE+0x72>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b29      	cmp	r3, #41	@ 0x29
 8004834:	d111      	bne.n	800485a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004844:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2221      	movs	r2, #33	@ 0x21
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2228      	movs	r2, #40	@ 0x28
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff f9cf 	bl	8003bf8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d011      	beq.n	8004898 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02c      	beq.n	8004916 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d114      	bne.n	8004916 <I2C_SlaveReceive_RXNE+0x74>
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80048f0:	d111      	bne.n	8004916 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004900:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2222      	movs	r2, #34	@ 0x22
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2228      	movs	r2, #40	@ 0x28
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff f97a 	bl	8003c0a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d012      	beq.n	8004956 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800497a:	2b28      	cmp	r3, #40	@ 0x28
 800497c:	d127      	bne.n	80049ce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800498c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	81bb      	strh	r3, [r7, #12]
 80049b0:	e002      	b.n	80049b8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049c0:	89ba      	ldrh	r2, [r7, #12]
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff f928 	bl	8003c1c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049cc:	e00e      	b.n	80049ec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a50:	d172      	bne.n	8004b38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b22      	cmp	r3, #34	@ 0x22
 8004a56:	d002      	beq.n	8004a5e <I2C_Slave_STOPF+0x6a>
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a5c:	d135      	bne.n	8004aca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fa9a 	bl	8002fd0 <HAL_DMA_GetState>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d049      	beq.n	8004b36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	4a69      	ldr	r2, [pc, #420]	@ (8004c4c <I2C_Slave_STOPF+0x258>)
 8004aa8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fa16 	bl	8002ee0 <HAL_DMA_Abort_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d03d      	beq.n	8004b36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ac8:	e035      	b.n	8004b36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f043 0204 	orr.w	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004afc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fa64 	bl	8002fd0 <HAL_DMA_GetState>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d014      	beq.n	8004b38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b12:	4a4e      	ldr	r2, [pc, #312]	@ (8004c4c <I2C_Slave_STOPF+0x258>)
 8004b14:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f9e0 	bl	8002ee0 <HAL_DMA_Abort_IT>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b30:	4610      	mov	r0, r2
 8004b32:	4798      	blx	r3
 8004b34:	e000      	b.n	8004b38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03e      	beq.n	8004bc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d112      	bne.n	8004b76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d112      	bne.n	8004baa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8b7 	bl	8004d3c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bce:	e039      	b.n	8004c44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bd4:	d109      	bne.n	8004bea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2228      	movs	r2, #40	@ 0x28
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff f810 	bl	8003c0a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b28      	cmp	r3, #40	@ 0x28
 8004bf4:	d111      	bne.n	8004c1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	@ (8004c50 <I2C_Slave_STOPF+0x25c>)
 8004bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff f80f 	bl	8003c36 <HAL_I2C_ListenCpltCallback>
}
 8004c18:	e014      	b.n	8004c44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	2b22      	cmp	r3, #34	@ 0x22
 8004c20:	d002      	beq.n	8004c28 <I2C_Slave_STOPF+0x234>
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b22      	cmp	r3, #34	@ 0x22
 8004c26:	d10d      	bne.n	8004c44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fe ffe3 	bl	8003c0a <HAL_I2C_SlaveRxCpltCallback>
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08004fa1 	.word	0x08004fa1
 8004c50:	ffff0000 	.word	0xffff0000

08004c54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d002      	beq.n	8004c76 <I2C_Slave_AF+0x22>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d129      	bne.n	8004cca <I2C_Slave_AF+0x76>
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b28      	cmp	r3, #40	@ 0x28
 8004c7a:	d126      	bne.n	8004cca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d38 <I2C_Slave_AF+0xe4>)
 8004c80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004caa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fe ffb7 	bl	8003c36 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004cc8:	e031      	b.n	8004d2e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b21      	cmp	r3, #33	@ 0x21
 8004cce:	d129      	bne.n	8004d24 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a19      	ldr	r2, [pc, #100]	@ (8004d38 <I2C_Slave_AF+0xe4>)
 8004cd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2221      	movs	r2, #33	@ 0x21
 8004cda:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cfa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d14:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe fd28 	bl	800376c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fe ff6b 	bl	8003bf8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d22:	e004      	b.n	8004d2e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	ffff0000 	.word	0xffff0000

08004d3c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d54:	7bbb      	ldrb	r3, [r7, #14]
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d002      	beq.n	8004d60 <I2C_ITError+0x24>
 8004d5a:	7bbb      	ldrb	r3, [r7, #14]
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d10a      	bne.n	8004d76 <I2C_ITError+0x3a>
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b22      	cmp	r3, #34	@ 0x22
 8004d64:	d107      	bne.n	8004d76 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d74:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d7c:	2b28      	cmp	r3, #40	@ 0x28
 8004d7e:	d107      	bne.n	8004d90 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2228      	movs	r2, #40	@ 0x28
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d8e:	e015      	b.n	8004dbc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d9e:	d00a      	beq.n	8004db6 <I2C_ITError+0x7a>
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b60      	cmp	r3, #96	@ 0x60
 8004da4:	d007      	beq.n	8004db6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dca:	d162      	bne.n	8004e92 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dda:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d020      	beq.n	8004e2c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dee:	4a6a      	ldr	r2, [pc, #424]	@ (8004f98 <I2C_ITError+0x25c>)
 8004df0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe f872 	bl	8002ee0 <HAL_DMA_Abort_IT>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8089 	beq.w	8004f16 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e26:	4610      	mov	r0, r2
 8004e28:	4798      	blx	r3
 8004e2a:	e074      	b.n	8004f16 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	4a59      	ldr	r2, [pc, #356]	@ (8004f98 <I2C_ITError+0x25c>)
 8004e32:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe f851 	bl	8002ee0 <HAL_DMA_Abort_IT>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d068      	beq.n	8004f16 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	d10b      	bne.n	8004e6a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4798      	blx	r3
 8004e90:	e041      	b.n	8004f16 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b60      	cmp	r3, #96	@ 0x60
 8004e9c:	d125      	bne.n	8004eea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb6:	2b40      	cmp	r3, #64	@ 0x40
 8004eb8:	d10b      	bne.n	8004ed2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fe fecb 	bl	8003c7e <HAL_I2C_AbortCpltCallback>
 8004ee8:	e015      	b.n	8004f16 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d10b      	bne.n	8004f10 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7fe feab 	bl	8003c6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10e      	bne.n	8004f44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d113      	bne.n	8004f90 <I2C_ITError+0x254>
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b28      	cmp	r3, #40	@ 0x28
 8004f6c:	d110      	bne.n	8004f90 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <I2C_ITError+0x260>)
 8004f72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fe fe53 	bl	8003c36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	08004fa1 	.word	0x08004fa1
 8004f9c:	ffff0000 	.word	0xffff0000

08004fa0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fba:	4b4b      	ldr	r3, [pc, #300]	@ (80050e8 <I2C_DMAAbort+0x148>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	08db      	lsrs	r3, r3, #3
 8004fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80050ec <I2C_DMAAbort+0x14c>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	0a1a      	lsrs	r2, r3, #8
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	00da      	lsls	r2, r3, #3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004fe6:	e00a      	b.n	8004ffe <I2C_DMAAbort+0x5e>
    }
    count--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ffc:	d0ea      	beq.n	8004fd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	2200      	movs	r2, #0
 800500c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	2200      	movs	r2, #0
 800501c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800502c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2200      	movs	r2, #0
 8005032:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005040:	2200      	movs	r2, #0
 8005042:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	2200      	movs	r2, #0
 8005052:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b60      	cmp	r3, #96	@ 0x60
 800506e:	d10e      	bne.n	800508e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f7fe fdf9 	bl	8003c7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800508c:	e027      	b.n	80050de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005094:	2b28      	cmp	r3, #40	@ 0x28
 8005096:	d117      	bne.n	80050c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2228      	movs	r2, #40	@ 0x28
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050c6:	e007      	b.n	80050d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80050d8:	6978      	ldr	r0, [r7, #20]
 80050da:	f7fe fdc7 	bl	8003c6c <HAL_I2C_ErrorCallback>
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000004 	.word	0x20000004
 80050ec:	14f8b589 	.word	0x14f8b589

080050f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050fc:	4b13      	ldr	r3, [pc, #76]	@ (800514c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	08db      	lsrs	r3, r3, #3
 8005102:	4a13      	ldr	r2, [pc, #76]	@ (8005150 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	0a1a      	lsrs	r2, r3, #8
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b01      	subs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e008      	b.n	8005140 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800513c:	d0e9      	beq.n	8005112 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000004 	.word	0x20000004
 8005150:	14f8b589 	.word	0x14f8b589

08005154 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005164:	d103      	bne.n	800516e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800516c:	e007      	b.n	800517e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005176:	d102      	bne.n	800517e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2208      	movs	r2, #8
 800517c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e272      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8087 	beq.w	80052b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a8:	4b92      	ldr	r3, [pc, #584]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d00c      	beq.n	80051ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051b4:	4b8f      	ldr	r3, [pc, #572]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d112      	bne.n	80051e6 <HAL_RCC_OscConfig+0x5e>
 80051c0:	4b8c      	ldr	r3, [pc, #560]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051cc:	d10b      	bne.n	80051e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ce:	4b89      	ldr	r3, [pc, #548]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x12c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d168      	bne.n	80052b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e24c      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ee:	d106      	bne.n	80051fe <HAL_RCC_OscConfig+0x76>
 80051f0:	4b80      	ldr	r3, [pc, #512]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a7f      	ldr	r2, [pc, #508]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80051f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e02e      	b.n	800525c <HAL_RCC_OscConfig+0xd4>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x98>
 8005206:	4b7b      	ldr	r3, [pc, #492]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a7a      	ldr	r2, [pc, #488]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 800520c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	4b78      	ldr	r3, [pc, #480]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a77      	ldr	r2, [pc, #476]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e01d      	b.n	800525c <HAL_RCC_OscConfig+0xd4>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0xbc>
 800522a:	4b72      	ldr	r3, [pc, #456]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a71      	ldr	r2, [pc, #452]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b6f      	ldr	r3, [pc, #444]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6e      	ldr	r2, [pc, #440]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0xd4>
 8005244:	4b6b      	ldr	r3, [pc, #428]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a6a      	ldr	r2, [pc, #424]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 800524a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4b68      	ldr	r3, [pc, #416]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a67      	ldr	r2, [pc, #412]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800525a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fd faa6 	bl	80027b4 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fd faa2 	bl	80027b4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e200      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	4b5d      	ldr	r3, [pc, #372]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0xe4>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528c:	f7fd fa92 	bl	80027b4 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7fd fa8e 	bl	80027b4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	@ 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e1ec      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a6:	4b53      	ldr	r3, [pc, #332]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x10c>
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d063      	beq.n	800538a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052c2:	4b4c      	ldr	r3, [pc, #304]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052ce:	4b49      	ldr	r3, [pc, #292]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d11c      	bne.n	8005314 <HAL_RCC_OscConfig+0x18c>
 80052da:	4b46      	ldr	r3, [pc, #280]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d116      	bne.n	8005314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e6:	4b43      	ldr	r3, [pc, #268]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_RCC_OscConfig+0x176>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e1c0      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fe:	4b3d      	ldr	r3, [pc, #244]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4939      	ldr	r1, [pc, #228]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005312:	e03a      	b.n	800538a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800531c:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <HAL_RCC_OscConfig+0x270>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005322:	f7fd fa47 	bl	80027b4 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532a:	f7fd fa43 	bl	80027b4 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e1a1      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533c:	4b2d      	ldr	r3, [pc, #180]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005348:	4b2a      	ldr	r3, [pc, #168]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4927      	ldr	r1, [pc, #156]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]
 800535c:	e015      	b.n	800538a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800535e:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <HAL_RCC_OscConfig+0x270>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fd fa26 	bl	80027b4 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536c:	f7fd fa22 	bl	80027b4 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e180      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537e:	4b1d      	ldr	r3, [pc, #116]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d03a      	beq.n	800540c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d019      	beq.n	80053d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539e:	4b17      	ldr	r3, [pc, #92]	@ (80053fc <HAL_RCC_OscConfig+0x274>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a4:	f7fd fa06 	bl	80027b4 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ac:	f7fd fa02 	bl	80027b4 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e160      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	4b0d      	ldr	r3, [pc, #52]	@ (80053f4 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053ca:	2001      	movs	r0, #1
 80053cc:	f000 face 	bl	800596c <RCC_Delay>
 80053d0:	e01c      	b.n	800540c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <HAL_RCC_OscConfig+0x274>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d8:	f7fd f9ec 	bl	80027b4 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053de:	e00f      	b.n	8005400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e0:	f7fd f9e8 	bl	80027b4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d908      	bls.n	8005400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e146      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	42420000 	.word	0x42420000
 80053fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005400:	4b92      	ldr	r3, [pc, #584]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e9      	bne.n	80053e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80a6 	beq.w	8005566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541e:	4b8b      	ldr	r3, [pc, #556]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542a:	4b88      	ldr	r3, [pc, #544]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	4a87      	ldr	r2, [pc, #540]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005434:	61d3      	str	r3, [r2, #28]
 8005436:	4b85      	ldr	r3, [pc, #532]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005442:	2301      	movs	r3, #1
 8005444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005446:	4b82      	ldr	r3, [pc, #520]	@ (8005650 <HAL_RCC_OscConfig+0x4c8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d118      	bne.n	8005484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005452:	4b7f      	ldr	r3, [pc, #508]	@ (8005650 <HAL_RCC_OscConfig+0x4c8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a7e      	ldr	r2, [pc, #504]	@ (8005650 <HAL_RCC_OscConfig+0x4c8>)
 8005458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800545c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545e:	f7fd f9a9 	bl	80027b4 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005466:	f7fd f9a5 	bl	80027b4 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b64      	cmp	r3, #100	@ 0x64
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e103      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005478:	4b75      	ldr	r3, [pc, #468]	@ (8005650 <HAL_RCC_OscConfig+0x4c8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d106      	bne.n	800549a <HAL_RCC_OscConfig+0x312>
 800548c:	4b6f      	ldr	r3, [pc, #444]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	4a6e      	ldr	r2, [pc, #440]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	6213      	str	r3, [r2, #32]
 8005498:	e02d      	b.n	80054f6 <HAL_RCC_OscConfig+0x36e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x334>
 80054a2:	4b6a      	ldr	r3, [pc, #424]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4a69      	ldr	r2, [pc, #420]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6213      	str	r3, [r2, #32]
 80054ae:	4b67      	ldr	r3, [pc, #412]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	4a66      	ldr	r2, [pc, #408]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	6213      	str	r3, [r2, #32]
 80054ba:	e01c      	b.n	80054f6 <HAL_RCC_OscConfig+0x36e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d10c      	bne.n	80054de <HAL_RCC_OscConfig+0x356>
 80054c4:	4b61      	ldr	r3, [pc, #388]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	4a60      	ldr	r2, [pc, #384]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6213      	str	r3, [r2, #32]
 80054d0:	4b5e      	ldr	r3, [pc, #376]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	4a5d      	ldr	r2, [pc, #372]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6213      	str	r3, [r2, #32]
 80054dc:	e00b      	b.n	80054f6 <HAL_RCC_OscConfig+0x36e>
 80054de:	4b5b      	ldr	r3, [pc, #364]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	4a5a      	ldr	r2, [pc, #360]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	6213      	str	r3, [r2, #32]
 80054ea:	4b58      	ldr	r3, [pc, #352]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	4a57      	ldr	r2, [pc, #348]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80054f0:	f023 0304 	bic.w	r3, r3, #4
 80054f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d015      	beq.n	800552a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054fe:	f7fd f959 	bl	80027b4 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005504:	e00a      	b.n	800551c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fd f955 	bl	80027b4 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0b1      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551c:	4b4b      	ldr	r3, [pc, #300]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ee      	beq.n	8005506 <HAL_RCC_OscConfig+0x37e>
 8005528:	e014      	b.n	8005554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552a:	f7fd f943 	bl	80027b4 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005530:	e00a      	b.n	8005548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fd f93f 	bl	80027b4 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e09b      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005548:	4b40      	ldr	r3, [pc, #256]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ee      	bne.n	8005532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d105      	bne.n	8005566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555a:	4b3c      	ldr	r3, [pc, #240]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4a3b      	ldr	r2, [pc, #236]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8087 	beq.w	800567e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005570:	4b36      	ldr	r3, [pc, #216]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b08      	cmp	r3, #8
 800557a:	d061      	beq.n	8005640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d146      	bne.n	8005612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005584:	4b33      	ldr	r3, [pc, #204]	@ (8005654 <HAL_RCC_OscConfig+0x4cc>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558a:	f7fd f913 	bl	80027b4 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005592:	f7fd f90f 	bl	80027b4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e06d      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055a4:	4b29      	ldr	r3, [pc, #164]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f0      	bne.n	8005592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b8:	d108      	bne.n	80055cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055ba:	4b24      	ldr	r3, [pc, #144]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	4921      	ldr	r1, [pc, #132]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055cc:	4b1f      	ldr	r3, [pc, #124]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a19      	ldr	r1, [r3, #32]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	430b      	orrs	r3, r1
 80055de:	491b      	ldr	r1, [pc, #108]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005654 <HAL_RCC_OscConfig+0x4cc>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ea:	f7fd f8e3 	bl	80027b4 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f2:	f7fd f8df 	bl	80027b4 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e03d      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005604:	4b11      	ldr	r3, [pc, #68]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x46a>
 8005610:	e035      	b.n	800567e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <HAL_RCC_OscConfig+0x4cc>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fd f8cc 	bl	80027b4 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fd f8c8 	bl	80027b4 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e026      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005632:	4b06      	ldr	r3, [pc, #24]	@ (800564c <HAL_RCC_OscConfig+0x4c4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x498>
 800563e:	e01e      	b.n	800567e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d107      	bne.n	8005658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e019      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
 8005654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005658:	4b0b      	ldr	r3, [pc, #44]	@ (8005688 <HAL_RCC_OscConfig+0x500>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	429a      	cmp	r2, r3
 800566a:	d106      	bne.n	800567a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d001      	beq.n	800567e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40021000 	.word	0x40021000

0800568c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0d0      	b.n	8005842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a0:	4b6a      	ldr	r3, [pc, #424]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d910      	bls.n	80056d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b67      	ldr	r3, [pc, #412]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 0207 	bic.w	r2, r3, #7
 80056b6:	4965      	ldr	r1, [pc, #404]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b63      	ldr	r3, [pc, #396]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0b8      	b.n	8005842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d020      	beq.n	800571e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e8:	4b59      	ldr	r3, [pc, #356]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4a58      	ldr	r2, [pc, #352]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80056ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005700:	4b53      	ldr	r3, [pc, #332]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	4a52      	ldr	r2, [pc, #328]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 8005706:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800570a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800570c:	4b50      	ldr	r3, [pc, #320]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	494d      	ldr	r1, [pc, #308]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800571a:	4313      	orrs	r3, r2
 800571c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d040      	beq.n	80057ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	4b47      	ldr	r3, [pc, #284]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d115      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e07f      	b.n	8005842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574a:	4b41      	ldr	r3, [pc, #260]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e073      	b.n	8005842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575a:	4b3d      	ldr	r3, [pc, #244]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e06b      	b.n	8005842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576a:	4b39      	ldr	r3, [pc, #228]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f023 0203 	bic.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4936      	ldr	r1, [pc, #216]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 8005778:	4313      	orrs	r3, r2
 800577a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800577c:	f7fd f81a 	bl	80027b4 <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	e00a      	b.n	800579a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005784:	f7fd f816 	bl	80027b4 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e053      	b.n	8005842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	4b2d      	ldr	r3, [pc, #180]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 020c 	and.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1eb      	bne.n	8005784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b27      	ldr	r3, [pc, #156]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d210      	bcs.n	80057dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 0207 	bic.w	r2, r3, #7
 80057c2:	4922      	ldr	r1, [pc, #136]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b20      	ldr	r3, [pc, #128]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e032      	b.n	8005842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e8:	4b19      	ldr	r3, [pc, #100]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4916      	ldr	r1, [pc, #88]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005806:	4b12      	ldr	r3, [pc, #72]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	490e      	ldr	r1, [pc, #56]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800581a:	f000 f821 	bl	8005860 <HAL_RCC_GetSysClockFreq>
 800581e:	4602      	mov	r2, r0
 8005820:	4b0b      	ldr	r3, [pc, #44]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	490a      	ldr	r1, [pc, #40]	@ (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 800582c:	5ccb      	ldrb	r3, [r1, r3]
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	4a09      	ldr	r2, [pc, #36]	@ (8005858 <HAL_RCC_ClockConfig+0x1cc>)
 8005834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005836:	4b09      	ldr	r3, [pc, #36]	@ (800585c <HAL_RCC_ClockConfig+0x1d0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fc ff78 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40022000 	.word	0x40022000
 8005850:	40021000 	.word	0x40021000
 8005854:	0800a558 	.word	0x0800a558
 8005858:	20000004 	.word	0x20000004
 800585c:	20000008 	.word	0x20000008

08005860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	2300      	movs	r3, #0
 8005874:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800587a:	4b1e      	ldr	r3, [pc, #120]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	2b04      	cmp	r3, #4
 8005888:	d002      	beq.n	8005890 <HAL_RCC_GetSysClockFreq+0x30>
 800588a:	2b08      	cmp	r3, #8
 800588c:	d003      	beq.n	8005896 <HAL_RCC_GetSysClockFreq+0x36>
 800588e:	e027      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005890:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005892:	613b      	str	r3, [r7, #16]
      break;
 8005894:	e027      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	0c9b      	lsrs	r3, r3, #18
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	4a17      	ldr	r2, [pc, #92]	@ (80058fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80058a0:	5cd3      	ldrb	r3, [r2, r3]
 80058a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d010      	beq.n	80058d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80058ae:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	0c5b      	lsrs	r3, r3, #17
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	4a11      	ldr	r2, [pc, #68]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xa0>)
 80058ba:	5cd3      	ldrb	r3, [r2, r3]
 80058bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a0d      	ldr	r2, [pc, #52]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80058c2:	fb03 f202 	mul.w	r2, r3, r2
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e004      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005904 <HAL_RCC_GetSysClockFreq+0xa4>)
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	613b      	str	r3, [r7, #16]
      break;
 80058de:	e002      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80058e2:	613b      	str	r3, [r7, #16]
      break;
 80058e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058e6:	693b      	ldr	r3, [r7, #16]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40021000 	.word	0x40021000
 80058f8:	007a1200 	.word	0x007a1200
 80058fc:	0800a570 	.word	0x0800a570
 8005900:	0800a580 	.word	0x0800a580
 8005904:	003d0900 	.word	0x003d0900

08005908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800590c:	4b02      	ldr	r3, [pc, #8]	@ (8005918 <HAL_RCC_GetHCLKFreq+0x10>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr
 8005918:	20000004 	.word	0x20000004

0800591c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005920:	f7ff fff2 	bl	8005908 <HAL_RCC_GetHCLKFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b05      	ldr	r3, [pc, #20]	@ (800593c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4903      	ldr	r1, [pc, #12]	@ (8005940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40021000 	.word	0x40021000
 8005940:	0800a568 	.word	0x0800a568

08005944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005948:	f7ff ffde 	bl	8005908 <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	0adb      	lsrs	r3, r3, #11
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4903      	ldr	r1, [pc, #12]	@ (8005968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000
 8005968:	0800a568 	.word	0x0800a568

0800596c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005974:	4b0a      	ldr	r3, [pc, #40]	@ (80059a0 <RCC_Delay+0x34>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a0a      	ldr	r2, [pc, #40]	@ (80059a4 <RCC_Delay+0x38>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	0a5b      	lsrs	r3, r3, #9
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005988:	bf00      	nop
  }
  while (Delay --);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1e5a      	subs	r2, r3, #1
 800598e:	60fa      	str	r2, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f9      	bne.n	8005988 <RCC_Delay+0x1c>
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr
 80059a0:	20000004 	.word	0x20000004
 80059a4:	10624dd3 	.word	0x10624dd3

080059a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d07d      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80059c4:	2300      	movs	r3, #0
 80059c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10d      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059de:	61d3      	str	r3, [r2, #28]
 80059e0:	4b49      	ldr	r3, [pc, #292]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ec:	2301      	movs	r3, #1
 80059ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f0:	4b46      	ldr	r3, [pc, #280]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d118      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059fc:	4b43      	ldr	r3, [pc, #268]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a42      	ldr	r2, [pc, #264]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a08:	f7fc fed4 	bl	80027b4 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	e008      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fc fed0 	bl	80027b4 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	@ 0x64
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e06d      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a22:	4b3a      	ldr	r3, [pc, #232]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a2e:	4b36      	ldr	r3, [pc, #216]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02e      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d027      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a56:	4b2e      	ldr	r3, [pc, #184]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a62:	4a29      	ldr	r2, [pc, #164]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d014      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a72:	f7fc fe9f 	bl	80027b4 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a78:	e00a      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7a:	f7fc fe9b 	bl	80027b4 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e036      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a90:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0ee      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4917      	ldr	r1, [pc, #92]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab4:	4b14      	ldr	r3, [pc, #80]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	4a13      	ldr	r2, [pc, #76]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005abe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005acc:	4b0e      	ldr	r3, [pc, #56]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	490b      	ldr	r1, [pc, #44]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aea:	4b07      	ldr	r3, [pc, #28]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	4904      	ldr	r1, [pc, #16]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40007000 	.word	0x40007000
 8005b10:	42420440 	.word	0x42420440

08005b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e041      	b.n	8005baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc fc06 	bl	800234c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f000 fc32 	bl	80063bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e041      	b.n	8005c48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f839 	bl	8005c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f000 fbe3 	bl	80063bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <HAL_TIM_PWM_Start+0x24>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	e022      	b.n	8005cce <HAL_TIM_PWM_Start+0x6a>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d109      	bne.n	8005ca2 <HAL_TIM_PWM_Start+0x3e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	bf14      	ite	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	2300      	moveq	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	e015      	b.n	8005cce <HAL_TIM_PWM_Start+0x6a>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d109      	bne.n	8005cbc <HAL_TIM_PWM_Start+0x58>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	bf14      	ite	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	2300      	moveq	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e008      	b.n	8005cce <HAL_TIM_PWM_Start+0x6a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e05e      	b.n	8005d94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0x82>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ce4:	e013      	b.n	8005d0e <HAL_TIM_PWM_Start+0xaa>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0x92>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf4:	e00b      	b.n	8005d0e <HAL_TIM_PWM_Start+0xaa>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_PWM_Start+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d04:	e003      	b.n	8005d0e <HAL_TIM_PWM_Start+0xaa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2201      	movs	r2, #1
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fddc 	bl	80068d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1e      	ldr	r2, [pc, #120]	@ (8005d9c <HAL_TIM_PWM_Start+0x138>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d107      	bne.n	8005d36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_TIM_PWM_Start+0x138>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <HAL_TIM_PWM_Start+0xfa>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d48:	d009      	beq.n	8005d5e <HAL_TIM_PWM_Start+0xfa>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a14      	ldr	r2, [pc, #80]	@ (8005da0 <HAL_TIM_PWM_Start+0x13c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <HAL_TIM_PWM_Start+0xfa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a12      	ldr	r2, [pc, #72]	@ (8005da4 <HAL_TIM_PWM_Start+0x140>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d111      	bne.n	8005d82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b06      	cmp	r3, #6
 8005d6e:	d010      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	e007      	b.n	8005d92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800

08005da8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fd8a 	bl	80068d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a29      	ldr	r2, [pc, #164]	@ (8005e6c <HAL_TIM_PWM_Stop+0xc4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d117      	bne.n	8005dfa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <HAL_TIM_PWM_Stop+0x52>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	f240 4344 	movw	r3, #1092	@ 0x444
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_PWM_Stop+0x52>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <HAL_TIM_PWM_Stop+0x82>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_PWM_Stop+0x82>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_PWM_Stop+0x92>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e38:	e013      	b.n	8005e62 <HAL_TIM_PWM_Stop+0xba>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_PWM_Stop+0xa2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e48:	e00b      	b.n	8005e62 <HAL_TIM_PWM_Stop+0xba>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_PWM_Stop+0xb2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e58:	e003      	b.n	8005e62 <HAL_TIM_PWM_Stop+0xba>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40012c00 	.word	0x40012c00

08005e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d020      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0202 	mvn.w	r2, #2
 8005ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa63 	bl	8006386 <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa56 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa65 	bl	8006398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d020      	beq.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01b      	beq.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0204 	mvn.w	r2, #4
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa3d 	bl	8006386 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa30 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa3f 	bl	8006398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d020      	beq.n	8005f6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01b      	beq.n	8005f6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0208 	mvn.w	r2, #8
 8005f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2204      	movs	r2, #4
 8005f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa17 	bl	8006386 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa0a 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa19 	bl	8006398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d020      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0210 	mvn.w	r2, #16
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9f1 	bl	8006386 <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9e4 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f9f3 	bl	8006398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00c      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0201 	mvn.w	r2, #1
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9c3 	bl	8006362 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fd46 	bl	8006a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9c3 	bl	80063aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0220 	mvn.w	r2, #32
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fd19 	bl	8006a7a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800606a:	2302      	movs	r3, #2
 800606c:	e0ae      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	f200 809f 	bhi.w	80061bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800607e:	a201      	add	r2, pc, #4	@ (adr r2, 8006084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060b9 	.word	0x080060b9
 8006088:	080061bd 	.word	0x080061bd
 800608c:	080061bd 	.word	0x080061bd
 8006090:	080061bd 	.word	0x080061bd
 8006094:	080060f9 	.word	0x080060f9
 8006098:	080061bd 	.word	0x080061bd
 800609c:	080061bd 	.word	0x080061bd
 80060a0:	080061bd 	.word	0x080061bd
 80060a4:	0800613b 	.word	0x0800613b
 80060a8:	080061bd 	.word	0x080061bd
 80060ac:	080061bd 	.word	0x080061bd
 80060b0:	080061bd 	.word	0x080061bd
 80060b4:	0800617b 	.word	0x0800617b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f9ea 	bl	8006498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0204 	bic.w	r2, r2, #4
 80060e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6999      	ldr	r1, [r3, #24]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	619a      	str	r2, [r3, #24]
      break;
 80060f6:	e064      	b.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fa30 	bl	8006564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6999      	ldr	r1, [r3, #24]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	619a      	str	r2, [r3, #24]
      break;
 8006138:	e043      	b.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fa79 	bl	8006638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0208 	orr.w	r2, r2, #8
 8006154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0204 	bic.w	r2, r2, #4
 8006164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69d9      	ldr	r1, [r3, #28]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	61da      	str	r2, [r3, #28]
      break;
 8006178:	e023      	b.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fac3 	bl	800670c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69d9      	ldr	r1, [r3, #28]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	021a      	lsls	r2, r3, #8
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	61da      	str	r2, [r3, #28]
      break;
 80061ba:	e002      	b.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
      break;
 80061c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_TIM_ConfigClockSource+0x1c>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e0b4      	b.n	800635a <HAL_TIM_ConfigClockSource+0x186>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800620e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006228:	d03e      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0xd4>
 800622a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800622e:	f200 8087 	bhi.w	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006236:	f000 8086 	beq.w	8006346 <HAL_TIM_ConfigClockSource+0x172>
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623e:	d87f      	bhi.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006240:	2b70      	cmp	r3, #112	@ 0x70
 8006242:	d01a      	beq.n	800627a <HAL_TIM_ConfigClockSource+0xa6>
 8006244:	2b70      	cmp	r3, #112	@ 0x70
 8006246:	d87b      	bhi.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b60      	cmp	r3, #96	@ 0x60
 800624a:	d050      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x11a>
 800624c:	2b60      	cmp	r3, #96	@ 0x60
 800624e:	d877      	bhi.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006250:	2b50      	cmp	r3, #80	@ 0x50
 8006252:	d03c      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0xfa>
 8006254:	2b50      	cmp	r3, #80	@ 0x50
 8006256:	d873      	bhi.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006258:	2b40      	cmp	r3, #64	@ 0x40
 800625a:	d058      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x13a>
 800625c:	2b40      	cmp	r3, #64	@ 0x40
 800625e:	d86f      	bhi.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b30      	cmp	r3, #48	@ 0x30
 8006262:	d064      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x15a>
 8006264:	2b30      	cmp	r3, #48	@ 0x30
 8006266:	d86b      	bhi.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b20      	cmp	r3, #32
 800626a:	d060      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x15a>
 800626c:	2b20      	cmp	r3, #32
 800626e:	d867      	bhi.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d05c      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x15a>
 8006274:	2b10      	cmp	r3, #16
 8006276:	d05a      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x15a>
 8006278:	e062      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800628a:	f000 fb04 	bl	8006896 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800629c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	609a      	str	r2, [r3, #8]
      break;
 80062a6:	e04f      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062b8:	f000 faed 	bl	8006896 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ca:	609a      	str	r2, [r3, #8]
      break;
 80062cc:	e03c      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062da:	461a      	mov	r2, r3
 80062dc:	f000 fa64 	bl	80067a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2150      	movs	r1, #80	@ 0x50
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fabb 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 80062ec:	e02c      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 fa82 	bl	8006804 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2160      	movs	r1, #96	@ 0x60
 8006306:	4618      	mov	r0, r3
 8006308:	f000 faab 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 800630c:	e01c      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800631a:	461a      	mov	r2, r3
 800631c:	f000 fa44 	bl	80067a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2140      	movs	r1, #64	@ 0x40
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fa9b 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 800632c:	e00c      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f000 fa92 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 800633e:	e003      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
      break;
 8006344:	e000      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr

08006386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a2f      	ldr	r2, [pc, #188]	@ (800648c <TIM_Base_SetConfig+0xd0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00b      	beq.n	80063ec <TIM_Base_SetConfig+0x30>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063da:	d007      	beq.n	80063ec <TIM_Base_SetConfig+0x30>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a2c      	ldr	r2, [pc, #176]	@ (8006490 <TIM_Base_SetConfig+0xd4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_Base_SetConfig+0x30>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006494 <TIM_Base_SetConfig+0xd8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d108      	bne.n	80063fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a22      	ldr	r2, [pc, #136]	@ (800648c <TIM_Base_SetConfig+0xd0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_Base_SetConfig+0x62>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640c:	d007      	beq.n	800641e <TIM_Base_SetConfig+0x62>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1f      	ldr	r2, [pc, #124]	@ (8006490 <TIM_Base_SetConfig+0xd4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_Base_SetConfig+0x62>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a1e      	ldr	r2, [pc, #120]	@ (8006494 <TIM_Base_SetConfig+0xd8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d108      	bne.n	8006430 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a0d      	ldr	r2, [pc, #52]	@ (800648c <TIM_Base_SetConfig+0xd0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d103      	bne.n	8006464 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f023 0201 	bic.w	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	611a      	str	r2, [r3, #16]
  }
}
 8006482:	bf00      	nop
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr
 800648c:	40012c00 	.word	0x40012c00
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800

08006498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f023 0201 	bic.w	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0303 	bic.w	r3, r3, #3
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0302 	bic.w	r3, r3, #2
 80064e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006560 <TIM_OC1_SetConfig+0xc8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d10c      	bne.n	800650e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0308 	bic.w	r3, r3, #8
 80064fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a13      	ldr	r2, [pc, #76]	@ (8006560 <TIM_OC1_SetConfig+0xc8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d111      	bne.n	800653a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800651c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	621a      	str	r2, [r3, #32]
}
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00

08006564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0210 	bic.w	r2, r3, #16
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800659a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0320 	bic.w	r3, r3, #32
 80065ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1d      	ldr	r2, [pc, #116]	@ (8006634 <TIM_OC2_SetConfig+0xd0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10d      	bne.n	80065e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a14      	ldr	r2, [pc, #80]	@ (8006634 <TIM_OC2_SetConfig+0xd0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d113      	bne.n	8006610 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr
 8006634:	40012c00 	.word	0x40012c00

08006638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1d      	ldr	r2, [pc, #116]	@ (8006708 <TIM_OC3_SetConfig+0xd0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d10d      	bne.n	80066b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800669c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a14      	ldr	r2, [pc, #80]	@ (8006708 <TIM_OC3_SetConfig+0xd0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d113      	bne.n	80066e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40012c00 	.word	0x40012c00

0800670c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a0f      	ldr	r2, [pc, #60]	@ (80067a4 <TIM_OC4_SetConfig+0x98>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d109      	bne.n	8006780 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	019b      	lsls	r3, r3, #6
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr
 80067a4:	40012c00 	.word	0x40012c00

080067a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0201 	bic.w	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 030a 	bic.w	r3, r3, #10
 80067e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f023 0210 	bic.w	r2, r3, #16
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800682e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	031b      	lsls	r3, r3, #12
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	621a      	str	r2, [r3, #32]
}
 8006858:	bf00      	nop
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr

08006862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	f043 0307 	orr.w	r3, r3, #7
 8006884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
 80068a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	021a      	lsls	r2, r3, #8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4313      	orrs	r3, r2
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	609a      	str	r2, [r3, #8]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	2201      	movs	r2, #1
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	401a      	ands	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	431a      	orrs	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	bc80      	pop	{r7}
 800691a:	4770      	bx	lr

0800691c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006930:	2302      	movs	r3, #2
 8006932:	e046      	b.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a16      	ldr	r2, [pc, #88]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00e      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006980:	d009      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a12      	ldr	r2, [pc, #72]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d004      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a10      	ldr	r2, [pc, #64]	@ (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d10c      	bne.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800

080069d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e03d      	b.n	8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e042      	b.n	8006b36 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fb fd01 	bl	80024cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2224      	movs	r2, #36	@ 0x24
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ae0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fecc 	bl	8007880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006af6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e024      	b.n	8006b9a <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2224      	movs	r2, #36	@ 0x24
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b66:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fb fd01 	bl	8002570 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b08a      	sub	sp, #40	@ 0x28
 8006ba6:	af02      	add	r7, sp, #8
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d175      	bne.n	8006cae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_UART_Transmit+0x2c>
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e06e      	b.n	8006cb0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2221      	movs	r2, #33	@ 0x21
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006be0:	f7fb fde8 	bl	80027b4 <HAL_GetTick>
 8006be4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	88fa      	ldrh	r2, [r7, #6]
 8006bea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	88fa      	ldrh	r2, [r7, #6]
 8006bf0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bfa:	d108      	bne.n	8006c0e <HAL_UART_Transmit+0x6c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	e003      	b.n	8006c16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c16:	e02e      	b.n	8006c76 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2180      	movs	r1, #128	@ 0x80
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fbfe 	bl	8007424 <UART_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e03a      	b.n	8006cb0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	3302      	adds	r3, #2
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	e007      	b.n	8006c68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	781a      	ldrb	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	3301      	adds	r3, #1
 8006c66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1cb      	bne.n	8006c18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2200      	movs	r2, #0
 8006c88:	2140      	movs	r1, #64	@ 0x40
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fbca 	bl	8007424 <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e006      	b.n	8006cb0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e000      	b.n	8006cb0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006cae:	2302      	movs	r3, #2
  }
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3720      	adds	r7, #32
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d112      	bne.n	8006cf8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_Receive_IT+0x26>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e00b      	b.n	8006cfa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	461a      	mov	r2, r3
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fbf1 	bl	80074d6 <UART_Start_Receive_IT>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	e000      	b.n	8006cfa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b0a0      	sub	sp, #128	@ 0x80
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006d1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d1c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8006d20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006d2a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006d2c:	667b      	str	r3, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006d30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3314      	adds	r3, #20
 8006d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d50:	f023 0301 	bic.w	r3, r3, #1
 8006d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006d5e:	657a      	str	r2, [r7, #84]	@ 0x54
 8006d60:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e5      	bne.n	8006d3e <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d119      	bne.n	8006dae <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	f023 0310 	bic.w	r3, r3, #16
 8006d90:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006da0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e5      	bne.n	8006d7a <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d036      	beq.n	8006e2a <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3314      	adds	r3, #20
 8006dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3314      	adds	r3, #20
 8006dda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d018      	beq.n	8006e2a <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fc f830 	bl	8002e6a <HAL_DMA_Abort>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00c      	beq.n	8006e2a <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fc f8e8 	bl	8002fea <HAL_DMA_GetError>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d104      	bne.n	8006e2a <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2210      	movs	r2, #16
 8006e24:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e052      	b.n	8006ed0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d036      	beq.n	8006ea6 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3314      	adds	r3, #20
 8006e56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e58:	61ba      	str	r2, [r7, #24]
 8006e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	613b      	str	r3, [r7, #16]
   return(result);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d018      	beq.n	8006ea6 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e78:	2200      	movs	r2, #0
 8006e7a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fb fff2 	bl	8002e6a <HAL_DMA_Abort>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00c      	beq.n	8006ea6 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fc f8aa 	bl	8002fea <HAL_DMA_GetError>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d104      	bne.n	8006ea6 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2210      	movs	r2, #16
 8006ea0:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e014      	b.n	8006ed0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3780      	adds	r7, #128	@ 0x80
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b0ba      	sub	sp, #232	@ 0xe8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10f      	bne.n	8006f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <HAL_UART_IRQHandler+0x66>
 8006f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fbe3 	bl	8007702 <UART_Receive_IT>
      return;
 8006f3c:	e25b      	b.n	80073f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80de 	beq.w	8007104 <HAL_UART_IRQHandler+0x22c>
 8006f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80d1 	beq.w	8007104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_UART_IRQHandler+0xae>
 8006f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7e:	f043 0201 	orr.w	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00b      	beq.n	8006faa <HAL_UART_IRQHandler+0xd2>
 8006f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	f043 0202 	orr.w	r2, r3, #2
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <HAL_UART_IRQHandler+0xf6>
 8006fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc6:	f043 0204 	orr.w	r2, r3, #4
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d011      	beq.n	8006ffe <HAL_UART_IRQHandler+0x126>
 8006fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d105      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff6:	f043 0208 	orr.w	r2, r3, #8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 81f2 	beq.w	80073ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_UART_IRQHandler+0x14e>
 8007014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fb6e 	bl	8007702 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d103      	bne.n	8007052 <HAL_UART_IRQHandler+0x17a>
 800704a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d04f      	beq.n	80070f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa78 	bl	8007548 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d041      	beq.n	80070ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3314      	adds	r3, #20
 800706c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800707c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800709e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1d9      	bne.n	8007066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d013      	beq.n	80070e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070be:	4a7e      	ldr	r2, [pc, #504]	@ (80072b8 <HAL_UART_IRQHandler+0x3e0>)
 80070c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fb ff0a 	bl	8002ee0 <HAL_DMA_Abort_IT>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d016      	beq.n	8007100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	e00e      	b.n	8007100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fa f8c2 	bl	800126c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e8:	e00a      	b.n	8007100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fa f8be 	bl	800126c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	e006      	b.n	8007100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fa f8ba 	bl	800126c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070fe:	e175      	b.n	80073ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	bf00      	nop
    return;
 8007102:	e173      	b.n	80073ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007108:	2b01      	cmp	r3, #1
 800710a:	f040 814f 	bne.w	80073ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007112:	f003 0310 	and.w	r3, r3, #16
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 8148 	beq.w	80073ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800711c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8141 	beq.w	80073ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800712a:	2300      	movs	r3, #0
 800712c:	60bb      	str	r3, [r7, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 80b6 	beq.w	80072bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800715c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8145 	beq.w	80073f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800716a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800716e:	429a      	cmp	r2, r3
 8007170:	f080 813e 	bcs.w	80073f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800717a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b20      	cmp	r3, #32
 8007184:	f000 8088 	beq.w	8007298 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	330c      	adds	r3, #12
 800718e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800719e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80071b4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1d9      	bne.n	8007188 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3314      	adds	r3, #20
 80071da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007200:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800720a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e1      	bne.n	80071d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3314      	adds	r3, #20
 8007216:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3314      	adds	r3, #20
 8007230:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007234:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007236:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800723a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e3      	bne.n	8007210 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007268:	f023 0310 	bic.w	r3, r3, #16
 800726c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	330c      	adds	r3, #12
 8007276:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800727a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800727c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e3      	bne.n	8007256 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007292:	4618      	mov	r0, r3
 8007294:	f7fb fde9 	bl	8002e6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f8ad 	bl	800740e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072b4:	e09c      	b.n	80073f0 <HAL_UART_IRQHandler+0x518>
 80072b6:	bf00      	nop
 80072b8:	0800760d 	.word	0x0800760d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 808e 	beq.w	80073f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 8089 	beq.w	80073f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	330c      	adds	r3, #12
 80072e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007306:	647a      	str	r2, [r7, #68]	@ 0x44
 8007308:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800730c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e3      	bne.n	80072e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3314      	adds	r3, #20
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	623b      	str	r3, [r7, #32]
   return(result);
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800733e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800734c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e3      	bne.n	800731a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0310 	bic.w	r3, r3, #16
 8007376:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	330c      	adds	r3, #12
 8007380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007384:	61fa      	str	r2, [r7, #28]
 8007386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	69b9      	ldr	r1, [r7, #24]
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	617b      	str	r3, [r7, #20]
   return(result);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e3      	bne.n	8007360 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800739e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f832 	bl	800740e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073aa:	e023      	b.n	80073f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d009      	beq.n	80073cc <HAL_UART_IRQHandler+0x4f4>
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f935 	bl	8007634 <UART_Transmit_IT>
    return;
 80073ca:	e014      	b.n	80073f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00e      	beq.n	80073f6 <HAL_UART_IRQHandler+0x51e>
 80073d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f974 	bl	80076d2 <UART_EndTransmit_IT>
    return;
 80073ea:	e004      	b.n	80073f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80073ec:	bf00      	nop
 80073ee:	e002      	b.n	80073f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073f0:	bf00      	nop
 80073f2:	e000      	b.n	80073f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073f4:	bf00      	nop
  }
}
 80073f6:	37e8      	adds	r7, #232	@ 0xe8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr

0800740e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	4613      	mov	r3, r2
 8007432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007434:	e03b      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d037      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743e:	f7fb f9b9 	bl	80027b4 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	6a3a      	ldr	r2, [r7, #32]
 800744a:	429a      	cmp	r2, r3
 800744c:	d302      	bcc.n	8007454 <UART_WaitOnFlagUntilTimeout+0x30>
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e03a      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d023      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b80      	cmp	r3, #128	@ 0x80
 800746a:	d020      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b40      	cmp	r3, #64	@ 0x40
 8007470:	d01d      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b08      	cmp	r3, #8
 800747e:	d116      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f856 	bl	8007548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2208      	movs	r2, #8
 80074a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e00f      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d0b4      	beq.n	8007436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	4613      	mov	r3, r2
 80074e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2222      	movs	r2, #34	@ 0x22
 8007500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800751a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695a      	ldr	r2, [r3, #20]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0220 	orr.w	r2, r2, #32
 800753a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007548:	b480      	push	{r7}
 800754a:	b095      	sub	sp, #84	@ 0x54
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	330c      	adds	r3, #12
 800756e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007570:	643a      	str	r2, [r7, #64]	@ 0x40
 8007572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800757e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e5      	bne.n	8007550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3314      	adds	r3, #20
 800758a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	61fb      	str	r3, [r7, #28]
   return(result);
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3314      	adds	r3, #20
 80075a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e5      	bne.n	8007584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d119      	bne.n	80075f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f023 0310 	bic.w	r3, r3, #16
 80075d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075e0:	61ba      	str	r2, [r7, #24]
 80075e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6979      	ldr	r1, [r7, #20]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	613b      	str	r3, [r7, #16]
   return(result);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e5      	bne.n	80075c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007602:	bf00      	nop
 8007604:	3754      	adds	r7, #84	@ 0x54
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7f9 fe20 	bl	800126c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800762c:	bf00      	nop
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b21      	cmp	r3, #33	@ 0x21
 8007646:	d13e      	bne.n	80076c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007650:	d114      	bne.n	800767c <UART_Transmit_IT+0x48>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d110      	bne.n	800767c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800766e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	1c9a      	adds	r2, r3, #2
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	621a      	str	r2, [r3, #32]
 800767a:	e008      	b.n	800768e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	1c59      	adds	r1, r3, #1
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6211      	str	r1, [r2, #32]
 8007686:	781a      	ldrb	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29b      	uxth	r3, r3
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	4619      	mov	r1, r3
 800769c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10f      	bne.n	80076c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	e000      	b.n	80076c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076c6:	2302      	movs	r3, #2
  }
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bc80      	pop	{r7}
 80076d0:	4770      	bx	lr

080076d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fe82 	bl	80073fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b08c      	sub	sp, #48	@ 0x30
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b22      	cmp	r3, #34	@ 0x22
 8007714:	f040 80ae 	bne.w	8007874 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007720:	d117      	bne.n	8007752 <UART_Receive_IT+0x50>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d113      	bne.n	8007752 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007740:	b29a      	uxth	r2, r3
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774a:	1c9a      	adds	r2, r3, #2
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007750:	e026      	b.n	80077a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007756:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007764:	d007      	beq.n	8007776 <UART_Receive_IT+0x74>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <UART_Receive_IT+0x82>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	e008      	b.n	8007796 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007790:	b2da      	uxtb	r2, r3
 8007792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007794:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4619      	mov	r1, r3
 80077ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d15d      	bne.n	8007870 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0220 	bic.w	r2, r2, #32
 80077c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	695a      	ldr	r2, [r3, #20]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d135      	bne.n	8007866 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	613b      	str	r3, [r7, #16]
   return(result);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f023 0310 	bic.w	r3, r3, #16
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007820:	623a      	str	r2, [r7, #32]
 8007822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	69f9      	ldr	r1, [r7, #28]
 8007826:	6a3a      	ldr	r2, [r7, #32]
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	61bb      	str	r3, [r7, #24]
   return(result);
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e5      	bne.n	8007800 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0310 	and.w	r3, r3, #16
 800783e:	2b10      	cmp	r3, #16
 8007840:	d10a      	bne.n	8007858 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fdd5 	bl	800740e <HAL_UARTEx_RxEventCallback>
 8007864:	e002      	b.n	800786c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7f9 fc92 	bl	8001190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	e002      	b.n	8007876 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	e000      	b.n	8007876 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3730      	adds	r7, #48	@ 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80078ba:	f023 030c 	bic.w	r3, r3, #12
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	430b      	orrs	r3, r1
 80078c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007994 <UART_SetConfig+0x114>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d103      	bne.n	80078f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80078e8:	f7fe f82c 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	e002      	b.n	80078f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80078f0:	f7fe f814 	bl	800591c <HAL_RCC_GetPCLK1Freq>
 80078f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	009a      	lsls	r2, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	4a22      	ldr	r2, [pc, #136]	@ (8007998 <UART_SetConfig+0x118>)
 800790e:	fba2 2303 	umull	r2, r3, r2, r3
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	0119      	lsls	r1, r3, #4
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009a      	lsls	r2, r3, #2
 8007920:	441a      	add	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	fbb2 f2f3 	udiv	r2, r2, r3
 800792c:	4b1a      	ldr	r3, [pc, #104]	@ (8007998 <UART_SetConfig+0x118>)
 800792e:	fba3 0302 	umull	r0, r3, r3, r2
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	2064      	movs	r0, #100	@ 0x64
 8007936:	fb00 f303 	mul.w	r3, r0, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	3332      	adds	r3, #50	@ 0x32
 8007940:	4a15      	ldr	r2, [pc, #84]	@ (8007998 <UART_SetConfig+0x118>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800794c:	4419      	add	r1, r3
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009a      	lsls	r2, r3, #2
 8007958:	441a      	add	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	fbb2 f2f3 	udiv	r2, r2, r3
 8007964:	4b0c      	ldr	r3, [pc, #48]	@ (8007998 <UART_SetConfig+0x118>)
 8007966:	fba3 0302 	umull	r0, r3, r3, r2
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	2064      	movs	r0, #100	@ 0x64
 800796e:	fb00 f303 	mul.w	r3, r0, r3
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	3332      	adds	r3, #50	@ 0x32
 8007978:	4a07      	ldr	r2, [pc, #28]	@ (8007998 <UART_SetConfig+0x118>)
 800797a:	fba2 2303 	umull	r2, r3, r2, r3
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	440a      	add	r2, r1
 800798a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40013800 	.word	0x40013800
 8007998:	51eb851f 	.word	0x51eb851f

0800799c <__NVIC_SetPriority>:
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db0a      	blt.n	80079c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	490c      	ldr	r1, [pc, #48]	@ (80079e8 <__NVIC_SetPriority+0x4c>)
 80079b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ba:	0112      	lsls	r2, r2, #4
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	440b      	add	r3, r1
 80079c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80079c4:	e00a      	b.n	80079dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	4908      	ldr	r1, [pc, #32]	@ (80079ec <__NVIC_SetPriority+0x50>)
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	3b04      	subs	r3, #4
 80079d4:	0112      	lsls	r2, r2, #4
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	440b      	add	r3, r1
 80079da:	761a      	strb	r2, [r3, #24]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	e000e100 	.word	0xe000e100
 80079ec:	e000ed00 	.word	0xe000ed00

080079f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079f4:	2100      	movs	r1, #0
 80079f6:	f06f 0004 	mvn.w	r0, #4
 80079fa:	f7ff ffcf 	bl	800799c <__NVIC_SetPriority>
#endif
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a0a:	f3ef 8305 	mrs	r3, IPSR
 8007a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a16:	f06f 0305 	mvn.w	r3, #5
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	e00c      	b.n	8007a38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <osKernelInitialize+0x40>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a26:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <osKernelInitialize+0x40>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	607b      	str	r3, [r7, #4]
 8007a30:	e002      	b.n	8007a38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a32:	f04f 33ff 	mov.w	r3, #4294967295
 8007a36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a38:	687b      	ldr	r3, [r7, #4]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr
 8007a44:	200005c4 	.word	0x200005c4

08007a48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a4e:	f3ef 8305 	mrs	r3, IPSR
 8007a52:	603b      	str	r3, [r7, #0]
  return(result);
 8007a54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a5a:	f06f 0305 	mvn.w	r3, #5
 8007a5e:	607b      	str	r3, [r7, #4]
 8007a60:	e010      	b.n	8007a84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a62:	4b0b      	ldr	r3, [pc, #44]	@ (8007a90 <osKernelStart+0x48>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d109      	bne.n	8007a7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a6a:	f7ff ffc1 	bl	80079f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a6e:	4b08      	ldr	r3, [pc, #32]	@ (8007a90 <osKernelStart+0x48>)
 8007a70:	2202      	movs	r2, #2
 8007a72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a74:	f001 f872 	bl	8008b5c <vTaskStartScheduler>
      stat = osOK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	607b      	str	r3, [r7, #4]
 8007a7c:	e002      	b.n	8007a84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a84:	687b      	ldr	r3, [r7, #4]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	200005c4 	.word	0x200005c4

08007a94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08e      	sub	sp, #56	@ 0x38
 8007a98:	af04      	add	r7, sp, #16
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa4:	f3ef 8305 	mrs	r3, IPSR
 8007aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8007aaa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d17e      	bne.n	8007bae <osThreadNew+0x11a>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d07b      	beq.n	8007bae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ab6:	2380      	movs	r3, #128	@ 0x80
 8007ab8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007aba:	2318      	movs	r3, #24
 8007abc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d045      	beq.n	8007b5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <osThreadNew+0x48>
        name = attr->name;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <osThreadNew+0x6e>
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b38      	cmp	r3, #56	@ 0x38
 8007af4:	d805      	bhi.n	8007b02 <osThreadNew+0x6e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <osThreadNew+0x72>
        return (NULL);
 8007b02:	2300      	movs	r3, #0
 8007b04:	e054      	b.n	8007bb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	089b      	lsrs	r3, r3, #2
 8007b14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00e      	beq.n	8007b3c <osThreadNew+0xa8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	2b5b      	cmp	r3, #91	@ 0x5b
 8007b24:	d90a      	bls.n	8007b3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <osThreadNew+0xa8>
        mem = 1;
 8007b36:	2301      	movs	r3, #1
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	e010      	b.n	8007b5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10c      	bne.n	8007b5e <osThreadNew+0xca>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d108      	bne.n	8007b5e <osThreadNew+0xca>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d104      	bne.n	8007b5e <osThreadNew+0xca>
          mem = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61bb      	str	r3, [r7, #24]
 8007b58:	e001      	b.n	8007b5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d110      	bne.n	8007b86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b6c:	9202      	str	r2, [sp, #8]
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6a3a      	ldr	r2, [r7, #32]
 8007b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fe12 	bl	80087a4 <xTaskCreateStatic>
 8007b80:	4603      	mov	r3, r0
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	e013      	b.n	8007bae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d110      	bne.n	8007bae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	f107 0310 	add.w	r3, r7, #16
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fe60 	bl	8008864 <xTaskCreate>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d001      	beq.n	8007bae <osThreadNew+0x11a>
            hTask = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bae:	693b      	ldr	r3, [r7, #16]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3728      	adds	r7, #40	@ 0x28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bc0:	f3ef 8305 	mrs	r3, IPSR
 8007bc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <osDelay+0x1c>
    stat = osErrorISR;
 8007bcc:	f06f 0305 	mvn.w	r3, #5
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e007      	b.n	8007be4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 ff86 	bl	8008af0 <vTaskDelay>
    }
  }

  return (stat);
 8007be4:	68fb      	ldr	r3, [r7, #12]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4a06      	ldr	r2, [pc, #24]	@ (8007c18 <vApplicationGetIdleTaskMemory+0x28>)
 8007c00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4a05      	ldr	r2, [pc, #20]	@ (8007c1c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2280      	movs	r2, #128	@ 0x80
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr
 8007c18:	200005c8 	.word	0x200005c8
 8007c1c:	20000624 	.word	0x20000624

08007c20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a07      	ldr	r2, [pc, #28]	@ (8007c4c <vApplicationGetTimerTaskMemory+0x2c>)
 8007c30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4a06      	ldr	r2, [pc, #24]	@ (8007c50 <vApplicationGetTimerTaskMemory+0x30>)
 8007c36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c3e:	601a      	str	r2, [r3, #0]
}
 8007c40:	bf00      	nop
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000824 	.word	0x20000824
 8007c50:	20000880 	.word	0x20000880

08007c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f103 0208 	add.w	r2, r3, #8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f103 0208 	add.w	r2, r3, #8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 0208 	add.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr

08007caa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	601a      	str	r2, [r3, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d103      	bne.n	8007d10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e00c      	b.n	8007d2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3308      	adds	r3, #8
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e002      	b.n	8007d1e <vListInsert+0x2e>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d2f6      	bcs.n	8007d18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6892      	ldr	r2, [r2, #8]
 8007d76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6852      	ldr	r2, [r2, #4]
 8007d80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d103      	bne.n	8007d94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	1e5a      	subs	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bc80      	pop	{r7}
 8007db0:	4770      	bx	lr
	...

08007db4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10b      	bne.n	8007de0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	e7fd      	b.n	8007ddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007de0:	f002 f834 	bl	8009e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	68f9      	ldr	r1, [r7, #12]
 8007dee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	441a      	add	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e10:	3b01      	subs	r3, #1
 8007e12:	68f9      	ldr	r1, [r7, #12]
 8007e14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	441a      	add	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	22ff      	movs	r2, #255	@ 0xff
 8007e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	22ff      	movs	r2, #255	@ 0xff
 8007e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d114      	bne.n	8007e60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01a      	beq.n	8007e74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3310      	adds	r3, #16
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 f916 	bl	8009074 <xTaskRemoveFromEventList>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d012      	beq.n	8007e74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <xQueueGenericReset+0xd0>)
 8007e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	e009      	b.n	8007e74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3310      	adds	r3, #16
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fef5 	bl	8007c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3324      	adds	r3, #36	@ 0x24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fef0 	bl	8007c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e74:	f002 f81a 	bl	8009eac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e78:	2301      	movs	r3, #1
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08e      	sub	sp, #56	@ 0x38
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <xQueueGenericCreateStatic+0x56>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <xQueueGenericCreateStatic+0x5a>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <xQueueGenericCreateStatic+0x5c>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10b      	bne.n	8007f00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	623b      	str	r3, [r7, #32]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <xQueueGenericCreateStatic+0x84>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <xQueueGenericCreateStatic+0x88>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <xQueueGenericCreateStatic+0x8a>
 8007f10:	2300      	movs	r3, #0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	61fb      	str	r3, [r7, #28]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f2e:	2350      	movs	r3, #80	@ 0x50
 8007f30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b50      	cmp	r3, #80	@ 0x50
 8007f36:	d00b      	beq.n	8007f50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	61bb      	str	r3, [r7, #24]
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	e7fd      	b.n	8007f4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f805 	bl	8007f82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3730      	adds	r7, #48	@ 0x30
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d103      	bne.n	8007f9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	e002      	b.n	8007fa4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	69b8      	ldr	r0, [r7, #24]
 8007fb4:	f7ff fefe 	bl	8007db4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fc0:	bf00      	nop
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08e      	sub	sp, #56	@ 0x38
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10b      	bne.n	8007ffc <xQueueGenericSend+0x34>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <xQueueGenericSend+0x42>
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <xQueueGenericSend+0x46>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <xQueueGenericSend+0x48>
 800800e:	2300      	movs	r3, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10b      	bne.n	800802c <xQueueGenericSend+0x64>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008026:	bf00      	nop
 8008028:	bf00      	nop
 800802a:	e7fd      	b.n	8008028 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d103      	bne.n	800803a <xQueueGenericSend+0x72>
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <xQueueGenericSend+0x76>
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <xQueueGenericSend+0x78>
 800803e:	2300      	movs	r3, #0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10b      	bne.n	800805c <xQueueGenericSend+0x94>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	623b      	str	r3, [r7, #32]
}
 8008056:	bf00      	nop
 8008058:	bf00      	nop
 800805a:	e7fd      	b.n	8008058 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800805c:	f001 f9ca 	bl	80093f4 <xTaskGetSchedulerState>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <xQueueGenericSend+0xa4>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <xQueueGenericSend+0xa8>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <xQueueGenericSend+0xaa>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10b      	bne.n	800808e <xQueueGenericSend+0xc6>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	61fb      	str	r3, [r7, #28]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800808e:	f001 fedd 	bl	8009e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <xQueueGenericSend+0xdc>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d129      	bne.n	80080f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080aa:	f000 fa0f 	bl	80084cc <prvCopyDataToQueue>
 80080ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d010      	beq.n	80080da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	3324      	adds	r3, #36	@ 0x24
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 ffd9 	bl	8009074 <xTaskRemoveFromEventList>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d013      	beq.n	80080f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080c8:	4b3f      	ldr	r3, [pc, #252]	@ (80081c8 <xQueueGenericSend+0x200>)
 80080ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	e00a      	b.n	80080f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080e0:	4b39      	ldr	r3, [pc, #228]	@ (80081c8 <xQueueGenericSend+0x200>)
 80080e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080f0:	f001 fedc 	bl	8009eac <vPortExitCritical>
				return pdPASS;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e063      	b.n	80081c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080fe:	f001 fed5 	bl	8009eac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008102:	2300      	movs	r3, #0
 8008104:	e05c      	b.n	80081c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800810c:	f107 0314 	add.w	r3, r7, #20
 8008110:	4618      	mov	r0, r3
 8008112:	f001 f813 	bl	800913c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008116:	2301      	movs	r3, #1
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800811a:	f001 fec7 	bl	8009eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800811e:	f000 fd85 	bl	8008c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008122:	f001 fe93 	bl	8009e4c <vPortEnterCritical>
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800812c:	b25b      	sxtb	r3, r3
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d103      	bne.n	800813c <xQueueGenericSend+0x174>
 8008134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008142:	b25b      	sxtb	r3, r3
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d103      	bne.n	8008152 <xQueueGenericSend+0x18a>
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008152:	f001 feab 	bl	8009eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008156:	1d3a      	adds	r2, r7, #4
 8008158:	f107 0314 	add.w	r3, r7, #20
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f001 f802 	bl	8009168 <xTaskCheckForTimeOut>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d124      	bne.n	80081b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800816a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800816c:	f000 faa6 	bl	80086bc <prvIsQueueFull>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d018      	beq.n	80081a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	3310      	adds	r3, #16
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f000 ff26 	bl	8008fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008186:	f000 fa31 	bl	80085ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800818a:	f000 fd5d 	bl	8008c48 <xTaskResumeAll>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	f47f af7c 	bne.w	800808e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008196:	4b0c      	ldr	r3, [pc, #48]	@ (80081c8 <xQueueGenericSend+0x200>)
 8008198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	e772      	b.n	800808e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081aa:	f000 fa1f 	bl	80085ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ae:	f000 fd4b 	bl	8008c48 <xTaskResumeAll>
 80081b2:	e76c      	b.n	800808e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081b6:	f000 fa19 	bl	80085ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ba:	f000 fd45 	bl	8008c48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3738      	adds	r7, #56	@ 0x38
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b090      	sub	sp, #64	@ 0x40
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10b      	bne.n	80081fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	e7fd      	b.n	80081f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <xQueueGenericSendFromISR+0x3e>
 8008202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <xQueueGenericSendFromISR+0x42>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <xQueueGenericSendFromISR+0x44>
 800820e:	2300      	movs	r3, #0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d103      	bne.n	800823a <xQueueGenericSendFromISR+0x6e>
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <xQueueGenericSendFromISR+0x72>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <xQueueGenericSendFromISR+0x74>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	623b      	str	r3, [r7, #32]
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800825c:	f001 feb8 	bl	8009fd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008260:	f3ef 8211 	mrs	r2, BASEPRI
 8008264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	61fa      	str	r2, [r7, #28]
 8008276:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008278:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800827a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800827c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008284:	429a      	cmp	r2, r3
 8008286:	d302      	bcc.n	800828e <xQueueGenericSendFromISR+0xc2>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d12f      	bne.n	80082ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008294:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082a4:	f000 f912 	bl	80084cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d112      	bne.n	80082d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d016      	beq.n	80082e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	3324      	adds	r3, #36	@ 0x24
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fed8 	bl	8009074 <xTaskRemoveFromEventList>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	e007      	b.n	80082e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80082dc:	3301      	adds	r3, #1
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	b25a      	sxtb	r2, r3
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80082e8:	2301      	movs	r3, #1
 80082ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80082ec:	e001      	b.n	80082f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008300:	4618      	mov	r0, r3
 8008302:	3740      	adds	r7, #64	@ 0x40
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08c      	sub	sp, #48	@ 0x30
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800831c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10b      	bne.n	800833a <xQueueReceive+0x32>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	623b      	str	r3, [r7, #32]
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	e7fd      	b.n	8008336 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <xQueueReceive+0x40>
 8008340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <xQueueReceive+0x44>
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <xQueueReceive+0x46>
 800834c:	2300      	movs	r3, #0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10b      	bne.n	800836a <xQueueReceive+0x62>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	61fb      	str	r3, [r7, #28]
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	e7fd      	b.n	8008366 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800836a:	f001 f843 	bl	80093f4 <xTaskGetSchedulerState>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <xQueueReceive+0x72>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <xQueueReceive+0x76>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueReceive+0x78>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10b      	bne.n	800839c <xQueueReceive+0x94>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61bb      	str	r3, [r7, #24]
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800839c:	f001 fd56 	bl	8009e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01f      	beq.n	80083ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b0:	f000 f8f6 	bl	80085a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	1e5a      	subs	r2, r3, #1
 80083b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00f      	beq.n	80083e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c6:	3310      	adds	r3, #16
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fe53 	bl	8009074 <xTaskRemoveFromEventList>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083d4:	4b3c      	ldr	r3, [pc, #240]	@ (80084c8 <xQueueReceive+0x1c0>)
 80083d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083e4:	f001 fd62 	bl	8009eac <vPortExitCritical>
				return pdPASS;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e069      	b.n	80084c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f2:	f001 fd5b 	bl	8009eac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e062      	b.n	80084c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008400:	f107 0310 	add.w	r3, r7, #16
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fe99 	bl	800913c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800840e:	f001 fd4d 	bl	8009eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008412:	f000 fc0b 	bl	8008c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008416:	f001 fd19 	bl	8009e4c <vPortEnterCritical>
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008420:	b25b      	sxtb	r3, r3
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d103      	bne.n	8008430 <xQueueReceive+0x128>
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008436:	b25b      	sxtb	r3, r3
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d103      	bne.n	8008446 <xQueueReceive+0x13e>
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008446:	f001 fd31 	bl	8009eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800844a:	1d3a      	adds	r2, r7, #4
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fe88 	bl	8009168 <xTaskCheckForTimeOut>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d123      	bne.n	80084a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800845e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008460:	f000 f916 	bl	8008690 <prvIsQueueEmpty>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d017      	beq.n	800849a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	3324      	adds	r3, #36	@ 0x24
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4611      	mov	r1, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fdac 	bl	8008fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008478:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800847a:	f000 f8b7 	bl	80085ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800847e:	f000 fbe3 	bl	8008c48 <xTaskResumeAll>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d189      	bne.n	800839c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008488:	4b0f      	ldr	r3, [pc, #60]	@ (80084c8 <xQueueReceive+0x1c0>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	e780      	b.n	800839c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800849a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800849c:	f000 f8a6 	bl	80085ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a0:	f000 fbd2 	bl	8008c48 <xTaskResumeAll>
 80084a4:	e77a      	b.n	800839c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a8:	f000 f8a0 	bl	80085ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ac:	f000 fbcc 	bl	8008c48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084b2:	f000 f8ed 	bl	8008690 <prvIsQueueEmpty>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f43f af6f 	beq.w	800839c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3730      	adds	r7, #48	@ 0x30
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10d      	bne.n	8008506 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d14d      	bne.n	800858e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 ff9a 	bl	8009430 <xTaskPriorityDisinherit>
 80084fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	609a      	str	r2, [r3, #8]
 8008504:	e043      	b.n	800858e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d119      	bne.n	8008540 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6858      	ldr	r0, [r3, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008514:	461a      	mov	r2, r3
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	f001 ffb2 	bl	800a480 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008524:	441a      	add	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	d32b      	bcc.n	800858e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	605a      	str	r2, [r3, #4]
 800853e:	e026      	b.n	800858e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	68d8      	ldr	r0, [r3, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008548:	461a      	mov	r2, r3
 800854a:	68b9      	ldr	r1, [r7, #8]
 800854c:	f001 ff98 	bl	800a480 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008558:	425b      	negs	r3, r3
 800855a:	441a      	add	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d207      	bcs.n	800857c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008574:	425b      	negs	r3, r3
 8008576:	441a      	add	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d105      	bne.n	800858e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	3b01      	subs	r3, #1
 800858c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008596:	697b      	ldr	r3, [r7, #20]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d018      	beq.n	80085e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ba:	441a      	add	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d303      	bcc.n	80085d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68d9      	ldr	r1, [r3, #12]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085dc:	461a      	mov	r2, r3
 80085de:	6838      	ldr	r0, [r7, #0]
 80085e0:	f001 ff4e 	bl	800a480 <memcpy>
	}
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085f4:	f001 fc2a 	bl	8009e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008600:	e011      	b.n	8008626 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d012      	beq.n	8008630 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3324      	adds	r3, #36	@ 0x24
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fd30 	bl	8009074 <xTaskRemoveFromEventList>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800861a:	f000 fe09 	bl	8009230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	3b01      	subs	r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dce9      	bgt.n	8008602 <prvUnlockQueue+0x16>
 800862e:	e000      	b.n	8008632 <prvUnlockQueue+0x46>
					break;
 8008630:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	22ff      	movs	r2, #255	@ 0xff
 8008636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800863a:	f001 fc37 	bl	8009eac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800863e:	f001 fc05 	bl	8009e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008648:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800864a:	e011      	b.n	8008670 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d012      	beq.n	800867a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3310      	adds	r3, #16
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fd0b 	bl	8009074 <xTaskRemoveFromEventList>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008664:	f000 fde4 	bl	8009230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	3b01      	subs	r3, #1
 800866c:	b2db      	uxtb	r3, r3
 800866e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dce9      	bgt.n	800864c <prvUnlockQueue+0x60>
 8008678:	e000      	b.n	800867c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800867a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	22ff      	movs	r2, #255	@ 0xff
 8008680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008684:	f001 fc12 	bl	8009eac <vPortExitCritical>
}
 8008688:	bf00      	nop
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008698:	f001 fbd8 	bl	8009e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d102      	bne.n	80086aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	e001      	b.n	80086ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086ae:	f001 fbfd 	bl	8009eac <vPortExitCritical>

	return xReturn;
 80086b2:	68fb      	ldr	r3, [r7, #12]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c4:	f001 fbc2 	bl	8009e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d102      	bne.n	80086da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e001      	b.n	80086de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086de:	f001 fbe5 	bl	8009eac <vPortExitCritical>

	return xReturn;
 80086e2:	68fb      	ldr	r3, [r7, #12]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	e014      	b.n	8008726 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086fc:	4a0e      	ldr	r2, [pc, #56]	@ (8008738 <vQueueAddToRegistry+0x4c>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10b      	bne.n	8008720 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008708:	490b      	ldr	r1, [pc, #44]	@ (8008738 <vQueueAddToRegistry+0x4c>)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008712:	4a09      	ldr	r2, [pc, #36]	@ (8008738 <vQueueAddToRegistry+0x4c>)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	4413      	add	r3, r2
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800871e:	e006      	b.n	800872e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b07      	cmp	r3, #7
 800872a:	d9e7      	bls.n	80086fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr
 8008738:	20000c80 	.word	0x20000c80

0800873c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800874c:	f001 fb7e 	bl	8009e4c <vPortEnterCritical>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008756:	b25b      	sxtb	r3, r3
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d103      	bne.n	8008766 <vQueueWaitForMessageRestricted+0x2a>
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800876c:	b25b      	sxtb	r3, r3
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d103      	bne.n	800877c <vQueueWaitForMessageRestricted+0x40>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800877c:	f001 fb96 	bl	8009eac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008784:	2b00      	cmp	r3, #0
 8008786:	d106      	bne.n	8008796 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	3324      	adds	r3, #36	@ 0x24
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fc43 	bl	800901c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008796:	6978      	ldr	r0, [r7, #20]
 8008798:	f7ff ff28 	bl	80085ec <prvUnlockQueue>
	}
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08e      	sub	sp, #56	@ 0x38
 80087a8:	af04      	add	r7, sp, #16
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10b      	bne.n	80087d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	623b      	str	r3, [r7, #32]
}
 80087ca:	bf00      	nop
 80087cc:	bf00      	nop
 80087ce:	e7fd      	b.n	80087cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	61fb      	str	r3, [r7, #28]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087ee:	235c      	movs	r3, #92	@ 0x5c
 80087f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80087f6:	d00b      	beq.n	8008810 <xTaskCreateStatic+0x6c>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	61bb      	str	r3, [r7, #24]
}
 800880a:	bf00      	nop
 800880c:	bf00      	nop
 800880e:	e7fd      	b.n	800880c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008810:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01e      	beq.n	8008856 <xTaskCreateStatic+0xb2>
 8008818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01b      	beq.n	8008856 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800881e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008820:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008826:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	2202      	movs	r2, #2
 800882c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008830:	2300      	movs	r3, #0
 8008832:	9303      	str	r3, [sp, #12]
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	9302      	str	r3, [sp, #8]
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f850 	bl	80088ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800884e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008850:	f000 f8de 	bl	8008a10 <prvAddNewTaskToReadyList>
 8008854:	e001      	b.n	800885a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800885a:	697b      	ldr	r3, [r7, #20]
	}
 800885c:	4618      	mov	r0, r3
 800885e:	3728      	adds	r7, #40	@ 0x28
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08c      	sub	sp, #48	@ 0x30
 8008868:	af04      	add	r7, sp, #16
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	4613      	mov	r3, r2
 8008872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008874:	88fb      	ldrh	r3, [r7, #6]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4618      	mov	r0, r3
 800887a:	f001 fbe9 	bl	800a050 <pvPortMalloc>
 800887e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00e      	beq.n	80088a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008886:	205c      	movs	r0, #92	@ 0x5c
 8008888:	f001 fbe2 	bl	800a050 <pvPortMalloc>
 800888c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	631a      	str	r2, [r3, #48]	@ 0x30
 800889a:	e005      	b.n	80088a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800889c:	6978      	ldr	r0, [r7, #20]
 800889e:	f001 fca5 	bl	800a1ec <vPortFree>
 80088a2:	e001      	b.n	80088a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d017      	beq.n	80088de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088b6:	88fa      	ldrh	r2, [r7, #6]
 80088b8:	2300      	movs	r3, #0
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	9302      	str	r3, [sp, #8]
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 f80e 	bl	80088ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088d2:	69f8      	ldr	r0, [r7, #28]
 80088d4:	f000 f89c 	bl	8008a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088d8:	2301      	movs	r3, #1
 80088da:	61bb      	str	r3, [r7, #24]
 80088dc:	e002      	b.n	80088e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088de:	f04f 33ff 	mov.w	r3, #4294967295
 80088e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088e4:	69bb      	ldr	r3, [r7, #24]
	}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b088      	sub	sp, #32
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	461a      	mov	r2, r3
 8008906:	21a5      	movs	r1, #165	@ 0xa5
 8008908:	f001 fd8e 	bl	800a428 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800890c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008916:	3b01      	subs	r3, #1
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f023 0307 	bic.w	r3, r3, #7
 8008924:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	617b      	str	r3, [r7, #20]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01f      	beq.n	800898e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800894e:	2300      	movs	r3, #0
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	e012      	b.n	800897a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	7819      	ldrb	r1, [r3, #0]
 800895c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	4413      	add	r3, r2
 8008962:	3334      	adds	r3, #52	@ 0x34
 8008964:	460a      	mov	r2, r1
 8008966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	4413      	add	r3, r2
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d006      	beq.n	8008982 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	3301      	adds	r3, #1
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	2b0f      	cmp	r3, #15
 800897e:	d9e9      	bls.n	8008954 <prvInitialiseNewTask+0x66>
 8008980:	e000      	b.n	8008984 <prvInitialiseNewTask+0x96>
			{
				break;
 8008982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800898c:	e003      	b.n	8008996 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	2b37      	cmp	r3, #55	@ 0x37
 800899a:	d901      	bls.n	80089a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800899c:	2337      	movs	r3, #55	@ 0x37
 800899e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	2200      	movs	r2, #0
 80089b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	3304      	adds	r3, #4
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff f96b 	bl	8007c92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	3318      	adds	r3, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff f966 	bl	8007c92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	2200      	movs	r2, #0
 80089e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	68f9      	ldr	r1, [r7, #12]
 80089ee:	69b8      	ldr	r0, [r7, #24]
 80089f0:	f001 f93a 	bl	8009c68 <pxPortInitialiseStack>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a06:	bf00      	nop
 8008a08:	3720      	adds	r7, #32
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a18:	f001 fa18 	bl	8009e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008ad4 <prvAddNewTaskToReadyList+0xc4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3301      	adds	r3, #1
 8008a22:	4a2c      	ldr	r2, [pc, #176]	@ (8008ad4 <prvAddNewTaskToReadyList+0xc4>)
 8008a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a26:	4b2c      	ldr	r3, [pc, #176]	@ (8008ad8 <prvAddNewTaskToReadyList+0xc8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ad8 <prvAddNewTaskToReadyList+0xc8>)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a34:	4b27      	ldr	r3, [pc, #156]	@ (8008ad4 <prvAddNewTaskToReadyList+0xc4>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d110      	bne.n	8008a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a3c:	f000 fc1c 	bl	8009278 <prvInitialiseTaskLists>
 8008a40:	e00d      	b.n	8008a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a42:	4b26      	ldr	r3, [pc, #152]	@ (8008adc <prvAddNewTaskToReadyList+0xcc>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d109      	bne.n	8008a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a4a:	4b23      	ldr	r3, [pc, #140]	@ (8008ad8 <prvAddNewTaskToReadyList+0xc8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d802      	bhi.n	8008a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a58:	4a1f      	ldr	r2, [pc, #124]	@ (8008ad8 <prvAddNewTaskToReadyList+0xc8>)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a5e:	4b20      	ldr	r3, [pc, #128]	@ (8008ae0 <prvAddNewTaskToReadyList+0xd0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3301      	adds	r3, #1
 8008a64:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae0 <prvAddNewTaskToReadyList+0xd0>)
 8008a66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae0 <prvAddNewTaskToReadyList+0xd0>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a74:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae4 <prvAddNewTaskToReadyList+0xd4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d903      	bls.n	8008a84 <prvAddNewTaskToReadyList+0x74>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a80:	4a18      	ldr	r2, [pc, #96]	@ (8008ae4 <prvAddNewTaskToReadyList+0xd4>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a15      	ldr	r2, [pc, #84]	@ (8008ae8 <prvAddNewTaskToReadyList+0xd8>)
 8008a92:	441a      	add	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7ff f905 	bl	8007caa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008aa0:	f001 fa04 	bl	8009eac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <prvAddNewTaskToReadyList+0xcc>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00e      	beq.n	8008aca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008aac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <prvAddNewTaskToReadyList+0xc8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d207      	bcs.n	8008aca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008aba:	4b0c      	ldr	r3, [pc, #48]	@ (8008aec <prvAddNewTaskToReadyList+0xdc>)
 8008abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20001194 	.word	0x20001194
 8008ad8:	20000cc0 	.word	0x20000cc0
 8008adc:	200011a0 	.word	0x200011a0
 8008ae0:	200011b0 	.word	0x200011b0
 8008ae4:	2000119c 	.word	0x2000119c
 8008ae8:	20000cc4 	.word	0x20000cc4
 8008aec:	e000ed04 	.word	0xe000ed04

08008af0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d018      	beq.n	8008b34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b02:	4b14      	ldr	r3, [pc, #80]	@ (8008b54 <vTaskDelay+0x64>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00b      	beq.n	8008b22 <vTaskDelay+0x32>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	60bb      	str	r3, [r7, #8]
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	e7fd      	b.n	8008b1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b22:	f000 f883 	bl	8008c2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b26:	2100      	movs	r1, #0
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fcf1 	bl	8009510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b2e:	f000 f88b 	bl	8008c48 <xTaskResumeAll>
 8008b32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d107      	bne.n	8008b4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008b3a:	4b07      	ldr	r3, [pc, #28]	@ (8008b58 <vTaskDelay+0x68>)
 8008b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	200011bc 	.word	0x200011bc
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	@ 0x28
 8008b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	1d39      	adds	r1, r7, #4
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff f83c 	bl	8007bf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	9202      	str	r2, [sp, #8]
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	2300      	movs	r3, #0
 8008b88:	460a      	mov	r2, r1
 8008b8a:	4922      	ldr	r1, [pc, #136]	@ (8008c14 <vTaskStartScheduler+0xb8>)
 8008b8c:	4822      	ldr	r0, [pc, #136]	@ (8008c18 <vTaskStartScheduler+0xbc>)
 8008b8e:	f7ff fe09 	bl	80087a4 <xTaskCreateStatic>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4a21      	ldr	r2, [pc, #132]	@ (8008c1c <vTaskStartScheduler+0xc0>)
 8008b96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b98:	4b20      	ldr	r3, [pc, #128]	@ (8008c1c <vTaskStartScheduler+0xc0>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e001      	b.n	8008baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d102      	bne.n	8008bb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bb0:	f000 fd02 	bl	80095b8 <xTimerCreateTimerTask>
 8008bb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d116      	bne.n	8008bea <vTaskStartScheduler+0x8e>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	613b      	str	r3, [r7, #16]
}
 8008bce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd0:	4b13      	ldr	r3, [pc, #76]	@ (8008c20 <vTaskStartScheduler+0xc4>)
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bd8:	4b12      	ldr	r3, [pc, #72]	@ (8008c24 <vTaskStartScheduler+0xc8>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bde:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <vTaskStartScheduler+0xcc>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008be4:	f001 f8c0 	bl	8009d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008be8:	e00f      	b.n	8008c0a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf0:	d10b      	bne.n	8008c0a <vTaskStartScheduler+0xae>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	60fb      	str	r3, [r7, #12]
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop
 8008c08:	e7fd      	b.n	8008c06 <vTaskStartScheduler+0xaa>
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	0800a4d4 	.word	0x0800a4d4
 8008c18:	08009249 	.word	0x08009249
 8008c1c:	200011b8 	.word	0x200011b8
 8008c20:	200011b4 	.word	0x200011b4
 8008c24:	200011a0 	.word	0x200011a0
 8008c28:	20001198 	.word	0x20001198

08008c2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c30:	4b04      	ldr	r3, [pc, #16]	@ (8008c44 <vTaskSuspendAll+0x18>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3301      	adds	r3, #1
 8008c36:	4a03      	ldr	r2, [pc, #12]	@ (8008c44 <vTaskSuspendAll+0x18>)
 8008c38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c3a:	bf00      	nop
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bc80      	pop	{r7}
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	200011bc 	.word	0x200011bc

08008c48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c56:	4b42      	ldr	r3, [pc, #264]	@ (8008d60 <xTaskResumeAll+0x118>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10b      	bne.n	8008c76 <xTaskResumeAll+0x2e>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	603b      	str	r3, [r7, #0]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c76:	f001 f8e9 	bl	8009e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c7a:	4b39      	ldr	r3, [pc, #228]	@ (8008d60 <xTaskResumeAll+0x118>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	4a37      	ldr	r2, [pc, #220]	@ (8008d60 <xTaskResumeAll+0x118>)
 8008c82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c84:	4b36      	ldr	r3, [pc, #216]	@ (8008d60 <xTaskResumeAll+0x118>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d162      	bne.n	8008d52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c8c:	4b35      	ldr	r3, [pc, #212]	@ (8008d64 <xTaskResumeAll+0x11c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d05e      	beq.n	8008d52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c94:	e02f      	b.n	8008cf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c96:	4b34      	ldr	r3, [pc, #208]	@ (8008d68 <xTaskResumeAll+0x120>)
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3318      	adds	r3, #24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff f85c 	bl	8007d60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7ff f857 	bl	8007d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8008d6c <xTaskResumeAll+0x124>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d903      	bls.n	8008cc6 <xTaskResumeAll+0x7e>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d6c <xTaskResumeAll+0x124>)
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4a27      	ldr	r2, [pc, #156]	@ (8008d70 <xTaskResumeAll+0x128>)
 8008cd4:	441a      	add	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fe ffe4 	bl	8007caa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce6:	4b23      	ldr	r3, [pc, #140]	@ (8008d74 <xTaskResumeAll+0x12c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d302      	bcc.n	8008cf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008cf0:	4b21      	ldr	r3, [pc, #132]	@ (8008d78 <xTaskResumeAll+0x130>)
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8008d68 <xTaskResumeAll+0x120>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1cb      	bne.n	8008c96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d04:	f000 fb56 	bl	80093b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d08:	4b1c      	ldr	r3, [pc, #112]	@ (8008d7c <xTaskResumeAll+0x134>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d010      	beq.n	8008d36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d14:	f000 f844 	bl	8008da0 <xTaskIncrementTick>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008d1e:	4b16      	ldr	r3, [pc, #88]	@ (8008d78 <xTaskResumeAll+0x130>)
 8008d20:	2201      	movs	r2, #1
 8008d22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1f1      	bne.n	8008d14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008d30:	4b12      	ldr	r3, [pc, #72]	@ (8008d7c <xTaskResumeAll+0x134>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d36:	4b10      	ldr	r3, [pc, #64]	@ (8008d78 <xTaskResumeAll+0x130>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d42:	4b0f      	ldr	r3, [pc, #60]	@ (8008d80 <xTaskResumeAll+0x138>)
 8008d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d52:	f001 f8ab 	bl	8009eac <vPortExitCritical>

	return xAlreadyYielded;
 8008d56:	68bb      	ldr	r3, [r7, #8]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	200011bc 	.word	0x200011bc
 8008d64:	20001194 	.word	0x20001194
 8008d68:	20001154 	.word	0x20001154
 8008d6c:	2000119c 	.word	0x2000119c
 8008d70:	20000cc4 	.word	0x20000cc4
 8008d74:	20000cc0 	.word	0x20000cc0
 8008d78:	200011a8 	.word	0x200011a8
 8008d7c:	200011a4 	.word	0x200011a4
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d8a:	4b04      	ldr	r3, [pc, #16]	@ (8008d9c <xTaskGetTickCount+0x18>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d90:	687b      	ldr	r3, [r7, #4]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr
 8008d9c:	20001198 	.word	0x20001198

08008da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008daa:	4b4f      	ldr	r3, [pc, #316]	@ (8008ee8 <xTaskIncrementTick+0x148>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f040 8090 	bne.w	8008ed4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008db4:	4b4d      	ldr	r3, [pc, #308]	@ (8008eec <xTaskIncrementTick+0x14c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8008eec <xTaskIncrementTick+0x14c>)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d121      	bne.n	8008e0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dc8:	4b49      	ldr	r3, [pc, #292]	@ (8008ef0 <xTaskIncrementTick+0x150>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <xTaskIncrementTick+0x4a>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	603b      	str	r3, [r7, #0]
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	e7fd      	b.n	8008de6 <xTaskIncrementTick+0x46>
 8008dea:	4b41      	ldr	r3, [pc, #260]	@ (8008ef0 <xTaskIncrementTick+0x150>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	4b40      	ldr	r3, [pc, #256]	@ (8008ef4 <xTaskIncrementTick+0x154>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ef0 <xTaskIncrementTick+0x150>)
 8008df6:	6013      	str	r3, [r2, #0]
 8008df8:	4a3e      	ldr	r2, [pc, #248]	@ (8008ef4 <xTaskIncrementTick+0x154>)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef8 <xTaskIncrementTick+0x158>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3301      	adds	r3, #1
 8008e04:	4a3c      	ldr	r2, [pc, #240]	@ (8008ef8 <xTaskIncrementTick+0x158>)
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	f000 fad4 	bl	80093b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8008efc <xTaskIncrementTick+0x15c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d349      	bcc.n	8008eaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e16:	4b36      	ldr	r3, [pc, #216]	@ (8008ef0 <xTaskIncrementTick+0x150>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e20:	4b36      	ldr	r3, [pc, #216]	@ (8008efc <xTaskIncrementTick+0x15c>)
 8008e22:	f04f 32ff 	mov.w	r2, #4294967295
 8008e26:	601a      	str	r2, [r3, #0]
					break;
 8008e28:	e03f      	b.n	8008eaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e2a:	4b31      	ldr	r3, [pc, #196]	@ (8008ef0 <xTaskIncrementTick+0x150>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d203      	bcs.n	8008e4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e42:	4a2e      	ldr	r2, [pc, #184]	@ (8008efc <xTaskIncrementTick+0x15c>)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e48:	e02f      	b.n	8008eaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe ff86 	bl	8007d60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d004      	beq.n	8008e66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	3318      	adds	r3, #24
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe ff7d 	bl	8007d60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e6a:	4b25      	ldr	r3, [pc, #148]	@ (8008f00 <xTaskIncrementTick+0x160>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d903      	bls.n	8008e7a <xTaskIncrementTick+0xda>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e76:	4a22      	ldr	r2, [pc, #136]	@ (8008f00 <xTaskIncrementTick+0x160>)
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4a1f      	ldr	r2, [pc, #124]	@ (8008f04 <xTaskIncrementTick+0x164>)
 8008e88:	441a      	add	r2, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f7fe ff0a 	bl	8007caa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f08 <xTaskIncrementTick+0x168>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d3b8      	bcc.n	8008e16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ea8:	e7b5      	b.n	8008e16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eaa:	4b17      	ldr	r3, [pc, #92]	@ (8008f08 <xTaskIncrementTick+0x168>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb0:	4914      	ldr	r1, [pc, #80]	@ (8008f04 <xTaskIncrementTick+0x164>)
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	440b      	add	r3, r1
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d901      	bls.n	8008ec6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ec6:	4b11      	ldr	r3, [pc, #68]	@ (8008f0c <xTaskIncrementTick+0x16c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d007      	beq.n	8008ede <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	e004      	b.n	8008ede <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8008f10 <xTaskIncrementTick+0x170>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	4a0d      	ldr	r2, [pc, #52]	@ (8008f10 <xTaskIncrementTick+0x170>)
 8008edc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ede:	697b      	ldr	r3, [r7, #20]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	200011bc 	.word	0x200011bc
 8008eec:	20001198 	.word	0x20001198
 8008ef0:	2000114c 	.word	0x2000114c
 8008ef4:	20001150 	.word	0x20001150
 8008ef8:	200011ac 	.word	0x200011ac
 8008efc:	200011b4 	.word	0x200011b4
 8008f00:	2000119c 	.word	0x2000119c
 8008f04:	20000cc4 	.word	0x20000cc4
 8008f08:	20000cc0 	.word	0x20000cc0
 8008f0c:	200011a8 	.word	0x200011a8
 8008f10:	200011a4 	.word	0x200011a4

08008f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f1a:	4b28      	ldr	r3, [pc, #160]	@ (8008fbc <vTaskSwitchContext+0xa8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f22:	4b27      	ldr	r3, [pc, #156]	@ (8008fc0 <vTaskSwitchContext+0xac>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f28:	e042      	b.n	8008fb0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008f2a:	4b25      	ldr	r3, [pc, #148]	@ (8008fc0 <vTaskSwitchContext+0xac>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f30:	4b24      	ldr	r3, [pc, #144]	@ (8008fc4 <vTaskSwitchContext+0xb0>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	e011      	b.n	8008f5c <vTaskSwitchContext+0x48>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10b      	bne.n	8008f56 <vTaskSwitchContext+0x42>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	607b      	str	r3, [r7, #4]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <vTaskSwitchContext+0x3e>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	491a      	ldr	r1, [pc, #104]	@ (8008fc8 <vTaskSwitchContext+0xb4>)
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0e3      	beq.n	8008f38 <vTaskSwitchContext+0x24>
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4a13      	ldr	r2, [pc, #76]	@ (8008fc8 <vTaskSwitchContext+0xb4>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60bb      	str	r3, [r7, #8]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	605a      	str	r2, [r3, #4]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	3308      	adds	r3, #8
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d104      	bne.n	8008fa0 <vTaskSwitchContext+0x8c>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	605a      	str	r2, [r3, #4]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	4a09      	ldr	r2, [pc, #36]	@ (8008fcc <vTaskSwitchContext+0xb8>)
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	4a06      	ldr	r2, [pc, #24]	@ (8008fc4 <vTaskSwitchContext+0xb0>)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6013      	str	r3, [r2, #0]
}
 8008fb0:	bf00      	nop
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	200011bc 	.word	0x200011bc
 8008fc0:	200011a8 	.word	0x200011a8
 8008fc4:	2000119c 	.word	0x2000119c
 8008fc8:	20000cc4 	.word	0x20000cc4
 8008fcc:	20000cc0 	.word	0x20000cc0

08008fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10b      	bne.n	8008ff8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	60fb      	str	r3, [r7, #12]
}
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
 8008ff6:	e7fd      	b.n	8008ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ff8:	4b07      	ldr	r3, [pc, #28]	@ (8009018 <vTaskPlaceOnEventList+0x48>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3318      	adds	r3, #24
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7fe fe75 	bl	8007cf0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009006:	2101      	movs	r1, #1
 8009008:	6838      	ldr	r0, [r7, #0]
 800900a:	f000 fa81 	bl	8009510 <prvAddCurrentTaskToDelayedList>
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000cc0 	.word	0x20000cc0

0800901c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	617b      	str	r3, [r7, #20]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009046:	4b0a      	ldr	r3, [pc, #40]	@ (8009070 <vTaskPlaceOnEventListRestricted+0x54>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3318      	adds	r3, #24
 800904c:	4619      	mov	r1, r3
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7fe fe2b 	bl	8007caa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800905a:	f04f 33ff 	mov.w	r3, #4294967295
 800905e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	68b8      	ldr	r0, [r7, #8]
 8009064:	f000 fa54 	bl	8009510 <prvAddCurrentTaskToDelayedList>
	}
 8009068:	bf00      	nop
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000cc0 	.word	0x20000cc0

08009074 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10b      	bne.n	80090a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	60fb      	str	r3, [r7, #12]
}
 800909c:	bf00      	nop
 800909e:	bf00      	nop
 80090a0:	e7fd      	b.n	800909e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	3318      	adds	r3, #24
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fe5a 	bl	8007d60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009124 <xTaskRemoveFromEventList+0xb0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11d      	bne.n	80090f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	3304      	adds	r3, #4
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fe51 	bl	8007d60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c2:	4b19      	ldr	r3, [pc, #100]	@ (8009128 <xTaskRemoveFromEventList+0xb4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d903      	bls.n	80090d2 <xTaskRemoveFromEventList+0x5e>
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	4a16      	ldr	r2, [pc, #88]	@ (8009128 <xTaskRemoveFromEventList+0xb4>)
 80090d0:	6013      	str	r3, [r2, #0]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4a13      	ldr	r2, [pc, #76]	@ (800912c <xTaskRemoveFromEventList+0xb8>)
 80090e0:	441a      	add	r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	3304      	adds	r3, #4
 80090e6:	4619      	mov	r1, r3
 80090e8:	4610      	mov	r0, r2
 80090ea:	f7fe fdde 	bl	8007caa <vListInsertEnd>
 80090ee:	e005      	b.n	80090fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	3318      	adds	r3, #24
 80090f4:	4619      	mov	r1, r3
 80090f6:	480e      	ldr	r0, [pc, #56]	@ (8009130 <xTaskRemoveFromEventList+0xbc>)
 80090f8:	f7fe fdd7 	bl	8007caa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009100:	4b0c      	ldr	r3, [pc, #48]	@ (8009134 <xTaskRemoveFromEventList+0xc0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009106:	429a      	cmp	r2, r3
 8009108:	d905      	bls.n	8009116 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800910a:	2301      	movs	r3, #1
 800910c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800910e:	4b0a      	ldr	r3, [pc, #40]	@ (8009138 <xTaskRemoveFromEventList+0xc4>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e001      	b.n	800911a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800911a:	697b      	ldr	r3, [r7, #20]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	200011bc 	.word	0x200011bc
 8009128:	2000119c 	.word	0x2000119c
 800912c:	20000cc4 	.word	0x20000cc4
 8009130:	20001154 	.word	0x20001154
 8009134:	20000cc0 	.word	0x20000cc0
 8009138:	200011a8 	.word	0x200011a8

0800913c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009144:	4b06      	ldr	r3, [pc, #24]	@ (8009160 <vTaskInternalSetTimeOutState+0x24>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <vTaskInternalSetTimeOutState+0x28>)
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	605a      	str	r2, [r3, #4]
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	200011ac 	.word	0x200011ac
 8009164:	20001198 	.word	0x20001198

08009168 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10b      	bne.n	8009190 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	613b      	str	r3, [r7, #16]
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	60fb      	str	r3, [r7, #12]
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	e7fd      	b.n	80091aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80091ae:	f000 fe4d 	bl	8009e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009228 <xTaskCheckForTimeOut+0xc0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ca:	d102      	bne.n	80091d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	e023      	b.n	800921a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4b15      	ldr	r3, [pc, #84]	@ (800922c <xTaskCheckForTimeOut+0xc4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d007      	beq.n	80091ee <xTaskCheckForTimeOut+0x86>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d302      	bcc.n	80091ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091e8:	2301      	movs	r3, #1
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	e015      	b.n	800921a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d20b      	bcs.n	8009210 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff ff99 	bl	800913c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800920a:	2300      	movs	r3, #0
 800920c:	61fb      	str	r3, [r7, #28]
 800920e:	e004      	b.n	800921a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009216:	2301      	movs	r3, #1
 8009218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800921a:	f000 fe47 	bl	8009eac <vPortExitCritical>

	return xReturn;
 800921e:	69fb      	ldr	r3, [r7, #28]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3720      	adds	r7, #32
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20001198 	.word	0x20001198
 800922c:	200011ac 	.word	0x200011ac

08009230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009234:	4b03      	ldr	r3, [pc, #12]	@ (8009244 <vTaskMissedYield+0x14>)
 8009236:	2201      	movs	r2, #1
 8009238:	601a      	str	r2, [r3, #0]
}
 800923a:	bf00      	nop
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	200011a8 	.word	0x200011a8

08009248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009250:	f000 f852 	bl	80092f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009254:	4b06      	ldr	r3, [pc, #24]	@ (8009270 <prvIdleTask+0x28>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d9f9      	bls.n	8009250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800925c:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <prvIdleTask+0x2c>)
 800925e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800926c:	e7f0      	b.n	8009250 <prvIdleTask+0x8>
 800926e:	bf00      	nop
 8009270:	20000cc4 	.word	0x20000cc4
 8009274:	e000ed04 	.word	0xe000ed04

08009278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800927e:	2300      	movs	r3, #0
 8009280:	607b      	str	r3, [r7, #4]
 8009282:	e00c      	b.n	800929e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4613      	mov	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4a12      	ldr	r2, [pc, #72]	@ (80092d8 <prvInitialiseTaskLists+0x60>)
 8009290:	4413      	add	r3, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fcde 	bl	8007c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3301      	adds	r3, #1
 800929c:	607b      	str	r3, [r7, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b37      	cmp	r3, #55	@ 0x37
 80092a2:	d9ef      	bls.n	8009284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092a4:	480d      	ldr	r0, [pc, #52]	@ (80092dc <prvInitialiseTaskLists+0x64>)
 80092a6:	f7fe fcd5 	bl	8007c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092aa:	480d      	ldr	r0, [pc, #52]	@ (80092e0 <prvInitialiseTaskLists+0x68>)
 80092ac:	f7fe fcd2 	bl	8007c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092b0:	480c      	ldr	r0, [pc, #48]	@ (80092e4 <prvInitialiseTaskLists+0x6c>)
 80092b2:	f7fe fccf 	bl	8007c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092b6:	480c      	ldr	r0, [pc, #48]	@ (80092e8 <prvInitialiseTaskLists+0x70>)
 80092b8:	f7fe fccc 	bl	8007c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092bc:	480b      	ldr	r0, [pc, #44]	@ (80092ec <prvInitialiseTaskLists+0x74>)
 80092be:	f7fe fcc9 	bl	8007c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092c2:	4b0b      	ldr	r3, [pc, #44]	@ (80092f0 <prvInitialiseTaskLists+0x78>)
 80092c4:	4a05      	ldr	r2, [pc, #20]	@ (80092dc <prvInitialiseTaskLists+0x64>)
 80092c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092c8:	4b0a      	ldr	r3, [pc, #40]	@ (80092f4 <prvInitialiseTaskLists+0x7c>)
 80092ca:	4a05      	ldr	r2, [pc, #20]	@ (80092e0 <prvInitialiseTaskLists+0x68>)
 80092cc:	601a      	str	r2, [r3, #0]
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000cc4 	.word	0x20000cc4
 80092dc:	20001124 	.word	0x20001124
 80092e0:	20001138 	.word	0x20001138
 80092e4:	20001154 	.word	0x20001154
 80092e8:	20001168 	.word	0x20001168
 80092ec:	20001180 	.word	0x20001180
 80092f0:	2000114c 	.word	0x2000114c
 80092f4:	20001150 	.word	0x20001150

080092f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092fe:	e019      	b.n	8009334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009300:	f000 fda4 	bl	8009e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009304:	4b10      	ldr	r3, [pc, #64]	@ (8009348 <prvCheckTasksWaitingTermination+0x50>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3304      	adds	r3, #4
 8009310:	4618      	mov	r0, r3
 8009312:	f7fe fd25 	bl	8007d60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009316:	4b0d      	ldr	r3, [pc, #52]	@ (800934c <prvCheckTasksWaitingTermination+0x54>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3b01      	subs	r3, #1
 800931c:	4a0b      	ldr	r2, [pc, #44]	@ (800934c <prvCheckTasksWaitingTermination+0x54>)
 800931e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009320:	4b0b      	ldr	r3, [pc, #44]	@ (8009350 <prvCheckTasksWaitingTermination+0x58>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3b01      	subs	r3, #1
 8009326:	4a0a      	ldr	r2, [pc, #40]	@ (8009350 <prvCheckTasksWaitingTermination+0x58>)
 8009328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800932a:	f000 fdbf 	bl	8009eac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f810 	bl	8009354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009334:	4b06      	ldr	r3, [pc, #24]	@ (8009350 <prvCheckTasksWaitingTermination+0x58>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e1      	bne.n	8009300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20001168 	.word	0x20001168
 800934c:	20001194 	.word	0x20001194
 8009350:	2000117c 	.word	0x2000117c

08009354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009362:	2b00      	cmp	r3, #0
 8009364:	d108      	bne.n	8009378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936a:	4618      	mov	r0, r3
 800936c:	f000 ff3e 	bl	800a1ec <vPortFree>
				vPortFree( pxTCB );
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 ff3b 	bl	800a1ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009376:	e019      	b.n	80093ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800937e:	2b01      	cmp	r3, #1
 8009380:	d103      	bne.n	800938a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 ff32 	bl	800a1ec <vPortFree>
	}
 8009388:	e010      	b.n	80093ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009390:	2b02      	cmp	r3, #2
 8009392:	d00b      	beq.n	80093ac <prvDeleteTCB+0x58>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	60fb      	str	r3, [r7, #12]
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	e7fd      	b.n	80093a8 <prvDeleteTCB+0x54>
	}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093ba:	4b0c      	ldr	r3, [pc, #48]	@ (80093ec <prvResetNextTaskUnblockTime+0x38>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d104      	bne.n	80093ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093c4:	4b0a      	ldr	r3, [pc, #40]	@ (80093f0 <prvResetNextTaskUnblockTime+0x3c>)
 80093c6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093cc:	e008      	b.n	80093e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ce:	4b07      	ldr	r3, [pc, #28]	@ (80093ec <prvResetNextTaskUnblockTime+0x38>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	4a04      	ldr	r2, [pc, #16]	@ (80093f0 <prvResetNextTaskUnblockTime+0x3c>)
 80093de:	6013      	str	r3, [r2, #0]
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	2000114c 	.word	0x2000114c
 80093f0:	200011b4 	.word	0x200011b4

080093f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <xTaskGetSchedulerState+0x34>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d102      	bne.n	8009408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009402:	2301      	movs	r3, #1
 8009404:	607b      	str	r3, [r7, #4]
 8009406:	e008      	b.n	800941a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009408:	4b08      	ldr	r3, [pc, #32]	@ (800942c <xTaskGetSchedulerState+0x38>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009410:	2302      	movs	r3, #2
 8009412:	607b      	str	r3, [r7, #4]
 8009414:	e001      	b.n	800941a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009416:	2300      	movs	r3, #0
 8009418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800941a:	687b      	ldr	r3, [r7, #4]
	}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	bc80      	pop	{r7}
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	200011a0 	.word	0x200011a0
 800942c:	200011bc 	.word	0x200011bc

08009430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800943c:	2300      	movs	r3, #0
 800943e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d058      	beq.n	80094f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009446:	4b2f      	ldr	r3, [pc, #188]	@ (8009504 <xTaskPriorityDisinherit+0xd4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	429a      	cmp	r2, r3
 800944e:	d00b      	beq.n	8009468 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	bf00      	nop
 8009466:	e7fd      	b.n	8009464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10b      	bne.n	8009488 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	60bb      	str	r3, [r7, #8]
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	e7fd      	b.n	8009484 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800948c:	1e5a      	subs	r2, r3, #1
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800949a:	429a      	cmp	r2, r3
 800949c:	d02c      	beq.n	80094f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d128      	bne.n	80094f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fc58 	bl	8007d60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009508 <xTaskPriorityDisinherit+0xd8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d903      	bls.n	80094d8 <xTaskPriorityDisinherit+0xa8>
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009508 <xTaskPriorityDisinherit+0xd8>)
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4a09      	ldr	r2, [pc, #36]	@ (800950c <xTaskPriorityDisinherit+0xdc>)
 80094e6:	441a      	add	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fe fbdb 	bl	8007caa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094f4:	2301      	movs	r3, #1
 80094f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094f8:	697b      	ldr	r3, [r7, #20]
	}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000cc0 	.word	0x20000cc0
 8009508:	2000119c 	.word	0x2000119c
 800950c:	20000cc4 	.word	0x20000cc4

08009510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800951a:	4b21      	ldr	r3, [pc, #132]	@ (80095a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009520:	4b20      	ldr	r3, [pc, #128]	@ (80095a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3304      	adds	r3, #4
 8009526:	4618      	mov	r0, r3
 8009528:	f7fe fc1a 	bl	8007d60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009532:	d10a      	bne.n	800954a <prvAddCurrentTaskToDelayedList+0x3a>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d007      	beq.n	800954a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800953a:	4b1a      	ldr	r3, [pc, #104]	@ (80095a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3304      	adds	r3, #4
 8009540:	4619      	mov	r1, r3
 8009542:	4819      	ldr	r0, [pc, #100]	@ (80095a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009544:	f7fe fbb1 	bl	8007caa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009548:	e026      	b.n	8009598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4413      	add	r3, r2
 8009550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009552:	4b14      	ldr	r3, [pc, #80]	@ (80095a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	429a      	cmp	r2, r3
 8009560:	d209      	bcs.n	8009576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009562:	4b12      	ldr	r3, [pc, #72]	@ (80095ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	4b0f      	ldr	r3, [pc, #60]	@ (80095a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3304      	adds	r3, #4
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7fe fbbe 	bl	8007cf0 <vListInsert>
}
 8009574:	e010      	b.n	8009598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009576:	4b0e      	ldr	r3, [pc, #56]	@ (80095b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b0a      	ldr	r3, [pc, #40]	@ (80095a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f7fe fbb4 	bl	8007cf0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009588:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	d202      	bcs.n	8009598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009592:	4a08      	ldr	r2, [pc, #32]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6013      	str	r3, [r2, #0]
}
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20001198 	.word	0x20001198
 80095a4:	20000cc0 	.word	0x20000cc0
 80095a8:	20001180 	.word	0x20001180
 80095ac:	20001150 	.word	0x20001150
 80095b0:	2000114c 	.word	0x2000114c
 80095b4:	200011b4 	.word	0x200011b4

080095b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	@ 0x28
 80095bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095c2:	f000 fb11 	bl	8009be8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095c6:	4b1d      	ldr	r3, [pc, #116]	@ (800963c <xTimerCreateTimerTask+0x84>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d021      	beq.n	8009612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095d6:	1d3a      	adds	r2, r7, #4
 80095d8:	f107 0108 	add.w	r1, r7, #8
 80095dc:	f107 030c 	add.w	r3, r7, #12
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fb1d 	bl	8007c20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	9202      	str	r2, [sp, #8]
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	2302      	movs	r3, #2
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2300      	movs	r3, #0
 80095f6:	460a      	mov	r2, r1
 80095f8:	4911      	ldr	r1, [pc, #68]	@ (8009640 <xTimerCreateTimerTask+0x88>)
 80095fa:	4812      	ldr	r0, [pc, #72]	@ (8009644 <xTimerCreateTimerTask+0x8c>)
 80095fc:	f7ff f8d2 	bl	80087a4 <xTaskCreateStatic>
 8009600:	4603      	mov	r3, r0
 8009602:	4a11      	ldr	r2, [pc, #68]	@ (8009648 <xTimerCreateTimerTask+0x90>)
 8009604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009606:	4b10      	ldr	r3, [pc, #64]	@ (8009648 <xTimerCreateTimerTask+0x90>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800960e:	2301      	movs	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10b      	bne.n	8009630 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	613b      	str	r3, [r7, #16]
}
 800962a:	bf00      	nop
 800962c:	bf00      	nop
 800962e:	e7fd      	b.n	800962c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009630:	697b      	ldr	r3, [r7, #20]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	200011f0 	.word	0x200011f0
 8009640:	0800a4dc 	.word	0x0800a4dc
 8009644:	08009785 	.word	0x08009785
 8009648:	200011f4 	.word	0x200011f4

0800964c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08a      	sub	sp, #40	@ 0x28
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800965a:	2300      	movs	r3, #0
 800965c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10b      	bne.n	800967c <xTimerGenericCommand+0x30>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	623b      	str	r3, [r7, #32]
}
 8009676:	bf00      	nop
 8009678:	bf00      	nop
 800967a:	e7fd      	b.n	8009678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800967c:	4b19      	ldr	r3, [pc, #100]	@ (80096e4 <xTimerGenericCommand+0x98>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d02a      	beq.n	80096da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b05      	cmp	r3, #5
 8009694:	dc18      	bgt.n	80096c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009696:	f7ff fead 	bl	80093f4 <xTaskGetSchedulerState>
 800969a:	4603      	mov	r3, r0
 800969c:	2b02      	cmp	r3, #2
 800969e:	d109      	bne.n	80096b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096a0:	4b10      	ldr	r3, [pc, #64]	@ (80096e4 <xTimerGenericCommand+0x98>)
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	f107 0110 	add.w	r1, r7, #16
 80096a8:	2300      	movs	r3, #0
 80096aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ac:	f7fe fc8c 	bl	8007fc8 <xQueueGenericSend>
 80096b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80096b2:	e012      	b.n	80096da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096b4:	4b0b      	ldr	r3, [pc, #44]	@ (80096e4 <xTimerGenericCommand+0x98>)
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	f107 0110 	add.w	r1, r7, #16
 80096bc:	2300      	movs	r3, #0
 80096be:	2200      	movs	r2, #0
 80096c0:	f7fe fc82 	bl	8007fc8 <xQueueGenericSend>
 80096c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80096c6:	e008      	b.n	80096da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096c8:	4b06      	ldr	r3, [pc, #24]	@ (80096e4 <xTimerGenericCommand+0x98>)
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	f107 0110 	add.w	r1, r7, #16
 80096d0:	2300      	movs	r3, #0
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	f7fe fd7a 	bl	80081cc <xQueueGenericSendFromISR>
 80096d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3728      	adds	r7, #40	@ 0x28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	200011f0 	.word	0x200011f0

080096e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af02      	add	r7, sp, #8
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f2:	4b23      	ldr	r3, [pc, #140]	@ (8009780 <prvProcessExpiredTimer+0x98>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	3304      	adds	r3, #4
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fb2d 	bl	8007d60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d023      	beq.n	800975c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	699a      	ldr	r2, [r3, #24]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	18d1      	adds	r1, r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	6978      	ldr	r0, [r7, #20]
 8009722:	f000 f8d3 	bl	80098cc <prvInsertTimerInActiveList>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d020      	beq.n	800976e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800972c:	2300      	movs	r3, #0
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	2300      	movs	r3, #0
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	2100      	movs	r1, #0
 8009736:	6978      	ldr	r0, [r7, #20]
 8009738:	f7ff ff88 	bl	800964c <xTimerGenericCommand>
 800973c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d114      	bne.n	800976e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	60fb      	str	r3, [r7, #12]
}
 8009756:	bf00      	nop
 8009758:	bf00      	nop
 800975a:	e7fd      	b.n	8009758 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009762:	f023 0301 	bic.w	r3, r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	6978      	ldr	r0, [r7, #20]
 8009774:	4798      	blx	r3
}
 8009776:	bf00      	nop
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	200011e8 	.word	0x200011e8

08009784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	4618      	mov	r0, r3
 8009792:	f000 f859 	bl	8009848 <prvGetNextExpireTime>
 8009796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f805 	bl	80097ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097a2:	f000 f8d5 	bl	8009950 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097a6:	bf00      	nop
 80097a8:	e7f0      	b.n	800978c <prvTimerTask+0x8>
	...

080097ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097b6:	f7ff fa39 	bl	8008c2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f864 	bl	800988c <prvSampleTimeNow>
 80097c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d130      	bne.n	800982e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <prvProcessTimerOrBlockTask+0x3c>
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d806      	bhi.n	80097e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097da:	f7ff fa35 	bl	8008c48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff81 	bl	80096e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097e6:	e024      	b.n	8009832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d008      	beq.n	8009800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097ee:	4b13      	ldr	r3, [pc, #76]	@ (800983c <prvProcessTimerOrBlockTask+0x90>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <prvProcessTimerOrBlockTask+0x50>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <prvProcessTimerOrBlockTask+0x52>
 80097fc:	2300      	movs	r3, #0
 80097fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009800:	4b0f      	ldr	r3, [pc, #60]	@ (8009840 <prvProcessTimerOrBlockTask+0x94>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4619      	mov	r1, r3
 800980e:	f7fe ff95 	bl	800873c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009812:	f7ff fa19 	bl	8008c48 <xTaskResumeAll>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800981c:	4b09      	ldr	r3, [pc, #36]	@ (8009844 <prvProcessTimerOrBlockTask+0x98>)
 800981e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	f3bf 8f6f 	isb	sy
}
 800982c:	e001      	b.n	8009832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800982e:	f7ff fa0b 	bl	8008c48 <xTaskResumeAll>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200011ec 	.word	0x200011ec
 8009840:	200011f0 	.word	0x200011f0
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009850:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <prvGetNextExpireTime+0x40>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <prvGetNextExpireTime+0x16>
 800985a:	2201      	movs	r2, #1
 800985c:	e000      	b.n	8009860 <prvGetNextExpireTime+0x18>
 800985e:	2200      	movs	r2, #0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d105      	bne.n	8009878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800986c:	4b06      	ldr	r3, [pc, #24]	@ (8009888 <prvGetNextExpireTime+0x40>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	e001      	b.n	800987c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800987c:	68fb      	ldr	r3, [r7, #12]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr
 8009888:	200011e8 	.word	0x200011e8

0800988c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009894:	f7ff fa76 	bl	8008d84 <xTaskGetTickCount>
 8009898:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800989a:	4b0b      	ldr	r3, [pc, #44]	@ (80098c8 <prvSampleTimeNow+0x3c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d205      	bcs.n	80098b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098a4:	f000 f93a 	bl	8009b1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	e002      	b.n	80098b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098b6:	4a04      	ldr	r2, [pc, #16]	@ (80098c8 <prvSampleTimeNow+0x3c>)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098bc:	68fb      	ldr	r3, [r7, #12]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200011f8 	.word	0x200011f8

080098cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098da:	2300      	movs	r3, #0
 80098dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d812      	bhi.n	8009918 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	1ad2      	subs	r2, r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d302      	bcc.n	8009906 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e01b      	b.n	800993e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009906:	4b10      	ldr	r3, [pc, #64]	@ (8009948 <prvInsertTimerInActiveList+0x7c>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3304      	adds	r3, #4
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f7fe f9ed 	bl	8007cf0 <vListInsert>
 8009916:	e012      	b.n	800993e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	429a      	cmp	r2, r3
 800991e:	d206      	bcs.n	800992e <prvInsertTimerInActiveList+0x62>
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	429a      	cmp	r2, r3
 8009926:	d302      	bcc.n	800992e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
 800992c:	e007      	b.n	800993e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800992e:	4b07      	ldr	r3, [pc, #28]	@ (800994c <prvInsertTimerInActiveList+0x80>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3304      	adds	r3, #4
 8009936:	4619      	mov	r1, r3
 8009938:	4610      	mov	r0, r2
 800993a:	f7fe f9d9 	bl	8007cf0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800993e:	697b      	ldr	r3, [r7, #20]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	200011ec 	.word	0x200011ec
 800994c:	200011e8 	.word	0x200011e8

08009950 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	@ 0x38
 8009954:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009956:	e0ce      	b.n	8009af6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	da19      	bge.n	8009992 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800995e:	1d3b      	adds	r3, r7, #4
 8009960:	3304      	adds	r3, #4
 8009962:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	61fb      	str	r3, [r7, #28]
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	e7fd      	b.n	800997e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009988:	6850      	ldr	r0, [r2, #4]
 800998a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800998c:	6892      	ldr	r2, [r2, #8]
 800998e:	4611      	mov	r1, r2
 8009990:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	f2c0 80ae 	blt.w	8009af6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	3304      	adds	r3, #4
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe f9d8 	bl	8007d60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099b0:	463b      	mov	r3, r7
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff ff6a 	bl	800988c <prvSampleTimeNow>
 80099b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b09      	cmp	r3, #9
 80099be:	f200 8097 	bhi.w	8009af0 <prvProcessReceivedCommands+0x1a0>
 80099c2:	a201      	add	r2, pc, #4	@ (adr r2, 80099c8 <prvProcessReceivedCommands+0x78>)
 80099c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c8:	080099f1 	.word	0x080099f1
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	080099f1 	.word	0x080099f1
 80099d4:	08009a67 	.word	0x08009a67
 80099d8:	08009a7b 	.word	0x08009a7b
 80099dc:	08009ac7 	.word	0x08009ac7
 80099e0:	080099f1 	.word	0x080099f1
 80099e4:	080099f1 	.word	0x080099f1
 80099e8:	08009a67 	.word	0x08009a67
 80099ec:	08009a7b 	.word	0x08009a7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	18d1      	adds	r1, r2, r3
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a10:	f7ff ff5c 	bl	80098cc <prvInsertTimerInActiveList>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d06c      	beq.n	8009af4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a28:	f003 0304 	and.w	r3, r3, #4
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d061      	beq.n	8009af4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	441a      	add	r2, r3
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a42:	f7ff fe03 	bl	800964c <xTimerGenericCommand>
 8009a46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d152      	bne.n	8009af4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	61bb      	str	r3, [r7, #24]
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	e7fd      	b.n	8009a62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a6c:	f023 0301 	bic.w	r3, r3, #1
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a78:	e03d      	b.n	8009af6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a80:	f043 0301 	orr.w	r3, r3, #1
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10b      	bne.n	8009ab2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	617b      	str	r3, [r7, #20]
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	e7fd      	b.n	8009aae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	18d1      	adds	r1, r2, r3
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ac0:	f7ff ff04 	bl	80098cc <prvInsertTimerInActiveList>
					break;
 8009ac4:	e017      	b.n	8009af6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009ad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ad6:	f000 fb89 	bl	800a1ec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ada:	e00c      	b.n	8009af6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ade:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ae2:	f023 0301 	bic.w	r3, r3, #1
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009aee:	e002      	b.n	8009af6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009af0:	bf00      	nop
 8009af2:	e000      	b.n	8009af6 <prvProcessReceivedCommands+0x1a6>
					break;
 8009af4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009af6:	4b08      	ldr	r3, [pc, #32]	@ (8009b18 <prvProcessReceivedCommands+0x1c8>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	1d39      	adds	r1, r7, #4
 8009afc:	2200      	movs	r2, #0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fc02 	bl	8008308 <xQueueReceive>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f47f af26 	bne.w	8009958 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b0c:	bf00      	nop
 8009b0e:	bf00      	nop
 8009b10:	3730      	adds	r7, #48	@ 0x30
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	200011f0 	.word	0x200011f0

08009b1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b22:	e049      	b.n	8009bb8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b24:	4b2e      	ldr	r3, [pc, #184]	@ (8009be0 <prvSwitchTimerLists+0xc4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8009be0 <prvSwitchTimerLists+0xc4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe f90f 	bl	8007d60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d02f      	beq.n	8009bb8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	4413      	add	r3, r2
 8009b60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d90e      	bls.n	8009b88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b76:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <prvSwitchTimerLists+0xc4>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4610      	mov	r0, r2
 8009b82:	f7fe f8b5 	bl	8007cf0 <vListInsert>
 8009b86:	e017      	b.n	8009bb8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	2100      	movs	r1, #0
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f7ff fd5a 	bl	800964c <xTimerGenericCommand>
 8009b98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10b      	bne.n	8009bb8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	603b      	str	r3, [r7, #0]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bb8:	4b09      	ldr	r3, [pc, #36]	@ (8009be0 <prvSwitchTimerLists+0xc4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1b0      	bne.n	8009b24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bc2:	4b07      	ldr	r3, [pc, #28]	@ (8009be0 <prvSwitchTimerLists+0xc4>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bc8:	4b06      	ldr	r3, [pc, #24]	@ (8009be4 <prvSwitchTimerLists+0xc8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a04      	ldr	r2, [pc, #16]	@ (8009be0 <prvSwitchTimerLists+0xc4>)
 8009bce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bd0:	4a04      	ldr	r2, [pc, #16]	@ (8009be4 <prvSwitchTimerLists+0xc8>)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6013      	str	r3, [r2, #0]
}
 8009bd6:	bf00      	nop
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	200011e8 	.word	0x200011e8
 8009be4:	200011ec 	.word	0x200011ec

08009be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bee:	f000 f92d 	bl	8009e4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bf2:	4b15      	ldr	r3, [pc, #84]	@ (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d120      	bne.n	8009c3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bfa:	4814      	ldr	r0, [pc, #80]	@ (8009c4c <prvCheckForValidListAndQueue+0x64>)
 8009bfc:	f7fe f82a 	bl	8007c54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c00:	4813      	ldr	r0, [pc, #76]	@ (8009c50 <prvCheckForValidListAndQueue+0x68>)
 8009c02:	f7fe f827 	bl	8007c54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c06:	4b13      	ldr	r3, [pc, #76]	@ (8009c54 <prvCheckForValidListAndQueue+0x6c>)
 8009c08:	4a10      	ldr	r2, [pc, #64]	@ (8009c4c <prvCheckForValidListAndQueue+0x64>)
 8009c0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c0c:	4b12      	ldr	r3, [pc, #72]	@ (8009c58 <prvCheckForValidListAndQueue+0x70>)
 8009c0e:	4a10      	ldr	r2, [pc, #64]	@ (8009c50 <prvCheckForValidListAndQueue+0x68>)
 8009c10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c12:	2300      	movs	r3, #0
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	4b11      	ldr	r3, [pc, #68]	@ (8009c5c <prvCheckForValidListAndQueue+0x74>)
 8009c18:	4a11      	ldr	r2, [pc, #68]	@ (8009c60 <prvCheckForValidListAndQueue+0x78>)
 8009c1a:	2110      	movs	r1, #16
 8009c1c:	200a      	movs	r0, #10
 8009c1e:	f7fe f933 	bl	8007e88 <xQueueGenericCreateStatic>
 8009c22:	4603      	mov	r3, r0
 8009c24:	4a08      	ldr	r2, [pc, #32]	@ (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009c26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c28:	4b07      	ldr	r3, [pc, #28]	@ (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d005      	beq.n	8009c3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c30:	4b05      	ldr	r3, [pc, #20]	@ (8009c48 <prvCheckForValidListAndQueue+0x60>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	490b      	ldr	r1, [pc, #44]	@ (8009c64 <prvCheckForValidListAndQueue+0x7c>)
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fd58 	bl	80086ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c3c:	f000 f936 	bl	8009eac <vPortExitCritical>
}
 8009c40:	bf00      	nop
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	200011f0 	.word	0x200011f0
 8009c4c:	200011c0 	.word	0x200011c0
 8009c50:	200011d4 	.word	0x200011d4
 8009c54:	200011e8 	.word	0x200011e8
 8009c58:	200011ec 	.word	0x200011ec
 8009c5c:	2000129c 	.word	0x2000129c
 8009c60:	200011fc 	.word	0x200011fc
 8009c64:	0800a4e4 	.word	0x0800a4e4

08009c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3b04      	subs	r3, #4
 8009c78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3b04      	subs	r3, #4
 8009c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f023 0201 	bic.w	r2, r3, #1
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3b04      	subs	r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c98:	4a08      	ldr	r2, [pc, #32]	@ (8009cbc <pxPortInitialiseStack+0x54>)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3b14      	subs	r3, #20
 8009ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3b20      	subs	r3, #32
 8009cae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr
 8009cbc:	08009cc1 	.word	0x08009cc1

08009cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cca:	4b12      	ldr	r3, [pc, #72]	@ (8009d14 <prvTaskExitError+0x54>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d00b      	beq.n	8009cec <prvTaskExitError+0x2c>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	60fb      	str	r3, [r7, #12]
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	e7fd      	b.n	8009ce8 <prvTaskExitError+0x28>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	60bb      	str	r3, [r7, #8]
}
 8009cfe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d00:	bf00      	nop
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0fc      	beq.n	8009d02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d08:	bf00      	nop
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr
 8009d14:	20000010 	.word	0x20000010
	...

08009d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d20:	4b07      	ldr	r3, [pc, #28]	@ (8009d40 <pxCurrentTCBConst2>)
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	6808      	ldr	r0, [r1, #0]
 8009d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d2a:	f380 8809 	msr	PSP, r0
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f04f 0000 	mov.w	r0, #0
 8009d36:	f380 8811 	msr	BASEPRI, r0
 8009d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009d3e:	4770      	bx	lr

08009d40 <pxCurrentTCBConst2>:
 8009d40:	20000cc0 	.word	0x20000cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop

08009d48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009d48:	4806      	ldr	r0, [pc, #24]	@ (8009d64 <prvPortStartFirstTask+0x1c>)
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	6800      	ldr	r0, [r0, #0]
 8009d4e:	f380 8808 	msr	MSP, r0
 8009d52:	b662      	cpsie	i
 8009d54:	b661      	cpsie	f
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	df00      	svc	0
 8009d60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d62:	bf00      	nop
 8009d64:	e000ed08 	.word	0xe000ed08

08009d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d6e:	4b32      	ldr	r3, [pc, #200]	@ (8009e38 <xPortStartScheduler+0xd0>)
 8009d70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	22ff      	movs	r2, #255	@ 0xff
 8009d7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	4b2a      	ldr	r3, [pc, #168]	@ (8009e3c <xPortStartScheduler+0xd4>)
 8009d94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d96:	4b2a      	ldr	r3, [pc, #168]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009d98:	2207      	movs	r2, #7
 8009d9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d9c:	e009      	b.n	8009db2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009d9e:	4b28      	ldr	r3, [pc, #160]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	4a26      	ldr	r2, [pc, #152]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009da6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dba:	2b80      	cmp	r3, #128	@ 0x80
 8009dbc:	d0ef      	beq.n	8009d9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009dbe:	4b20      	ldr	r3, [pc, #128]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f1c3 0307 	rsb	r3, r3, #7
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d00b      	beq.n	8009de2 <xPortStartScheduler+0x7a>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	60bb      	str	r3, [r7, #8]
}
 8009ddc:	bf00      	nop
 8009dde:	bf00      	nop
 8009de0:	e7fd      	b.n	8009dde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009de2:	4b17      	ldr	r3, [pc, #92]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	4a15      	ldr	r2, [pc, #84]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009dea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009dec:	4b14      	ldr	r3, [pc, #80]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009df4:	4a12      	ldr	r2, [pc, #72]	@ (8009e40 <xPortStartScheduler+0xd8>)
 8009df6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e00:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <xPortStartScheduler+0xdc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a0f      	ldr	r2, [pc, #60]	@ (8009e44 <xPortStartScheduler+0xdc>)
 8009e06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e44 <xPortStartScheduler+0xdc>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a0c      	ldr	r2, [pc, #48]	@ (8009e44 <xPortStartScheduler+0xdc>)
 8009e12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e18:	f000 f8b8 	bl	8009f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e48 <xPortStartScheduler+0xe0>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e22:	f7ff ff91 	bl	8009d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e26:	f7ff f875 	bl	8008f14 <vTaskSwitchContext>
	prvTaskExitError();
 8009e2a:	f7ff ff49 	bl	8009cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	e000e400 	.word	0xe000e400
 8009e3c:	200012ec 	.word	0x200012ec
 8009e40:	200012f0 	.word	0x200012f0
 8009e44:	e000ed20 	.word	0xe000ed20
 8009e48:	20000010 	.word	0x20000010

08009e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	607b      	str	r3, [r7, #4]
}
 8009e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea4 <vPortEnterCritical+0x58>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8009ea4 <vPortEnterCritical+0x58>)
 8009e6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e70:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea4 <vPortEnterCritical+0x58>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d110      	bne.n	8009e9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e78:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea8 <vPortEnterCritical+0x5c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00b      	beq.n	8009e9a <vPortEnterCritical+0x4e>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	603b      	str	r3, [r7, #0]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <vPortEnterCritical+0x4a>
	}
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr
 8009ea4:	20000010 	.word	0x20000010
 8009ea8:	e000ed04 	.word	0xe000ed04

08009eac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eb2:	4b12      	ldr	r3, [pc, #72]	@ (8009efc <vPortExitCritical+0x50>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <vPortExitCritical+0x26>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	607b      	str	r3, [r7, #4]
}
 8009ecc:	bf00      	nop
 8009ece:	bf00      	nop
 8009ed0:	e7fd      	b.n	8009ece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8009efc <vPortExitCritical+0x50>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	4a08      	ldr	r2, [pc, #32]	@ (8009efc <vPortExitCritical+0x50>)
 8009eda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009edc:	4b07      	ldr	r3, [pc, #28]	@ (8009efc <vPortExitCritical+0x50>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d105      	bne.n	8009ef0 <vPortExitCritical+0x44>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	f383 8811 	msr	BASEPRI, r3
}
 8009eee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bc80      	pop	{r7}
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	20000010 	.word	0x20000010

08009f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f00:	f3ef 8009 	mrs	r0, PSP
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	4b0d      	ldr	r3, [pc, #52]	@ (8009f40 <pxCurrentTCBConst>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f10:	6010      	str	r0, [r2, #0]
 8009f12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009f16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009f1a:	f380 8811 	msr	BASEPRI, r0
 8009f1e:	f7fe fff9 	bl	8008f14 <vTaskSwitchContext>
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8811 	msr	BASEPRI, r0
 8009f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009f2e:	6819      	ldr	r1, [r3, #0]
 8009f30:	6808      	ldr	r0, [r1, #0]
 8009f32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f36:	f380 8809 	msr	PSP, r0
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	4770      	bx	lr

08009f40 <pxCurrentTCBConst>:
 8009f40:	20000cc0 	.word	0x20000cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop

08009f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f62:	f7fe ff1d 	bl	8008da0 <xTaskIncrementTick>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f6c:	4b06      	ldr	r3, [pc, #24]	@ (8009f88 <xPortSysTickHandler+0x40>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	2300      	movs	r3, #0
 8009f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f383 8811 	msr	BASEPRI, r3
}
 8009f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f90:	4b0a      	ldr	r3, [pc, #40]	@ (8009fbc <vPortSetupTimerInterrupt+0x30>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f96:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f9c:	4b09      	ldr	r3, [pc, #36]	@ (8009fc4 <vPortSetupTimerInterrupt+0x38>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a09      	ldr	r2, [pc, #36]	@ (8009fc8 <vPortSetupTimerInterrupt+0x3c>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	099b      	lsrs	r3, r3, #6
 8009fa8:	4a08      	ldr	r2, [pc, #32]	@ (8009fcc <vPortSetupTimerInterrupt+0x40>)
 8009faa:	3b01      	subs	r3, #1
 8009fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fae:	4b03      	ldr	r3, [pc, #12]	@ (8009fbc <vPortSetupTimerInterrupt+0x30>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	601a      	str	r2, [r3, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bc80      	pop	{r7}
 8009fba:	4770      	bx	lr
 8009fbc:	e000e010 	.word	0xe000e010
 8009fc0:	e000e018 	.word	0xe000e018
 8009fc4:	20000004 	.word	0x20000004
 8009fc8:	10624dd3 	.word	0x10624dd3
 8009fcc:	e000e014 	.word	0xe000e014

08009fd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fd6:	f3ef 8305 	mrs	r3, IPSR
 8009fda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b0f      	cmp	r3, #15
 8009fe0:	d915      	bls.n	800a00e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fe2:	4a17      	ldr	r2, [pc, #92]	@ (800a040 <vPortValidateInterruptPriority+0x70>)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fec:	4b15      	ldr	r3, [pc, #84]	@ (800a044 <vPortValidateInterruptPriority+0x74>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	7afa      	ldrb	r2, [r7, #11]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d20b      	bcs.n	800a00e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	607b      	str	r3, [r7, #4]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a00e:	4b0e      	ldr	r3, [pc, #56]	@ (800a048 <vPortValidateInterruptPriority+0x78>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a016:	4b0d      	ldr	r3, [pc, #52]	@ (800a04c <vPortValidateInterruptPriority+0x7c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d90b      	bls.n	800a036 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	603b      	str	r3, [r7, #0]
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	e7fd      	b.n	800a032 <vPortValidateInterruptPriority+0x62>
	}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bc80      	pop	{r7}
 800a03e:	4770      	bx	lr
 800a040:	e000e3f0 	.word	0xe000e3f0
 800a044:	200012ec 	.word	0x200012ec
 800a048:	e000ed0c 	.word	0xe000ed0c
 800a04c:	200012f0 	.word	0x200012f0

0800a050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	@ 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a05c:	f7fe fde6 	bl	8008c2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a060:	4b5c      	ldr	r3, [pc, #368]	@ (800a1d4 <pvPortMalloc+0x184>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a068:	f000 f924 	bl	800a2b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a06c:	4b5a      	ldr	r3, [pc, #360]	@ (800a1d8 <pvPortMalloc+0x188>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	f040 8095 	bne.w	800a1a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01e      	beq.n	800a0be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a080:	2208      	movs	r2, #8
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4413      	add	r3, r2
 800a086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f003 0307 	and.w	r3, r3, #7
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d015      	beq.n	800a0be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f023 0307 	bic.w	r3, r3, #7
 800a098:	3308      	adds	r3, #8
 800a09a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f003 0307 	and.w	r3, r3, #7
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <pvPortMalloc+0x6e>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	617b      	str	r3, [r7, #20]
}
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	e7fd      	b.n	800a0ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d06f      	beq.n	800a1a4 <pvPortMalloc+0x154>
 800a0c4:	4b45      	ldr	r3, [pc, #276]	@ (800a1dc <pvPortMalloc+0x18c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d86a      	bhi.n	800a1a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0ce:	4b44      	ldr	r3, [pc, #272]	@ (800a1e0 <pvPortMalloc+0x190>)
 800a0d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0d2:	4b43      	ldr	r3, [pc, #268]	@ (800a1e0 <pvPortMalloc+0x190>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0d8:	e004      	b.n	800a0e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d903      	bls.n	800a0f6 <pvPortMalloc+0xa6>
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f1      	bne.n	800a0da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0f6:	4b37      	ldr	r3, [pc, #220]	@ (800a1d4 <pvPortMalloc+0x184>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d051      	beq.n	800a1a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2208      	movs	r2, #8
 800a106:	4413      	add	r3, r2
 800a108:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	1ad2      	subs	r2, r2, r3
 800a11a:	2308      	movs	r3, #8
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	429a      	cmp	r2, r3
 800a120:	d920      	bls.n	800a164 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4413      	add	r3, r2
 800a128:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <pvPortMalloc+0xfc>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	613b      	str	r3, [r7, #16]
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a15e:	69b8      	ldr	r0, [r7, #24]
 800a160:	f000 f90a 	bl	800a378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a164:	4b1d      	ldr	r3, [pc, #116]	@ (800a1dc <pvPortMalloc+0x18c>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1dc <pvPortMalloc+0x18c>)
 800a170:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a172:	4b1a      	ldr	r3, [pc, #104]	@ (800a1dc <pvPortMalloc+0x18c>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e4 <pvPortMalloc+0x194>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d203      	bcs.n	800a186 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a17e:	4b17      	ldr	r3, [pc, #92]	@ (800a1dc <pvPortMalloc+0x18c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a18      	ldr	r2, [pc, #96]	@ (800a1e4 <pvPortMalloc+0x194>)
 800a184:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	4b13      	ldr	r3, [pc, #76]	@ (800a1d8 <pvPortMalloc+0x188>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	431a      	orrs	r2, r3
 800a190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a192:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a19a:	4b13      	ldr	r3, [pc, #76]	@ (800a1e8 <pvPortMalloc+0x198>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	4a11      	ldr	r2, [pc, #68]	@ (800a1e8 <pvPortMalloc+0x198>)
 800a1a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1a4:	f7fe fd50 	bl	8008c48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00b      	beq.n	800a1ca <pvPortMalloc+0x17a>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	60fb      	str	r3, [r7, #12]
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <pvPortMalloc+0x176>
	return pvReturn;
 800a1ca:	69fb      	ldr	r3, [r7, #28]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3728      	adds	r7, #40	@ 0x28
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20001efc 	.word	0x20001efc
 800a1d8:	20001f10 	.word	0x20001f10
 800a1dc:	20001f00 	.word	0x20001f00
 800a1e0:	20001ef4 	.word	0x20001ef4
 800a1e4:	20001f04 	.word	0x20001f04
 800a1e8:	20001f08 	.word	0x20001f08

0800a1ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04f      	beq.n	800a29e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1fe:	2308      	movs	r3, #8
 800a200:	425b      	negs	r3, r3
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	4413      	add	r3, r2
 800a206:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	4b25      	ldr	r3, [pc, #148]	@ (800a2a8 <vPortFree+0xbc>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4013      	ands	r3, r2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10b      	bne.n	800a232 <vPortFree+0x46>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	60fb      	str	r3, [r7, #12]
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	e7fd      	b.n	800a22e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <vPortFree+0x66>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	60bb      	str	r3, [r7, #8]
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	e7fd      	b.n	800a24e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	4b14      	ldr	r3, [pc, #80]	@ (800a2a8 <vPortFree+0xbc>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4013      	ands	r3, r2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d01e      	beq.n	800a29e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d11a      	bne.n	800a29e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a8 <vPortFree+0xbc>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	43db      	mvns	r3, r3
 800a272:	401a      	ands	r2, r3
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a278:	f7fe fcd8 	bl	8008c2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ac <vPortFree+0xc0>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4413      	add	r3, r2
 800a286:	4a09      	ldr	r2, [pc, #36]	@ (800a2ac <vPortFree+0xc0>)
 800a288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a28a:	6938      	ldr	r0, [r7, #16]
 800a28c:	f000 f874 	bl	800a378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a290:	4b07      	ldr	r3, [pc, #28]	@ (800a2b0 <vPortFree+0xc4>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3301      	adds	r3, #1
 800a296:	4a06      	ldr	r2, [pc, #24]	@ (800a2b0 <vPortFree+0xc4>)
 800a298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a29a:	f7fe fcd5 	bl	8008c48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a29e:	bf00      	nop
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20001f10 	.word	0x20001f10
 800a2ac:	20001f00 	.word	0x20001f00
 800a2b0:	20001f0c 	.word	0x20001f0c

0800a2b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a2be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2c0:	4b27      	ldr	r3, [pc, #156]	@ (800a360 <prvHeapInit+0xac>)
 800a2c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00c      	beq.n	800a2e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3307      	adds	r3, #7
 800a2d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0307 	bic.w	r3, r3, #7
 800a2da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a360 <prvHeapInit+0xac>)
 800a2e4:	4413      	add	r3, r2
 800a2e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a364 <prvHeapInit+0xb0>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a364 <prvHeapInit+0xb0>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a300:	2208      	movs	r2, #8
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	1a9b      	subs	r3, r3, r2
 800a306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0307 	bic.w	r3, r3, #7
 800a30e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4a15      	ldr	r2, [pc, #84]	@ (800a368 <prvHeapInit+0xb4>)
 800a314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a316:	4b14      	ldr	r3, [pc, #80]	@ (800a368 <prvHeapInit+0xb4>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a31e:	4b12      	ldr	r3, [pc, #72]	@ (800a368 <prvHeapInit+0xb4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a334:	4b0c      	ldr	r3, [pc, #48]	@ (800a368 <prvHeapInit+0xb4>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4a0a      	ldr	r2, [pc, #40]	@ (800a36c <prvHeapInit+0xb8>)
 800a342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	4a09      	ldr	r2, [pc, #36]	@ (800a370 <prvHeapInit+0xbc>)
 800a34a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a34c:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <prvHeapInit+0xc0>)
 800a34e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a352:	601a      	str	r2, [r3, #0]
}
 800a354:	bf00      	nop
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	bc80      	pop	{r7}
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	200012f4 	.word	0x200012f4
 800a364:	20001ef4 	.word	0x20001ef4
 800a368:	20001efc 	.word	0x20001efc
 800a36c:	20001f04 	.word	0x20001f04
 800a370:	20001f00 	.word	0x20001f00
 800a374:	20001f10 	.word	0x20001f10

0800a378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a380:	4b27      	ldr	r3, [pc, #156]	@ (800a420 <prvInsertBlockIntoFreeList+0xa8>)
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	e002      	b.n	800a38c <prvInsertBlockIntoFreeList+0x14>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	429a      	cmp	r2, r3
 800a394:	d8f7      	bhi.n	800a386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d108      	bne.n	800a3ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	441a      	add	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d118      	bne.n	800a400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4b14      	ldr	r3, [pc, #80]	@ (800a424 <prvInsertBlockIntoFreeList+0xac>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d00d      	beq.n	800a3f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	441a      	add	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e008      	b.n	800a408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a424 <prvInsertBlockIntoFreeList+0xac>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e003      	b.n	800a408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d002      	beq.n	800a416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a416:	bf00      	nop
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bc80      	pop	{r7}
 800a41e:	4770      	bx	lr
 800a420:	20001ef4 	.word	0x20001ef4
 800a424:	20001efc 	.word	0x20001efc

0800a428 <memset>:
 800a428:	4603      	mov	r3, r0
 800a42a:	4402      	add	r2, r0
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d100      	bne.n	800a432 <memset+0xa>
 800a430:	4770      	bx	lr
 800a432:	f803 1b01 	strb.w	r1, [r3], #1
 800a436:	e7f9      	b.n	800a42c <memset+0x4>

0800a438 <__libc_init_array>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	2600      	movs	r6, #0
 800a43c:	4d0c      	ldr	r5, [pc, #48]	@ (800a470 <__libc_init_array+0x38>)
 800a43e:	4c0d      	ldr	r4, [pc, #52]	@ (800a474 <__libc_init_array+0x3c>)
 800a440:	1b64      	subs	r4, r4, r5
 800a442:	10a4      	asrs	r4, r4, #2
 800a444:	42a6      	cmp	r6, r4
 800a446:	d109      	bne.n	800a45c <__libc_init_array+0x24>
 800a448:	f000 f828 	bl	800a49c <_init>
 800a44c:	2600      	movs	r6, #0
 800a44e:	4d0a      	ldr	r5, [pc, #40]	@ (800a478 <__libc_init_array+0x40>)
 800a450:	4c0a      	ldr	r4, [pc, #40]	@ (800a47c <__libc_init_array+0x44>)
 800a452:	1b64      	subs	r4, r4, r5
 800a454:	10a4      	asrs	r4, r4, #2
 800a456:	42a6      	cmp	r6, r4
 800a458:	d105      	bne.n	800a466 <__libc_init_array+0x2e>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a460:	4798      	blx	r3
 800a462:	3601      	adds	r6, #1
 800a464:	e7ee      	b.n	800a444 <__libc_init_array+0xc>
 800a466:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46a:	4798      	blx	r3
 800a46c:	3601      	adds	r6, #1
 800a46e:	e7f2      	b.n	800a456 <__libc_init_array+0x1e>
 800a470:	0800a584 	.word	0x0800a584
 800a474:	0800a584 	.word	0x0800a584
 800a478:	0800a584 	.word	0x0800a584
 800a47c:	0800a588 	.word	0x0800a588

0800a480 <memcpy>:
 800a480:	440a      	add	r2, r1
 800a482:	4291      	cmp	r1, r2
 800a484:	f100 33ff 	add.w	r3, r0, #4294967295
 800a488:	d100      	bne.n	800a48c <memcpy+0xc>
 800a48a:	4770      	bx	lr
 800a48c:	b510      	push	{r4, lr}
 800a48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a492:	4291      	cmp	r1, r2
 800a494:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a498:	d1f9      	bne.n	800a48e <memcpy+0xe>
 800a49a:	bd10      	pop	{r4, pc}

0800a49c <_init>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr

0800a4a8 <_fini>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	bf00      	nop
 800a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ae:	bc08      	pop	{r3}
 800a4b0:	469e      	mov	lr, r3
 800a4b2:	4770      	bx	lr
